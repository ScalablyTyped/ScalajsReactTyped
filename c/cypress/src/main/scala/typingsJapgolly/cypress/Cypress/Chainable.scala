package typingsJapgolly.cypress.Cypress

import org.scalajs.dom.AnimationEvent
import org.scalajs.dom.BeforeUnloadEvent
import org.scalajs.dom.ClipboardEvent
import org.scalajs.dom.CompositionEvent
import org.scalajs.dom.DOMStringList
import org.scalajs.dom.Document
import org.scalajs.dom.DragEvent
import org.scalajs.dom.Element
import org.scalajs.dom.ErrorEvent
import org.scalajs.dom.Event
import org.scalajs.dom.FocusEvent
import org.scalajs.dom.HTMLAnchorElement
import org.scalajs.dom.HTMLAreaElement
import org.scalajs.dom.HTMLAudioElement
import org.scalajs.dom.HTMLBRElement
import org.scalajs.dom.HTMLBaseElement
import org.scalajs.dom.HTMLBodyElement
import org.scalajs.dom.HTMLButtonElement
import org.scalajs.dom.HTMLCanvasElement
import org.scalajs.dom.HTMLDListElement
import org.scalajs.dom.HTMLDataListElement
import org.scalajs.dom.HTMLDivElement
import org.scalajs.dom.HTMLElement
import org.scalajs.dom.HTMLEmbedElement
import org.scalajs.dom.HTMLFieldSetElement
import org.scalajs.dom.HTMLFormElement
import org.scalajs.dom.HTMLHRElement
import org.scalajs.dom.HTMLHeadElement
import org.scalajs.dom.HTMLHeadingElement
import org.scalajs.dom.HTMLHtmlElement
import org.scalajs.dom.HTMLIFrameElement
import org.scalajs.dom.HTMLImageElement
import org.scalajs.dom.HTMLInputElement
import org.scalajs.dom.HTMLLIElement
import org.scalajs.dom.HTMLLabelElement
import org.scalajs.dom.HTMLLegendElement
import org.scalajs.dom.HTMLLinkElement
import org.scalajs.dom.HTMLMapElement
import org.scalajs.dom.HTMLMenuElement
import org.scalajs.dom.HTMLMetaElement
import org.scalajs.dom.HTMLModElement
import org.scalajs.dom.HTMLOListElement
import org.scalajs.dom.HTMLObjectElement
import org.scalajs.dom.HTMLOptGroupElement
import org.scalajs.dom.HTMLOptionElement
import org.scalajs.dom.HTMLParagraphElement
import org.scalajs.dom.HTMLPreElement
import org.scalajs.dom.HTMLProgressElement
import org.scalajs.dom.HTMLQuoteElement
import org.scalajs.dom.HTMLScriptElement
import org.scalajs.dom.HTMLSelectElement
import org.scalajs.dom.HTMLSourceElement
import org.scalajs.dom.HTMLSpanElement
import org.scalajs.dom.HTMLStyleElement
import org.scalajs.dom.HTMLTableCaptionElement
import org.scalajs.dom.HTMLTableCellElement
import org.scalajs.dom.HTMLTableColElement
import org.scalajs.dom.HTMLTableElement
import org.scalajs.dom.HTMLTableRowElement
import org.scalajs.dom.HTMLTableSectionElement
import org.scalajs.dom.HTMLTextAreaElement
import org.scalajs.dom.HTMLTitleElement
import org.scalajs.dom.HTMLTrackElement
import org.scalajs.dom.HTMLUListElement
import org.scalajs.dom.HTMLVideoElement
import org.scalajs.dom.KeyboardEvent
import org.scalajs.dom.Location
import org.scalajs.dom.MouseEvent
import org.scalajs.dom.Node
import org.scalajs.dom.PointerEvent
import org.scalajs.dom.ProgressEvent
import org.scalajs.dom.Storage
import org.scalajs.dom.TouchEvent
import org.scalajs.dom.TransitionEvent
import org.scalajs.dom.UIEvent
import org.scalajs.dom.WheelEvent
import typingsJapgolly.cypress.JQuery
import typingsJapgolly.cypress.JQuery.Selector
import typingsJapgolly.cypress.Mocha.Runnable
import typingsJapgolly.cypress.Mocha.Test
import typingsJapgolly.cypress.anon.Args
import typingsJapgolly.cypress.anon.PartialBlurOptions
import typingsJapgolly.cypress.anon.PartialCheckOptions
import typingsJapgolly.cypress.anon.PartialClearOptions
import typingsJapgolly.cypress.anon.PartialClickOptions
import typingsJapgolly.cypress.anon.PartialExecOptions
import typingsJapgolly.cypress.anon.PartialLoggable
import typingsJapgolly.cypress.anon.PartialLoggableTimeoutabl
import typingsJapgolly.cypress.anon.PartialLoggableTimeoutablBlackout
import typingsJapgolly.cypress.anon.PartialLoggableTimeoutablIncludeShadowDom
import typingsJapgolly.cypress.anon.PartialLoggableTimeoutablLog
import typingsJapgolly.cypress.anon.PartialLoggableTimeoutablTimeout
import typingsJapgolly.cypress.anon.PartialRequestOptions
import typingsJapgolly.cypress.anon.PartialRouteOptions
import typingsJapgolly.cypress.anon.PartialScrollIntoViewOpti
import typingsJapgolly.cypress.anon.PartialScrollToOptions
import typingsJapgolly.cypress.anon.PartialSelectFileOptions
import typingsJapgolly.cypress.anon.PartialSelectOptions
import typingsJapgolly.cypress.anon.PartialServerOptions
import typingsJapgolly.cypress.anon.PartialSetCookieOptions
import typingsJapgolly.cypress.anon.PartialTimeoutable
import typingsJapgolly.cypress.anon.PartialTriggerOptionsObje
import typingsJapgolly.cypress.anon.PartialTypeOptions
import typingsJapgolly.cypress.anon.PartialUrlOptions
import typingsJapgolly.cypress.anon.PartialVisitOptions
import typingsJapgolly.cypress.anon.PartialVisitOptionsurlstr
import typingsJapgolly.cypress.anon.PartialWriteFileOptionsTi
import typingsJapgolly.cypress.cypressBooleans.`false`
import typingsJapgolly.cypress.cypressStrings.DOMContentLoaded
import typingsJapgolly.cypress.cypressStrings.Date
import typingsJapgolly.cypress.cypressStrings.`match`
import typingsJapgolly.cypress.cypressStrings.`throw`
import typingsJapgolly.cypress.cypressStrings.`var`
import typingsJapgolly.cypress.cypressStrings.a
import typingsJapgolly.cypress.cypressStrings.abbr
import typingsJapgolly.cypress.cypressStrings.abort
import typingsJapgolly.cypress.cypressStrings.address
import typingsJapgolly.cypress.cypressStrings.alwaysDothaveDotbeenDotcalledOn
import typingsJapgolly.cypress.cypressStrings.alwaysDothaveDotbeenDotcalledWith
import typingsJapgolly.cypress.cypressStrings.alwaysDothaveDotbeenDotcalledWithMatch
import typingsJapgolly.cypress.cypressStrings.alwaysDothaveDotbeenDotcalledWithNew
import typingsJapgolly.cypress.cypressStrings.alwaysDotreturned
import typingsJapgolly.cypress.cypressStrings.ancestorOrigins
import typingsJapgolly.cypress.cypressStrings.animationcancel
import typingsJapgolly.cypress.cypressStrings.animationend
import typingsJapgolly.cypress.cypressStrings.animationiteration
import typingsJapgolly.cypress.cypressStrings.animationstart
import typingsJapgolly.cypress.cypressStrings.area
import typingsJapgolly.cypress.cypressStrings.article
import typingsJapgolly.cypress.cypressStrings.aside
import typingsJapgolly.cypress.cypressStrings.audio
import typingsJapgolly.cypress.cypressStrings.auxclick
import typingsJapgolly.cypress.cypressStrings.b
import typingsJapgolly.cypress.cypressStrings.base_
import typingsJapgolly.cypress.cypressStrings.bdi
import typingsJapgolly.cypress.cypressStrings.bdo
import typingsJapgolly.cypress.cypressStrings.beDotNaN
import typingsJapgolly.cypress.cypressStrings.beDota
import typingsJapgolly.cypress.cypressStrings.beDotabove
import typingsJapgolly.cypress.cypressStrings.beDotalwaysDotcalledOn
import typingsJapgolly.cypress.cypressStrings.beDotalwaysDotcalledWith
import typingsJapgolly.cypress.cypressStrings.beDotalwaysDotcalledWithExactly
import typingsJapgolly.cypress.cypressStrings.beDotalwaysDotcalledWithMatch
import typingsJapgolly.cypress.cypressStrings.beDotalwaysDotcalledWithNew
import typingsJapgolly.cypress.cypressStrings.beDotan
import typingsJapgolly.cypress.cypressStrings.beDotapproximately
import typingsJapgolly.cypress.cypressStrings.beDotarguments
import typingsJapgolly.cypress.cypressStrings.beDotatDotleast
import typingsJapgolly.cypress.cypressStrings.beDotbelow
import typingsJapgolly.cypress.cypressStrings.beDotcalled
import typingsJapgolly.cypress.cypressStrings.beDotcalledAfter
import typingsJapgolly.cypress.cypressStrings.beDotcalledBefore
import typingsJapgolly.cypress.cypressStrings.beDotcalledImmediatelyAfter
import typingsJapgolly.cypress.cypressStrings.beDotcalledImmediatelyBefore
import typingsJapgolly.cypress.cypressStrings.beDotcalledOn
import typingsJapgolly.cypress.cypressStrings.beDotcalledOnce
import typingsJapgolly.cypress.cypressStrings.beDotcalledOnceWith
import typingsJapgolly.cypress.cypressStrings.beDotcalledOnceWithExactly
import typingsJapgolly.cypress.cypressStrings.beDotcalledThrice
import typingsJapgolly.cypress.cypressStrings.beDotcalledTwice
import typingsJapgolly.cypress.cypressStrings.beDotcalledWith
import typingsJapgolly.cypress.cypressStrings.beDotcalledWithExactly
import typingsJapgolly.cypress.cypressStrings.beDotcalledWithMatch
import typingsJapgolly.cypress.cypressStrings.beDotcalledWithNew
import typingsJapgolly.cypress.cypressStrings.beDotchecked
import typingsJapgolly.cypress.cypressStrings.beDotcloseTo
import typingsJapgolly.cypress.cypressStrings.beDotdisabled
import typingsJapgolly.cypress.cypressStrings.beDotempty
import typingsJapgolly.cypress.cypressStrings.beDotenabled
import typingsJapgolly.cypress.cypressStrings.beDotextensible
import typingsJapgolly.cypress.cypressStrings.beDotfalse
import typingsJapgolly.cypress.cypressStrings.beDotfinite
import typingsJapgolly.cypress.cypressStrings.beDotfocused
import typingsJapgolly.cypress.cypressStrings.beDotfrozen
import typingsJapgolly.cypress.cypressStrings.beDotgreaterThan
import typingsJapgolly.cypress.cypressStrings.beDotgt
import typingsJapgolly.cypress.cypressStrings.beDotgte
import typingsJapgolly.cypress.cypressStrings.beDothidden
import typingsJapgolly.cypress.cypressStrings.beDotinstanceOf
import typingsJapgolly.cypress.cypressStrings.beDotlessThan
import typingsJapgolly.cypress.cypressStrings.beDotlt
import typingsJapgolly.cypress.cypressStrings.beDotlte
import typingsJapgolly.cypress.cypressStrings.beDotnull
import typingsJapgolly.cypress.cypressStrings.beDotok
import typingsJapgolly.cypress.cypressStrings.beDotoneOf
import typingsJapgolly.cypress.cypressStrings.beDotsealed
import typingsJapgolly.cypress.cypressStrings.beDotselected
import typingsJapgolly.cypress.cypressStrings.beDottrue
import typingsJapgolly.cypress.cypressStrings.beDotundefined
import typingsJapgolly.cypress.cypressStrings.beDotvisible
import typingsJapgolly.cypress.cypressStrings.beDotwithin
import typingsJapgolly.cypress.cypressStrings.beforeinput
import typingsJapgolly.cypress.cypressStrings.blockquote
import typingsJapgolly.cypress.cypressStrings.blur
import typingsJapgolly.cypress.cypressStrings.body
import typingsJapgolly.cypress.cypressStrings.br
import typingsJapgolly.cypress.cypressStrings.button
import typingsJapgolly.cypress.cypressStrings.canplay
import typingsJapgolly.cypress.cypressStrings.canplaythrough
import typingsJapgolly.cypress.cypressStrings.canvas
import typingsJapgolly.cypress.cypressStrings.caption
import typingsJapgolly.cypress.cypressStrings.change
import typingsJapgolly.cypress.cypressStrings.cite
import typingsJapgolly.cypress.cypressStrings.clearInterval
import typingsJapgolly.cypress.cypressStrings.clearTimeout
import typingsJapgolly.cypress.cypressStrings.click
import typingsJapgolly.cypress.cypressStrings.close
import typingsJapgolly.cypress.cypressStrings.code
import typingsJapgolly.cypress.cypressStrings.col
import typingsJapgolly.cypress.cypressStrings.colgroup
import typingsJapgolly.cypress.cypressStrings.commandColonend
import typingsJapgolly.cypress.cypressStrings.commandColonenqueued
import typingsJapgolly.cypress.cypressStrings.commandColonretry
import typingsJapgolly.cypress.cypressStrings.commandColonstart
import typingsJapgolly.cypress.cypressStrings.compositionend
import typingsJapgolly.cypress.cypressStrings.compositionstart
import typingsJapgolly.cypress.cypressStrings.compositionupdate
import typingsJapgolly.cypress.cypressStrings.contain
import typingsJapgolly.cypress.cypressStrings.containDothtml
import typingsJapgolly.cypress.cypressStrings.containDottext
import typingsJapgolly.cypress.cypressStrings.containDotvalue
import typingsJapgolly.cypress.cypressStrings.contextmenu
import typingsJapgolly.cypress.cypressStrings.copy_
import typingsJapgolly.cypress.cypressStrings.cuechange
import typingsJapgolly.cypress.cypressStrings.cut
import typingsJapgolly.cypress.cypressStrings.data
import typingsJapgolly.cypress.cypressStrings.datalist
import typingsJapgolly.cypress.cypressStrings.dblclick
import typingsJapgolly.cypress.cypressStrings.dd
import typingsJapgolly.cypress.cypressStrings.decrease
import typingsJapgolly.cypress.cypressStrings.deepDotequal
import typingsJapgolly.cypress.cypressStrings.deepDotinclude
import typingsJapgolly.cypress.cypressStrings.deepDotnestedDotinclude
import typingsJapgolly.cypress.cypressStrings.deepDotownDotinclude
import typingsJapgolly.cypress.cypressStrings.del
import typingsJapgolly.cypress.cypressStrings.details
import typingsJapgolly.cypress.cypressStrings.dfn
import typingsJapgolly.cypress.cypressStrings.dialog
import typingsJapgolly.cypress.cypressStrings.div
import typingsJapgolly.cypress.cypressStrings.dl
import typingsJapgolly.cypress.cypressStrings.drag
import typingsJapgolly.cypress.cypressStrings.dragend
import typingsJapgolly.cypress.cypressStrings.dragenter
import typingsJapgolly.cypress.cypressStrings.dragleave
import typingsJapgolly.cypress.cypressStrings.dragover
import typingsJapgolly.cypress.cypressStrings.dragstart
import typingsJapgolly.cypress.cypressStrings.drop
import typingsJapgolly.cypress.cypressStrings.dt
import typingsJapgolly.cypress.cypressStrings.durationchange
import typingsJapgolly.cypress.cypressStrings.em
import typingsJapgolly.cypress.cypressStrings.embed
import typingsJapgolly.cypress.cypressStrings.emptied
import typingsJapgolly.cypress.cypressStrings.ended
import typingsJapgolly.cypress.cypressStrings.eq
import typingsJapgolly.cypress.cypressStrings.eql
import typingsJapgolly.cypress.cypressStrings.equal
import typingsJapgolly.cypress.cypressStrings.error
import typingsJapgolly.cypress.cypressStrings.exist
import typingsJapgolly.cypress.cypressStrings.fail
import typingsJapgolly.cypress.cypressStrings.fieldset
import typingsJapgolly.cypress.cypressStrings.figcaption
import typingsJapgolly.cypress.cypressStrings.figure
import typingsJapgolly.cypress.cypressStrings.focus
import typingsJapgolly.cypress.cypressStrings.focusin
import typingsJapgolly.cypress.cypressStrings.focusout
import typingsJapgolly.cypress.cypressStrings.footer
import typingsJapgolly.cypress.cypressStrings.form
import typingsJapgolly.cypress.cypressStrings.formdata
import typingsJapgolly.cypress.cypressStrings.fullscreenchange
import typingsJapgolly.cypress.cypressStrings.fullscreenerror
import typingsJapgolly.cypress.cypressStrings.gotpointercapture
import typingsJapgolly.cypress.cypressStrings.h1
import typingsJapgolly.cypress.cypressStrings.h2
import typingsJapgolly.cypress.cypressStrings.h3
import typingsJapgolly.cypress.cypressStrings.h4
import typingsJapgolly.cypress.cypressStrings.h5
import typingsJapgolly.cypress.cypressStrings.h6
import typingsJapgolly.cypress.cypressStrings.hash
import typingsJapgolly.cypress.cypressStrings.haveDotaDotproperty
import typingsJapgolly.cypress.cypressStrings.haveDotallDotdeepDotkeys
import typingsJapgolly.cypress.cypressStrings.haveDotallDotkey
import typingsJapgolly.cypress.cypressStrings.haveDotallDotkeys
import typingsJapgolly.cypress.cypressStrings.haveDotalwaysDotreturned
import typingsJapgolly.cypress.cypressStrings.haveDotalwaysDotthrown
import typingsJapgolly.cypress.cypressStrings.haveDotanyDotkey
import typingsJapgolly.cypress.cypressStrings.haveDotanyDotkeys
import typingsJapgolly.cypress.cypressStrings.haveDotattr
import typingsJapgolly.cypress.cypressStrings.haveDotbeenDotcalled
import typingsJapgolly.cypress.cypressStrings.haveDotbeenDotcalledAfter
import typingsJapgolly.cypress.cypressStrings.haveDotbeenDotcalledBefore
import typingsJapgolly.cypress.cypressStrings.haveDotbeenDotcalledImmediatelyAfter
import typingsJapgolly.cypress.cypressStrings.haveDotbeenDotcalledImmediatelyBefore
import typingsJapgolly.cypress.cypressStrings.haveDotbeenDotcalledOn
import typingsJapgolly.cypress.cypressStrings.haveDotbeenDotcalledOnce
import typingsJapgolly.cypress.cypressStrings.haveDotbeenDotcalledOnceWith
import typingsJapgolly.cypress.cypressStrings.haveDotbeenDotcalledOnceWithExactly
import typingsJapgolly.cypress.cypressStrings.haveDotbeenDotcalledThrice
import typingsJapgolly.cypress.cypressStrings.haveDotbeenDotcalledTwice
import typingsJapgolly.cypress.cypressStrings.haveDotbeenDotcalledWith
import typingsJapgolly.cypress.cypressStrings.haveDotbeenDotcalledWithExactly
import typingsJapgolly.cypress.cypressStrings.haveDotbeenDotcalledWithMatch
import typingsJapgolly.cypress.cypressStrings.haveDotbeenDotcalledWithNew
import typingsJapgolly.cypress.cypressStrings.haveDotcallCount
import typingsJapgolly.cypress.cypressStrings.haveDotclass
import typingsJapgolly.cypress.cypressStrings.haveDotcss
import typingsJapgolly.cypress.cypressStrings.haveDotdata
import typingsJapgolly.cypress.cypressStrings.haveDotdeepDotkeys
import typingsJapgolly.cypress.cypressStrings.haveDotdeepDotmembers
import typingsJapgolly.cypress.cypressStrings.haveDotdeepDotnestedDotproperty
import typingsJapgolly.cypress.cypressStrings.haveDotdeepDotownDotproperty
import typingsJapgolly.cypress.cypressStrings.haveDotdeepDotproperty
import typingsJapgolly.cypress.cypressStrings.haveDotdescendants
import typingsJapgolly.cypress.cypressStrings.haveDotfocus
import typingsJapgolly.cypress.cypressStrings.haveDothtml
import typingsJapgolly.cypress.cypressStrings.haveDotid
import typingsJapgolly.cypress.cypressStrings.haveDotkeys
import typingsJapgolly.cypress.cypressStrings.haveDotlength
import typingsJapgolly.cypress.cypressStrings.haveDotlengthDotabove
import typingsJapgolly.cypress.cypressStrings.haveDotlengthDotatDotleast
import typingsJapgolly.cypress.cypressStrings.haveDotlengthDotatDotmost
import typingsJapgolly.cypress.cypressStrings.haveDotlengthDotbelow
import typingsJapgolly.cypress.cypressStrings.haveDotlengthDotgreaterThan
import typingsJapgolly.cypress.cypressStrings.haveDotlengthDotgt
import typingsJapgolly.cypress.cypressStrings.haveDotlengthDotgte
import typingsJapgolly.cypress.cypressStrings.haveDotlengthDotlessThan
import typingsJapgolly.cypress.cypressStrings.haveDotlengthDotlt
import typingsJapgolly.cypress.cypressStrings.haveDotlengthDotlte
import typingsJapgolly.cypress.cypressStrings.haveDotlengthDotwithin
import typingsJapgolly.cypress.cypressStrings.haveDotlengthOf
import typingsJapgolly.cypress.cypressStrings.haveDotlengthOfDotabove
import typingsJapgolly.cypress.cypressStrings.haveDotlengthOfDotatDotleast
import typingsJapgolly.cypress.cypressStrings.haveDotlengthOfDotatDotmost
import typingsJapgolly.cypress.cypressStrings.haveDotlengthOfDotbelow
import typingsJapgolly.cypress.cypressStrings.haveDotlengthOfDotgreaterThan
import typingsJapgolly.cypress.cypressStrings.haveDotlengthOfDotgt
import typingsJapgolly.cypress.cypressStrings.haveDotlengthOfDotgte
import typingsJapgolly.cypress.cypressStrings.haveDotlengthOfDotlessThan
import typingsJapgolly.cypress.cypressStrings.haveDotlengthOfDotlt
import typingsJapgolly.cypress.cypressStrings.haveDotlengthOfDotlte
import typingsJapgolly.cypress.cypressStrings.haveDotlengthOfDotwithin
import typingsJapgolly.cypress.cypressStrings.haveDotmembers
import typingsJapgolly.cypress.cypressStrings.haveDotnestedDotproperty
import typingsJapgolly.cypress.cypressStrings.haveDotorderedDotmembers
import typingsJapgolly.cypress.cypressStrings.haveDotownDotproperty
import typingsJapgolly.cypress.cypressStrings.haveDotownProperty
import typingsJapgolly.cypress.cypressStrings.haveDotownPropertyDescriptor
import typingsJapgolly.cypress.cypressStrings.haveDotprop
import typingsJapgolly.cypress.cypressStrings.haveDotproperty
import typingsJapgolly.cypress.cypressStrings.haveDotreturned
import typingsJapgolly.cypress.cypressStrings.haveDotstring
import typingsJapgolly.cypress.cypressStrings.haveDottext
import typingsJapgolly.cypress.cypressStrings.haveDotthrown
import typingsJapgolly.cypress.cypressStrings.haveDotvalue
import typingsJapgolly.cypress.cypressStrings.haveOwnPropertyDescriptor
import typingsJapgolly.cypress.cypressStrings.head_
import typingsJapgolly.cypress.cypressStrings.header
import typingsJapgolly.cypress.cypressStrings.hgroup
import typingsJapgolly.cypress.cypressStrings.host
import typingsJapgolly.cypress.cypressStrings.hostname
import typingsJapgolly.cypress.cypressStrings.hr
import typingsJapgolly.cypress.cypressStrings.href
import typingsJapgolly.cypress.cypressStrings.html_
import typingsJapgolly.cypress.cypressStrings.i
import typingsJapgolly.cypress.cypressStrings.iframe
import typingsJapgolly.cypress.cypressStrings.img
import typingsJapgolly.cypress.cypressStrings.include
import typingsJapgolly.cypress.cypressStrings.includeDotallDotkeys
import typingsJapgolly.cypress.cypressStrings.includeDotanyDotkeys
import typingsJapgolly.cypress.cypressStrings.includeDotdeepDotorderedDotmembers
import typingsJapgolly.cypress.cypressStrings.includeDothtml
import typingsJapgolly.cypress.cypressStrings.includeDotmembers
import typingsJapgolly.cypress.cypressStrings.includeDotorderedDotmembers
import typingsJapgolly.cypress.cypressStrings.includeDottext
import typingsJapgolly.cypress.cypressStrings.includeDotvalue
import typingsJapgolly.cypress.cypressStrings.increase
import typingsJapgolly.cypress.cypressStrings.input
import typingsJapgolly.cypress.cypressStrings.ins
import typingsJapgolly.cypress.cypressStrings.invalid
import typingsJapgolly.cypress.cypressStrings.kbd
import typingsJapgolly.cypress.cypressStrings.keydown
import typingsJapgolly.cypress.cypressStrings.keypress
import typingsJapgolly.cypress.cypressStrings.keyup
import typingsJapgolly.cypress.cypressStrings.label
import typingsJapgolly.cypress.cypressStrings.legend
import typingsJapgolly.cypress.cypressStrings.li
import typingsJapgolly.cypress.cypressStrings.link_
import typingsJapgolly.cypress.cypressStrings.load
import typingsJapgolly.cypress.cypressStrings.loadeddata
import typingsJapgolly.cypress.cypressStrings.loadedmetadata
import typingsJapgolly.cypress.cypressStrings.loadstart
import typingsJapgolly.cypress.cypressStrings.logColonadded
import typingsJapgolly.cypress.cypressStrings.logColonchanged
import typingsJapgolly.cypress.cypressStrings.lostpointercapture
import typingsJapgolly.cypress.cypressStrings.main
import typingsJapgolly.cypress.cypressStrings.map
import typingsJapgolly.cypress.cypressStrings.mark
import typingsJapgolly.cypress.cypressStrings.menu
import typingsJapgolly.cypress.cypressStrings.meta
import typingsJapgolly.cypress.cypressStrings.meter
import typingsJapgolly.cypress.cypressStrings.mousedown
import typingsJapgolly.cypress.cypressStrings.mouseenter
import typingsJapgolly.cypress.cypressStrings.mouseleave
import typingsJapgolly.cypress.cypressStrings.mousemove
import typingsJapgolly.cypress.cypressStrings.mouseout
import typingsJapgolly.cypress.cypressStrings.mouseover
import typingsJapgolly.cypress.cypressStrings.mouseup
import typingsJapgolly.cypress.cypressStrings.nav
import typingsJapgolly.cypress.cypressStrings.nestedDotinclude
import typingsJapgolly.cypress.cypressStrings.noscript
import typingsJapgolly.cypress.cypressStrings.notDotalwaysDothaveDotbeenDotcalledOn
import typingsJapgolly.cypress.cypressStrings.notDotalwaysDothaveDotbeenDotcalledWith
import typingsJapgolly.cypress.cypressStrings.notDotalwaysDothaveDotbeenDotcalledWithMatch
import typingsJapgolly.cypress.cypressStrings.notDotalwaysDothaveDotbeenDotcalledWithNew
import typingsJapgolly.cypress.cypressStrings.notDotalwaysDotreturned
import typingsJapgolly.cypress.cypressStrings.notDotbeDotNaN
import typingsJapgolly.cypress.cypressStrings.notDotbeDota
import typingsJapgolly.cypress.cypressStrings.notDotbeDotabove
import typingsJapgolly.cypress.cypressStrings.notDotbeDotalwaysDotcalledOn
import typingsJapgolly.cypress.cypressStrings.notDotbeDotalwaysDotcalledWith
import typingsJapgolly.cypress.cypressStrings.notDotbeDotalwaysDotcalledWithExactly
import typingsJapgolly.cypress.cypressStrings.notDotbeDotalwaysDotcalledWithMatch
import typingsJapgolly.cypress.cypressStrings.notDotbeDotalwaysDotcalledWithNew
import typingsJapgolly.cypress.cypressStrings.notDotbeDotan
import typingsJapgolly.cypress.cypressStrings.notDotbeDotapproximately
import typingsJapgolly.cypress.cypressStrings.notDotbeDotarguments
import typingsJapgolly.cypress.cypressStrings.notDotbeDotatDotleast
import typingsJapgolly.cypress.cypressStrings.notDotbeDotbelow
import typingsJapgolly.cypress.cypressStrings.notDotbeDotcalled
import typingsJapgolly.cypress.cypressStrings.notDotbeDotcalledAfter
import typingsJapgolly.cypress.cypressStrings.notDotbeDotcalledBefore
import typingsJapgolly.cypress.cypressStrings.notDotbeDotcalledImmediatelyAfter
import typingsJapgolly.cypress.cypressStrings.notDotbeDotcalledImmediatelyBefore
import typingsJapgolly.cypress.cypressStrings.notDotbeDotcalledOn
import typingsJapgolly.cypress.cypressStrings.notDotbeDotcalledOnce
import typingsJapgolly.cypress.cypressStrings.notDotbeDotcalledOnceWith
import typingsJapgolly.cypress.cypressStrings.notDotbeDotcalledOnceWithExactly
import typingsJapgolly.cypress.cypressStrings.notDotbeDotcalledThrice
import typingsJapgolly.cypress.cypressStrings.notDotbeDotcalledTwice
import typingsJapgolly.cypress.cypressStrings.notDotbeDotcalledWith
import typingsJapgolly.cypress.cypressStrings.notDotbeDotcalledWithExactly
import typingsJapgolly.cypress.cypressStrings.notDotbeDotcalledWithMatch
import typingsJapgolly.cypress.cypressStrings.notDotbeDotcalledWithNew
import typingsJapgolly.cypress.cypressStrings.notDotbeDotchecked
import typingsJapgolly.cypress.cypressStrings.notDotbeDotcloseTo
import typingsJapgolly.cypress.cypressStrings.notDotbeDotdisabled
import typingsJapgolly.cypress.cypressStrings.notDotbeDotempty
import typingsJapgolly.cypress.cypressStrings.notDotbeDotenabled
import typingsJapgolly.cypress.cypressStrings.notDotbeDotextensible
import typingsJapgolly.cypress.cypressStrings.notDotbeDotfalse
import typingsJapgolly.cypress.cypressStrings.notDotbeDotfinite
import typingsJapgolly.cypress.cypressStrings.notDotbeDotfocused
import typingsJapgolly.cypress.cypressStrings.notDotbeDotfrozen
import typingsJapgolly.cypress.cypressStrings.notDotbeDotgreaterThan
import typingsJapgolly.cypress.cypressStrings.notDotbeDotgt
import typingsJapgolly.cypress.cypressStrings.notDotbeDotgte
import typingsJapgolly.cypress.cypressStrings.notDotbeDothidden
import typingsJapgolly.cypress.cypressStrings.notDotbeDotinstanceOf
import typingsJapgolly.cypress.cypressStrings.notDotbeDotlessThan
import typingsJapgolly.cypress.cypressStrings.notDotbeDotlt
import typingsJapgolly.cypress.cypressStrings.notDotbeDotlte
import typingsJapgolly.cypress.cypressStrings.notDotbeDotnull
import typingsJapgolly.cypress.cypressStrings.notDotbeDotok
import typingsJapgolly.cypress.cypressStrings.notDotbeDotoneOf
import typingsJapgolly.cypress.cypressStrings.notDotbeDotsealed
import typingsJapgolly.cypress.cypressStrings.notDotbeDotselected
import typingsJapgolly.cypress.cypressStrings.notDotbeDottrue
import typingsJapgolly.cypress.cypressStrings.notDotbeDotundefined
import typingsJapgolly.cypress.cypressStrings.notDotbeDotvisible
import typingsJapgolly.cypress.cypressStrings.notDotbeDotwithin
import typingsJapgolly.cypress.cypressStrings.notDotchange
import typingsJapgolly.cypress.cypressStrings.notDotcontain
import typingsJapgolly.cypress.cypressStrings.notDotcontainDothtml
import typingsJapgolly.cypress.cypressStrings.notDotcontainDottext
import typingsJapgolly.cypress.cypressStrings.notDotcontainDotvalue
import typingsJapgolly.cypress.cypressStrings.notDotdecrease
import typingsJapgolly.cypress.cypressStrings.notDotdeepDotequal
import typingsJapgolly.cypress.cypressStrings.notDotdeepDotinclude
import typingsJapgolly.cypress.cypressStrings.notDotdeepDotnestedDotinclude
import typingsJapgolly.cypress.cypressStrings.notDotdeepDotownDotinclude
import typingsJapgolly.cypress.cypressStrings.notDoteq
import typingsJapgolly.cypress.cypressStrings.notDoteql
import typingsJapgolly.cypress.cypressStrings.notDotequal
import typingsJapgolly.cypress.cypressStrings.notDotexist
import typingsJapgolly.cypress.cypressStrings.notDothaveDotaDotproperty
import typingsJapgolly.cypress.cypressStrings.notDothaveDotallDotdeepDotkeys
import typingsJapgolly.cypress.cypressStrings.notDothaveDotallDotkeys
import typingsJapgolly.cypress.cypressStrings.notDothaveDotalwaysDotreturned
import typingsJapgolly.cypress.cypressStrings.notDothaveDotalwaysDotthrown
import typingsJapgolly.cypress.cypressStrings.notDothaveDotanyDotkeys
import typingsJapgolly.cypress.cypressStrings.notDothaveDotattr
import typingsJapgolly.cypress.cypressStrings.notDothaveDotbeenDotcalled
import typingsJapgolly.cypress.cypressStrings.notDothaveDotbeenDotcalledAfter
import typingsJapgolly.cypress.cypressStrings.notDothaveDotbeenDotcalledBefore
import typingsJapgolly.cypress.cypressStrings.notDothaveDotbeenDotcalledImmediatelyAfter
import typingsJapgolly.cypress.cypressStrings.notDothaveDotbeenDotcalledImmediatelyBefore
import typingsJapgolly.cypress.cypressStrings.notDothaveDotbeenDotcalledOn
import typingsJapgolly.cypress.cypressStrings.notDothaveDotbeenDotcalledOnce
import typingsJapgolly.cypress.cypressStrings.notDothaveDotbeenDotcalledOnceWith
import typingsJapgolly.cypress.cypressStrings.notDothaveDotbeenDotcalledOnceWithExactly
import typingsJapgolly.cypress.cypressStrings.notDothaveDotbeenDotcalledThrice
import typingsJapgolly.cypress.cypressStrings.notDothaveDotbeenDotcalledTwice
import typingsJapgolly.cypress.cypressStrings.notDothaveDotbeenDotcalledWith
import typingsJapgolly.cypress.cypressStrings.notDothaveDotbeenDotcalledWithExactly
import typingsJapgolly.cypress.cypressStrings.notDothaveDotbeenDotcalledWithMatch
import typingsJapgolly.cypress.cypressStrings.notDothaveDotbeenDotcalledWithNew
import typingsJapgolly.cypress.cypressStrings.notDothaveDotcallCount
import typingsJapgolly.cypress.cypressStrings.notDothaveDotclass
import typingsJapgolly.cypress.cypressStrings.notDothaveDotcss
import typingsJapgolly.cypress.cypressStrings.notDothaveDotdata
import typingsJapgolly.cypress.cypressStrings.notDothaveDotdeepDotkeys
import typingsJapgolly.cypress.cypressStrings.notDothaveDotdeepDotmembers
import typingsJapgolly.cypress.cypressStrings.notDothaveDotdeepDotnestedDotproperty
import typingsJapgolly.cypress.cypressStrings.notDothaveDotdeepDotownDotproperty
import typingsJapgolly.cypress.cypressStrings.notDothaveDotdeepDotproperty
import typingsJapgolly.cypress.cypressStrings.notDothaveDotdescendants
import typingsJapgolly.cypress.cypressStrings.notDothaveDotfocus
import typingsJapgolly.cypress.cypressStrings.notDothaveDothtml
import typingsJapgolly.cypress.cypressStrings.notDothaveDotid
import typingsJapgolly.cypress.cypressStrings.notDothaveDotkeys
import typingsJapgolly.cypress.cypressStrings.notDothaveDotlength
import typingsJapgolly.cypress.cypressStrings.notDothaveDotlengthDotabove
import typingsJapgolly.cypress.cypressStrings.notDothaveDotlengthDotatDotleast
import typingsJapgolly.cypress.cypressStrings.notDothaveDotlengthDotatDotmost
import typingsJapgolly.cypress.cypressStrings.notDothaveDotlengthDotbelow
import typingsJapgolly.cypress.cypressStrings.notDothaveDotlengthDotgreaterThan
import typingsJapgolly.cypress.cypressStrings.notDothaveDotlengthDotgt
import typingsJapgolly.cypress.cypressStrings.notDothaveDotlengthDotgte
import typingsJapgolly.cypress.cypressStrings.notDothaveDotlengthDotlessThan
import typingsJapgolly.cypress.cypressStrings.notDothaveDotlengthDotlt
import typingsJapgolly.cypress.cypressStrings.notDothaveDotlengthDotlte
import typingsJapgolly.cypress.cypressStrings.notDothaveDotlengthDotwithin
import typingsJapgolly.cypress.cypressStrings.notDothaveDotlengthOf
import typingsJapgolly.cypress.cypressStrings.notDothaveDotlengthOfDotabove
import typingsJapgolly.cypress.cypressStrings.notDothaveDotlengthOfDotatDotleast
import typingsJapgolly.cypress.cypressStrings.notDothaveDotlengthOfDotatDotmost
import typingsJapgolly.cypress.cypressStrings.notDothaveDotlengthOfDotbelow
import typingsJapgolly.cypress.cypressStrings.notDothaveDotlengthOfDotgreaterThan
import typingsJapgolly.cypress.cypressStrings.notDothaveDotlengthOfDotgt
import typingsJapgolly.cypress.cypressStrings.notDothaveDotlengthOfDotgte
import typingsJapgolly.cypress.cypressStrings.notDothaveDotlengthOfDotlessThan
import typingsJapgolly.cypress.cypressStrings.notDothaveDotlengthOfDotlt
import typingsJapgolly.cypress.cypressStrings.notDothaveDotlengthOfDotlte
import typingsJapgolly.cypress.cypressStrings.notDothaveDotlengthOfDotwithin
import typingsJapgolly.cypress.cypressStrings.notDothaveDotmembers
import typingsJapgolly.cypress.cypressStrings.notDothaveDotnestedDotproperty
import typingsJapgolly.cypress.cypressStrings.notDothaveDotorderedDotmembers
import typingsJapgolly.cypress.cypressStrings.notDothaveDotownDotproperty
import typingsJapgolly.cypress.cypressStrings.notDothaveDotownProperty
import typingsJapgolly.cypress.cypressStrings.notDothaveDotownPropertyDescriptor
import typingsJapgolly.cypress.cypressStrings.notDothaveDotprop
import typingsJapgolly.cypress.cypressStrings.notDothaveDotproperty
import typingsJapgolly.cypress.cypressStrings.notDothaveDotreturned
import typingsJapgolly.cypress.cypressStrings.notDothaveDotstring
import typingsJapgolly.cypress.cypressStrings.notDothaveDottext
import typingsJapgolly.cypress.cypressStrings.notDothaveDotthrown
import typingsJapgolly.cypress.cypressStrings.notDothaveDotvalue
import typingsJapgolly.cypress.cypressStrings.notDothaveOwnPropertyDescriptor
import typingsJapgolly.cypress.cypressStrings.notDotinclude
import typingsJapgolly.cypress.cypressStrings.notDotincludeDotanyDotkeys
import typingsJapgolly.cypress.cypressStrings.notDotincludeDotdeepDotorderedDotmembers
import typingsJapgolly.cypress.cypressStrings.notDotincludeDothtml
import typingsJapgolly.cypress.cypressStrings.notDotincludeDotmembers
import typingsJapgolly.cypress.cypressStrings.notDotincludeDotorderedDotmembers
import typingsJapgolly.cypress.cypressStrings.notDotincludeDottext
import typingsJapgolly.cypress.cypressStrings.notDotincludeDotvalue
import typingsJapgolly.cypress.cypressStrings.notDotincrease
import typingsJapgolly.cypress.cypressStrings.notDotmatch
import typingsJapgolly.cypress.cypressStrings.notDotnestedDotinclude
import typingsJapgolly.cypress.cypressStrings.notDotownDotinclude
import typingsJapgolly.cypress.cypressStrings.notDotrespondTo
import typingsJapgolly.cypress.cypressStrings.notDotreturned
import typingsJapgolly.cypress.cypressStrings.notDotsatisfy
import typingsJapgolly.cypress.cypressStrings.notDotthrow
import typingsJapgolly.cypress.cypressStrings.object_
import typingsJapgolly.cypress.cypressStrings.ol
import typingsJapgolly.cypress.cypressStrings.optgroup
import typingsJapgolly.cypress.cypressStrings.option
import typingsJapgolly.cypress.cypressStrings.origin
import typingsJapgolly.cypress.cypressStrings.output
import typingsJapgolly.cypress.cypressStrings.ownDotinclude
import typingsJapgolly.cypress.cypressStrings.p
import typingsJapgolly.cypress.cypressStrings.paste
import typingsJapgolly.cypress.cypressStrings.pathname
import typingsJapgolly.cypress.cypressStrings.pause
import typingsJapgolly.cypress.cypressStrings.picture
import typingsJapgolly.cypress.cypressStrings.play
import typingsJapgolly.cypress.cypressStrings.playing
import typingsJapgolly.cypress.cypressStrings.pointercancel
import typingsJapgolly.cypress.cypressStrings.pointerdown
import typingsJapgolly.cypress.cypressStrings.pointerenter
import typingsJapgolly.cypress.cypressStrings.pointerleave
import typingsJapgolly.cypress.cypressStrings.pointerlockchange
import typingsJapgolly.cypress.cypressStrings.pointerlockerror
import typingsJapgolly.cypress.cypressStrings.pointermove
import typingsJapgolly.cypress.cypressStrings.pointerout
import typingsJapgolly.cypress.cypressStrings.pointerover
import typingsJapgolly.cypress.cypressStrings.pointerup
import typingsJapgolly.cypress.cypressStrings.port
import typingsJapgolly.cypress.cypressStrings.pre
import typingsJapgolly.cypress.cypressStrings.progress_
import typingsJapgolly.cypress.cypressStrings.protocol
import typingsJapgolly.cypress.cypressStrings.q
import typingsJapgolly.cypress.cypressStrings.ratechange
import typingsJapgolly.cypress.cypressStrings.readystatechange
import typingsJapgolly.cypress.cypressStrings.reset
import typingsJapgolly.cypress.cypressStrings.resize
import typingsJapgolly.cypress.cypressStrings.respondTo
import typingsJapgolly.cypress.cypressStrings.returned
import typingsJapgolly.cypress.cypressStrings.rp
import typingsJapgolly.cypress.cypressStrings.rt
import typingsJapgolly.cypress.cypressStrings.ruby
import typingsJapgolly.cypress.cypressStrings.s
import typingsJapgolly.cypress.cypressStrings.samp
import typingsJapgolly.cypress.cypressStrings.satisfy
import typingsJapgolly.cypress.cypressStrings.script
import typingsJapgolly.cypress.cypressStrings.scroll
import typingsJapgolly.cypress.cypressStrings.scrolled
import typingsJapgolly.cypress.cypressStrings.search_
import typingsJapgolly.cypress.cypressStrings.section
import typingsJapgolly.cypress.cypressStrings.securitypolicyviolation
import typingsJapgolly.cypress.cypressStrings.seeked
import typingsJapgolly.cypress.cypressStrings.seeking
import typingsJapgolly.cypress.cypressStrings.select
import typingsJapgolly.cypress.cypressStrings.selectionchange
import typingsJapgolly.cypress.cypressStrings.selectstart
import typingsJapgolly.cypress.cypressStrings.setInterval
import typingsJapgolly.cypress.cypressStrings.setTimeout
import typingsJapgolly.cypress.cypressStrings.skippedColoncommandColonend
import typingsJapgolly.cypress.cypressStrings.slot
import typingsJapgolly.cypress.cypressStrings.slotchange
import typingsJapgolly.cypress.cypressStrings.small
import typingsJapgolly.cypress.cypressStrings.source_
import typingsJapgolly.cypress.cypressStrings.span
import typingsJapgolly.cypress.cypressStrings.stalled
import typingsJapgolly.cypress.cypressStrings.strong
import typingsJapgolly.cypress.cypressStrings.style
import typingsJapgolly.cypress.cypressStrings.sub
import typingsJapgolly.cypress.cypressStrings.submit
import typingsJapgolly.cypress.cypressStrings.summary
import typingsJapgolly.cypress.cypressStrings.sup
import typingsJapgolly.cypress.cypressStrings.suspend
import typingsJapgolly.cypress.cypressStrings.table
import typingsJapgolly.cypress.cypressStrings.tbody
import typingsJapgolly.cypress.cypressStrings.td
import typingsJapgolly.cypress.cypressStrings.template
import typingsJapgolly.cypress.cypressStrings.testColonafterColonrun
import typingsJapgolly.cypress.cypressStrings.testColonbeforeColonrun
import typingsJapgolly.cypress.cypressStrings.testColonbeforeColonrunColonasync
import typingsJapgolly.cypress.cypressStrings.textarea
import typingsJapgolly.cypress.cypressStrings.tfoot
import typingsJapgolly.cypress.cypressStrings.th
import typingsJapgolly.cypress.cypressStrings.thead
import typingsJapgolly.cypress.cypressStrings.time
import typingsJapgolly.cypress.cypressStrings.timeupdate
import typingsJapgolly.cypress.cypressStrings.title
import typingsJapgolly.cypress.cypressStrings.toggle
import typingsJapgolly.cypress.cypressStrings.touchcancel
import typingsJapgolly.cypress.cypressStrings.touchend
import typingsJapgolly.cypress.cypressStrings.touchmove
import typingsJapgolly.cypress.cypressStrings.touchstart
import typingsJapgolly.cypress.cypressStrings.tr
import typingsJapgolly.cypress.cypressStrings.track
import typingsJapgolly.cypress.cypressStrings.transitioncancel
import typingsJapgolly.cypress.cypressStrings.transitionend
import typingsJapgolly.cypress.cypressStrings.transitionrun
import typingsJapgolly.cypress.cypressStrings.transitionstart
import typingsJapgolly.cypress.cypressStrings.u
import typingsJapgolly.cypress.cypressStrings.ul
import typingsJapgolly.cypress.cypressStrings.uncaughtColonexception
import typingsJapgolly.cypress.cypressStrings.urlColonchanged
import typingsJapgolly.cypress.cypressStrings.video
import typingsJapgolly.cypress.cypressStrings.viewportColonchanged
import typingsJapgolly.cypress.cypressStrings.visibilitychange
import typingsJapgolly.cypress.cypressStrings.volumechange
import typingsJapgolly.cypress.cypressStrings.waiting
import typingsJapgolly.cypress.cypressStrings.wbr
import typingsJapgolly.cypress.cypressStrings.webkitanimationend
import typingsJapgolly.cypress.cypressStrings.webkitanimationiteration
import typingsJapgolly.cypress.cypressStrings.webkitanimationstart
import typingsJapgolly.cypress.cypressStrings.webkittransitionend
import typingsJapgolly.cypress.cypressStrings.wheel
import typingsJapgolly.cypress.cypressStrings.windowColonalert
import typingsJapgolly.cypress.cypressStrings.windowColonbeforeColonload
import typingsJapgolly.cypress.cypressStrings.windowColonbeforeColonunload
import typingsJapgolly.cypress.cypressStrings.windowColonconfirm
import typingsJapgolly.cypress.cypressStrings.windowColonload
import typingsJapgolly.cypress.cypressStrings.windowColonunload
import typingsJapgolly.cypress.typesSinonMod.SinonSpy
import typingsJapgolly.cypress.typesSinonMod.SinonStub
import typingsJapgolly.std.ErrorConstructor
import typingsJapgolly.std.FormDataEvent
import typingsJapgolly.std.HTMLDataElement
import typingsJapgolly.std.HTMLDetailsElement
import typingsJapgolly.std.HTMLDialogElement
import typingsJapgolly.std.HTMLMeterElement
import typingsJapgolly.std.HTMLOutputElement
import typingsJapgolly.std.HTMLPictureElement
import typingsJapgolly.std.HTMLSlotElement
import typingsJapgolly.std.HTMLTemplateElement
import typingsJapgolly.std.HTMLTimeElement
import typingsJapgolly.std.InputEvent
import typingsJapgolly.std.Partial
import typingsJapgolly.std.PromiseLike
import typingsJapgolly.std.ReturnType
import typingsJapgolly.std.SecurityPolicyViolationEvent
import typingsJapgolly.std.SubmitEvent
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/**
  * Chainable interface for non-array Subjects
  */
@js.native
trait Chainable[Subject] extends StObject {
  
  /**
    * jQuery library bound to the AUT
    *
    * @see https://on.cypress.io/$
    * @example
    *    cy.$$('p')
    */
  @JSName("$$")
  def DollarDollar[TElement /* <: Element */](selector: Selector): JQuery[TElement] = js.native
  @JSName("$$")
  def DollarDollar[TElement /* <: Element */](selector: Selector, context: Document): JQuery[TElement] = js.native
  @JSName("$$")
  def DollarDollar[TElement /* <: Element */](selector: Selector, context: Element): JQuery[TElement] = js.native
  @JSName("$$")
  def DollarDollar[TElement /* <: Element */](selector: Selector, context: JQuery[HTMLElement]): JQuery[TElement] = js.native
  
  // sinon-chai
  /**
    * Assert spy/stub was called the `new` operator.
    * Beware that this is inferred based on the value of the this object and the spy function's prototype, so it may give false positives if you actively return the right kind of object.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledwithnew
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  /**
    * `true` if the spy was called at least once
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalled
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert spy was called exactly once
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledonce
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert spy was called exactly three times
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledthrice
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert spy was called exactly twice
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledtwice
    * @see https://on.cypress.io/assertions
    */
  // sinon-chai.not
  /**
    * Assert spy/stub was not called the `new` operator.
    * Beware that this is inferred based on the value of the this object and the spy function's prototype, so it may give false positives if you actively return the right kind of object.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledwithnew
    * @see https://on.cypress.io/assertions
    */
  /**
    * `true` if the spy was not called at least once
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalled
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert spy was not called exactly once
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledonce
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert spy was not called exactly three times
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledthrice
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert spy was not called exactly twice
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledtwice
    * @see https://on.cypress.io/assertions
    */
  def and(
    chainer: alwaysDothaveDotbeenDotcalledWithNew | beDotalwaysDotcalledWithNew | beDotcalled | beDotcalledOnce | beDotcalledThrice | beDotcalledTwice | beDotcalledWithNew | haveDotbeenDotcalled | haveDotbeenDotcalledOnce | haveDotbeenDotcalledThrice | haveDotbeenDotcalledTwice | haveDotbeenDotcalledWithNew | notDotalwaysDothaveDotbeenDotcalledWithNew | notDotbeDotalwaysDotcalledWithNew | notDotbeDotcalled | notDotbeDotcalledOnce | notDotbeDotcalledThrice | notDotbeDotcalledTwice | notDotbeDotcalledWithNew | notDothaveDotbeenDotcalled | notDothaveDotbeenDotcalledOnce | notDothaveDotbeenDotcalledThrice | notDothaveDotbeenDotcalledTwice | notDothaveDotbeenDotcalledWithNew
  ): Chainable[Subject] = js.native
  def and(
    chainer: haveDotownPropertyDescriptor | haveOwnPropertyDescriptor | notDothaveDotownPropertyDescriptor | notDothaveOwnPropertyDescriptor,
    name: String,
    descriptor: js.PropertyDescriptor
  ): Chainable[Subject] = js.native
  /**
    * Asserts that the target has a property with the given key `name`.
    * @example
    *    cy.wrap({ a: 1 }).should('have.property', 'a')
    *    cy.wrap({ a: 1 }).should('have.property', 'a', 1)
    * @see http://chaijs.com/api/bdd/#method_property
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  /**
    * Asserts that the target has its own property descriptor with the given key name.
    * @example
    *    cy.wrap({a: 1}).should('have.ownPropertyDescriptor', 'a', { value: 1 })
    * @see http://chaijs.com/api/bdd/#method_ownpropertydescriptor
    * @see https://on.cypress.io/assertions
    */
  /**
    * Asserts that the target has a property with the given key `name`.
    * @example
    *    cy.wrap({ a: 1 }).should('not.have.property', 'b')
    *    cy.wrap({ a: 1 }).should('not.have.property', 'b', 1)
    * @see http://chaijs.com/api/bdd/#method_property
    * @see https://on.cypress.io/assertions
    */
  /**
    * Asserts that the target has its own property descriptor with the given key name.
    * @example
    *    cy.wrap({a: 1}).should('not.have.ownPropertyDescriptor', 'a', { value: 2 })
    * @see http://chaijs.com/api/bdd/#method_ownpropertydescriptor
    * @see https://on.cypress.io/assertions
    */
  def and(
    chainer: haveDotaDotproperty | haveDotdeepDotnestedDotproperty | haveDotdeepDotownDotproperty | haveDotdeepDotproperty | haveDotnestedDotproperty | haveDotownDotproperty | haveDotownPropertyDescriptor | haveDotproperty | haveOwnPropertyDescriptor | notDothaveDotaDotproperty | notDothaveDotdeepDotnestedDotproperty | notDothaveDotdeepDotownDotproperty | notDothaveDotdeepDotproperty | notDothaveDotnestedDotproperty | notDothaveDotownDotproperty | notDothaveDotownPropertyDescriptor | notDothaveDotproperty | notDothaveOwnPropertyDescriptor,
    property: String
  ): Chainable[Subject] = js.native
  def and(
    chainer: haveDotaDotproperty | haveDotdeepDotnestedDotproperty | haveDotdeepDotownDotproperty | haveDotdeepDotproperty | haveDotnestedDotproperty | haveDotownDotproperty | haveDotproperty | notDothaveDotaDotproperty | notDothaveDotdeepDotnestedDotproperty | notDothaveDotdeepDotownDotproperty | notDothaveDotdeepDotproperty | notDothaveDotnestedDotproperty | notDothaveDotownDotproperty | notDothaveDotproperty,
    property: String,
    value: Any
  ): Chainable[Subject] = js.native
  /**
    * Assert spy was called after `anotherSpy`
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledafteranotherspy
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  /**
    * Assert spy was called before `anotherSpy`
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledbeforeanotherspy
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert spy was called before anotherSpy, and no spy calls occurred between spy and anotherSpy.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledimmediatelybeforeanotherspy
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert spy was called after anotherSpy, and no spy calls occurred between anotherSpy and spy.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledimmediatelyafteranotherspy
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert spy was not.called after `anotherSpy`
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledafteranotherspy
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert spy was not called before `anotherSpy`
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledbeforeanotherspy
    * @see https://on.cypress.io/assertions
    */
  def and(
    chainer: beDotcalledAfter | beDotcalledBefore | beDotcalledImmediatelyAfter | beDotcalledImmediatelyBefore | haveDotbeenDotcalledAfter | haveDotbeenDotcalledBefore | haveDotbeenDotcalledImmediatelyAfter | haveDotbeenDotcalledImmediatelyBefore | notDotbeDotcalledAfter | notDotbeDotcalledBefore | notDotbeDotcalledImmediatelyAfter | notDotbeDotcalledImmediatelyBefore | notDothaveDotbeenDotcalledAfter | notDothaveDotbeenDotcalledBefore | notDothaveDotbeenDotcalledImmediatelyAfter | notDothaveDotbeenDotcalledImmediatelyBefore,
    spy: SinonSpy[js.Array[Any], Any]
  ): Chainable[Subject] = js.native
  /**
    * Asserts that the target's `length` property is within `start` and `finish`.
    * @example
    *    cy.wrap([1, 2, 3]).should('have.length.within', 1, 5)
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  /**
    * Asserts that the target's `length` property is within `start` and `finish`.
    * @example
    *    cy.wrap([1, 2, 3]).should('not.have.length.within', 6, 12)
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  def and(
    chainer: haveDotlengthDotwithin | haveDotlengthOfDotwithin | notDothaveDotlengthDotwithin | notDothaveDotlengthOfDotwithin,
    start: Double,
    finish: Double
  ): Chainable[Subject] = js.native
  /**
    * Causes all `.keys` assertions that follow in the chain to require that the target have all of the given keys. This is the opposite of `.any`, which only requires that the target have at least one of the given keys.
    * @example
    *    cy.wrap({ a: 1, b: 2 }).should('have.all.keys', 'a', 'b')
    * @see http://chaijs.com/api/bdd/#method_all
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  /**
    * Causes all `.keys` assertions that follow in the chain to only require that the target have at least one of the given keys. This is the opposite of `.all`, which requires that the target have all of the given keys.
    * @example
    *    cy.wrap({ a: 1, b: 2 }).should('have.any.keys', 'a')
    * @see http://chaijs.com/api/bdd/#method_any
    * @see https://on.cypress.io/assertions
    */
  /**
    * Causes all `.keys` assertions that follow in the chain to not require that the target have all of the given keys. This is the opposite of `.any`, which only requires that the target have at least one of the given keys.
    * @example
    *    cy.wrap({ a: 1, b: 2 }).should('not.have.all.keys', 'c', 'd')
    * @see http://chaijs.com/api/bdd/#method_all
    * @see https://on.cypress.io/assertions
    */
  /**
    * Causes all `.keys` assertions that follow in the chain to only require that the target not have at least one of the given keys. This is the opposite of `.all`, which requires that the target have all of the given keys.
    * @example
    *    cy.wrap({ a: 1, b: 2 }).should('not.have.any.keys', 'c')
    * @see http://chaijs.com/api/bdd/#method_any
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert if spy was always called with matching arguments (and possibly others).
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spyalwayscalledwithmatcharg1-arg2-
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert spy was called at least once with the provided arguments and no others.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledwithexactlyarg1-arg2-
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert spy was called with matching arguments (and possibly others).
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledwithmatcharg1-arg2-
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert spy was called at least once with the provided arguments.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledwitharg1-arg2-
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert spy was always called with the provided arguments (and possibly others).
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spyalwayscalledwitharg1-arg2-
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert spy was called at exactly once with the provided arguments.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledwitharg1-arg2-
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert spy was always called with the exact provided arguments.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spyalwayscalledwithexactlyarg1-arg2-
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert spy was called at exactly once with the provided arguments.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert if spy was not always called with matching arguments (and possibly others).
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spyalwayscalledwithmatcharg1-arg2-
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert spy was not called at least once with the provided arguments and no others.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledwithexactlyarg1-arg2-
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert spy was not called with matching arguments (and possibly others).
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledwithmatcharg1-arg2-
    * @see https://on.cypress.io/assertions
    */
  def and(
    chainer: alwaysDothaveDotbeenDotcalledWith | alwaysDothaveDotbeenDotcalledWithMatch | beDotalwaysDotcalledWith | beDotalwaysDotcalledWithExactly | beDotalwaysDotcalledWithMatch | beDotcalledOnceWith | beDotcalledOnceWithExactly | beDotcalledWith | beDotcalledWithExactly | beDotcalledWithMatch | haveDotallDotdeepDotkeys | haveDotallDotkeys | haveDotanyDotkeys | haveDotbeenDotcalledOnceWith | haveDotbeenDotcalledOnceWithExactly | haveDotbeenDotcalledWith | haveDotbeenDotcalledWithExactly | haveDotbeenDotcalledWithMatch | haveDotdeepDotkeys | haveDotkeys | includeDotanyDotkeys | notDotalwaysDothaveDotbeenDotcalledWith | notDotalwaysDothaveDotbeenDotcalledWithMatch | notDotbeDotalwaysDotcalledWith | notDotbeDotalwaysDotcalledWithExactly | notDotbeDotalwaysDotcalledWithMatch | notDotbeDotcalledOnceWith | notDotbeDotcalledOnceWithExactly | notDotbeDotcalledWith | notDotbeDotcalledWithExactly | notDotbeDotcalledWithMatch | notDothaveDotallDotdeepDotkeys | notDothaveDotallDotkeys | notDothaveDotanyDotkeys | notDothaveDotbeenDotcalledOnceWith | notDothaveDotbeenDotcalledOnceWithExactly | notDothaveDotbeenDotcalledWith | notDothaveDotbeenDotcalledWithExactly | notDothaveDotbeenDotcalledWithMatch | notDothaveDotdeepDotkeys | notDothaveDotkeys | notDotincludeDotanyDotkeys,
    value: (Any | String)*
  ): Chainable[Subject] = js.native
  /**
    * When the target is a string, `.include` asserts that the given string `val` is a substring of the target.
    * @example
    *    cy.wrap('foobar').should('include', 'foo')
    * @see http://chaijs.com/api/bdd/#method_include
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  /**
    * When the target is a string, `.include` asserts that the given string `val` is not a substring of the target.
    * @example
    *    cy.wrap('foobar').should('not.include', 'baz')
    * @see http://chaijs.com/api/bdd/#method_include
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert spy always returned the provided value.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spyalwaysreturnedobj
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert spy was called at least once with `obj` as `this`. `calledOn` also accepts a matcher (see [matchers](http://sinonjs.org/releases/v4.1.3/spies/#matchers)).
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledonobj
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert spy returned the provided value at least once. (see [matchers](http://sinonjs.org/releases/v4.1.3/spies/#matchers))
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spyreturnedobj
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert the spy was always called with obj as this
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spyalwayscalledonobj
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert spy not always returned the provided value.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spyalwaysreturnedobj
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert spy was not called at least once with `obj` as `this`. `calledOn` also accepts a matcher (see [matchers](http://sinonjs.org/releases/v4.1.3/spies/#matchers)).
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledonobj
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert spy did not return the provided value at least once. (see [matchers](http://sinonjs.org/releases/v4.1.3/spies/#matchers))
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spyreturnedobj
    * @see https://on.cypress.io/assertions
    */
  def and(
    chainer: alwaysDothaveDotbeenDotcalledOn | alwaysDotreturned | beDotalwaysDotcalledOn | beDotcalledOn | deepDotinclude | deepDotnestedDotinclude | deepDotownDotinclude | haveDotalwaysDotreturned | haveDotbeenDotcalledOn | haveDotreturned | include | nestedDotinclude | notDotalwaysDothaveDotbeenDotcalledOn | notDotalwaysDotreturned | notDotbeDotalwaysDotcalledOn | notDotbeDotcalledOn | notDotdeepDotinclude | notDotdeepDotnestedDotinclude | notDotdeepDotownDotinclude | notDothaveDotalwaysDotreturned | notDothaveDotbeenDotcalledOn | notDothaveDotreturned | notDotinclude | notDotnestedDotinclude | notDotownDotinclude | notDotreturned | ownDotinclude | returned,
    value: Any
  ): Chainable[Subject] = js.native
  /**
    * Asserts that the target's `length` property is equal to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('have.length', 3)
    *    cy.wrap('foo').should('have.length', 3)
    * @alias lengthOf
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  /**
    * Asserts that the target's `length` property is greater than to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('have.length.greaterThan', 2)
    *    cy.wrap('foo').should('have.length.greaterThan', 2)
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Asserts that the target's `length` property is greater than to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('have.length.gt', 2)
    *    cy.wrap('foo').should('have.length.gt', 2)
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Asserts that the target's `length` property is greater than or equal to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('have.length.gte', 2)
    *    cy.wrap('foo').should('have.length.gte', 2)
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Asserts that the target's `length` property is less than to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('have.length.lessThan', 4)
    *    cy.wrap('foo').should('have.length.lessThan', 4)
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Asserts that the target's `length` property is less than to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('have.length.lt', 4)
    *    cy.wrap('foo').should('have.length.lt', 4)
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Asserts that the target's `length` property is less than or equal to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('have.length.lte', 4)
    *    cy.wrap('foo').should('have.length.lte', 4)
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Asserts that the target's `length` property is not equal to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('not.have.length', 2)
    * cy.wrap('foo').should('not.have.length', 2)
    * @alias lengthOf
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Asserts that the target's `length` property is not greater than to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('not.have.length.greaterThan', 4)
    *    cy.wrap('foo').should('not.have.length.greaterThan', 4)
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Asserts that the target's `length` property is not greater than to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('not.have.length.gt', 4)
    *    cy.wrap('foo').should('not.have.length.gt', 4)
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Asserts that the target's `length` property is not greater than or equal to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('not.have.length.gte', 4)
    *    cy.wrap('foo').should('not.have.length.gte', 4)
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Asserts that the target's `length` property is less than to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('have.length.lessThan', 2)
    *    cy.wrap('foo').should('have.length.lessThan', 2)
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Asserts that the target's `length` property is not less than to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('not.have.length.lt', 2)
    *    cy.wrap('foo').should('not.have.length.lt', 2)
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Asserts that the target's `length` property is not less than or equal to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('not.have.length.lte', 2)
    *    cy.wrap('foo').should('not.have.length.lte', 2)
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  def and(
    chainer: haveDotlength | haveDotlengthDotabove | haveDotlengthDotatDotleast | haveDotlengthDotatDotmost | haveDotlengthDotbelow | haveDotlengthDotgreaterThan | haveDotlengthDotgt | haveDotlengthDotgte | haveDotlengthDotlessThan | haveDotlengthDotlt | haveDotlengthDotlte | haveDotlengthOf | haveDotlengthOfDotabove | haveDotlengthOfDotatDotleast | haveDotlengthOfDotatDotmost | haveDotlengthOfDotbelow | haveDotlengthOfDotgreaterThan | haveDotlengthOfDotgt | haveDotlengthOfDotgte | haveDotlengthOfDotlessThan | haveDotlengthOfDotlt | haveDotlengthOfDotlte | notDothaveDotlength | notDothaveDotlengthDotabove | notDothaveDotlengthDotatDotleast | notDothaveDotlengthDotatDotmost | notDothaveDotlengthDotbelow | notDothaveDotlengthDotgreaterThan | notDothaveDotlengthDotgt | notDothaveDotlengthDotgte | notDothaveDotlengthDotlessThan | notDothaveDotlengthDotlt | notDothaveDotlengthDotlte | notDothaveDotlengthOf | notDothaveDotlengthOfDotabove | notDothaveDotlengthOfDotatDotleast | notDothaveDotlengthOfDotatDotmost | notDothaveDotlengthOfDotbelow | notDothaveDotlengthOfDotgreaterThan | notDothaveDotlengthOfDotgt | notDothaveDotlengthOfDotgte | notDothaveDotlengthOfDotlessThan | notDothaveDotlengthOfDotlt | notDothaveDotlengthOfDotlte,
    value: Double
  ): Chainable[Subject] = js.native
  /**
    * Asserts that the target array has the same members as the given array `set`.
    * @example
    *    cy.wrap([1, 2, 3]).should('have.members', [2, 1, 3])
    * @see http://chaijs.com/api/bdd/#method_members
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  /**
    * When the target is a string, `.include` asserts that the given string `val` is a substring of the target.
    * @example
    *    cy.wrap([1, 2, 3]).should('include.members', [1, 2])
    * @see http://chaijs.com/api/bdd/#method_members
    * @see https://on.cypress.io/assertions
    */
  /**
    * Asserts that the target array does not have the same members as the given array `set`.
    * @example
    *    cy.wrap([1, 2, 3]).should('not.have.members', [4, 5, 6])
    * @see http://chaijs.com/api/bdd/#method_members
    * @see https://on.cypress.io/assertions
    */
  /**
    * When the target is a string, `.include` asserts that the given string `val` is not a substring of the target.
    * @example
    *    cy.wrap([1, 2, 3]).should('not.include.members', [4, 5])
    * @see http://chaijs.com/api/bdd/#method_members
    * @see https://on.cypress.io/assertions
    */
  def and(
    chainer: haveDotdeepDotmembers | haveDotmembers | includeDotdeepDotorderedDotmembers | includeDotmembers | includeDotorderedDotmembers | notDothaveDotdeepDotmembers | notDothaveDotmembers | notDotincludeDotdeepDotorderedDotmembers | notDotincludeDotmembers | notDotincludeDotorderedDotmembers,
    values: js.Array[Any]
  ): Chainable[Subject] = js.native
  // fallback
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    * Ctrl+Space will invoke auto-complete in most editors.
    * @see https://on.cypress.io/should
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  def and(chainers: String): Chainable[Subject] = js.native
  def and(chainers: String, value: Any): Chainable[Subject] = js.native
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  def and(chainers: String, value: Any, `match`: Any): Chainable[Subject] = js.native
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    * Passing a function to `.should()` enables you to make multiple assertions on the yielded subject. This also gives you the opportunity to massage what you'd like to assert on.
    * Just be sure _not_ to include any code that has side effects in your callback function. The callback function will be retried over and over again until no assertions within it throw.
    * @example
    *    cy
    *      .get('p')
    *      .should(($p) => {
    *        // should have found 3 elements
    *        expect($p).to.have.length(3)
    *
    *        // make sure the first contains some text content
    *        expect($p.first()).to.contain('Hello World')
    *
    *        // use jquery's map to grab all of their classes
    *        // jquery's map returns a new jquery object
    *        const classes = $p.map((i, el) => {
    *          return Cypress.$(el).attr('class')
    *        })
    *
    *        // call classes.get() to make this a plain array
    *        expect(classes.get()).to.deep.eq([
    *          'text-primary',
    *          'text-danger',
    *          'text-default'
    *        ])
    *      })
    * @see https://on.cypress.io/should
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  def and(fn: js.Function1[/* currentSubject */ Subject, Unit]): Chainable[Subject] = js.native
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  var and_Original: Chainer[Subject] = js.native
  /**
    * Asserts that the target is strictly (`===`) equal to NaN.
    * @example
    *    cy.wrap(NaN).should('be.NaN')
    * @see http://chaijs.com/api/bdd/#method_null
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_beNaN(chainer: beDotNaN): Chainable[Subject] = js.native
  // chai
  /**
    * Asserts that the target's `type` is equal to the given string type.
    * Types are case insensitive. See the `type-detect` project page for info on the type detection algorithm:
    * https://github.com/chaijs/type-detect.
    * @example
    *    cy.wrap('foo').should('be.a', 'string')
    * @see http://chaijs.com/api/bdd/#method_a
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_bea(chainer: beDota, `type`: String): Chainable[Subject] = js.native
  @JSName("and")
  def and_beabove(chainer: beDotabove, value: js.Date): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number or a date greater than the given number or date n respectively.
    * However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(6).should('be.above', 5)
    * @see http://chaijs.com/api/bdd/#method_above
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_beabove(chainer: beDotabove, value: Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target's `type` is equal to the given string type.
    * Types are case insensitive. See the `type-detect` project page for info on the type detection algorithm:
    * https://github.com/chaijs/type-detect.
    * @example
    *    cy.wrap({ foo: 'bar' }).should('be.an', 'object')
    * @alias a
    * @see http://chaijs.com/api/bdd/#method_a
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_bean(chainer: beDotan, value: String): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number that's within a given +/- `delta` range of the given number `expected`. However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(5.1).should('be.approximately', 5, 0.5)
    * @alias closeTo
    * @see http://chaijs.com/api/bdd/#method_closeto
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_beapproximately(chainer: beDotapproximately, value: Double, delta: Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target is an `arguments` object.
    * @example
    *    cy.wrap(arguments).should('be.arguments')
    * @see http://chaijs.com/api/bdd/#method_arguments
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_bearguments(chainer: beDotarguments): Chainable[Subject] = js.native
  @JSName("and")
  def and_beatleast(chainer: beDotatDotleast, value: js.Date): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number or a `n` date greater than or equal to the given number or date n respectively.
    * However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(6).should('be.at.least', 5)
    * @see http://chaijs.com/api/bdd/#method_least
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_beatleast(chainer: beDotatDotleast, value: Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number or a `n` date less than or equal to the given number or date n respectively.
    * However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(4).should('be.below', 5)
    * @see http://chaijs.com/api/bdd/#method_below
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_bebelow(chainer: beDotbelow, value: Double): Chainable[Subject] = js.native
  // jquery-chai
  /**
    * Assert that at least one element of the selection is checked, using `.is(':checked')`.
    * @example
    *    cy.get('#result').should('be.checked')
    * @see http://chaijs.com/plugins/chai-jquery/#checked
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_bechecked(chainer: beDotchecked): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number that's within a given +/- `delta` range of the given number `expected`. However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(5.1).should('be.closeTo', 5, 0.5)
    * @see http://chaijs.com/api/bdd/#method_closeto
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_becloseTo(chainer: beDotcloseTo, value: Double, delta: Double): Chainable[Subject] = js.native
  /**
    * Assert that at least one element of the selection is disabled, using `.is(':disabled')`.
    * @example
    *    cy.get('#result').should('be.disabled')
    * @see http://chaijs.com/plugins/chai-jquery/#disabled
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_bedisabled(chainer: beDotdisabled): Chainable[Subject] = js.native
  /**
    * When the target is a string or array, .empty asserts that the target's length property is strictly (===) equal to 0
    * @example
    *    cy.wrap([]).should('be.empty')
    *    cy.wrap('').should('be.empty')
    * @see http://chaijs.com/api/bdd/#method_empty
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_beempty(chainer: beDotempty): Chainable[Subject] = js.native
  /**
    * Assert that at least one element of the selection is enabled, using `.is(':enabled')`.
    * @example
    *    cy.get('#result').should('be.enabled')
    * @see http://chaijs.com/plugins/chai-jquery/#enabled
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_beenabled(chainer: beDotenabled): Chainable[Subject] = js.native
  /**
    * Asserts that the target is extensible, which means that new properties can be added to it.
    * @example
    *    cy.wrap({a: 1}).should('be.extensible')
    * @see http://chaijs.com/api/bdd/#method_extensible
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_beextensible(chainer: beDotextensible): Chainable[Subject] = js.native
  /**
    * Asserts that the target is strictly (`===`) equal to `false`.
    * @example
    *    cy.wrap(false).should('be.false')
    * @see http://chaijs.com/api/bdd/#method_false
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_befalse(chainer: beDotfalse): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number, and isn't `NaN` or positive/negative `Infinity`.
    * @example
    *    cy.wrap(1).should('be.finite')
    * @see http://chaijs.com/api/bdd/#method_finite
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_befinite(chainer: beDotfinite): Chainable[Subject] = js.native
  /**
    * Assert that at least one element of the selection is focused.
    * @example
    *    cy.get('#result').should('be.focused')
    *    cy.get('#result').should('have.focus')
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_befocused(chainer: beDotfocused): Chainable[Subject] = js.native
  /**
    * Asserts that the target is frozen, which means that new properties can't be added to it, and its existing properties can't be reassigned to different values, reconfigured, or deleted.
    * @example
    *    let frozenObject = Object.freeze({})
    *    cy.wrap(frozenObject).should('be.frozen')
    * @see http://chaijs.com/api/bdd/#method_frozen
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_befrozen(chainer: beDotfrozen): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number or a date greater than the given number or date n respectively.
    * However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(6).should('be.greaterThan', 5)
    * @alias above
    * @see http://chaijs.com/api/bdd/#method_above
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_begreaterThan(chainer: beDotgreaterThan, value: Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number or a date greater than the given number or date n respectively.
    * However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(6).should('be.gt', 5)
    * @alias above
    * @see http://chaijs.com/api/bdd/#method_above
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_begt(chainer: beDotgt, value: Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number or a `n` date greater than or equal to the given number or date n respectively.
    * However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(6).should('be.gte', 5)
    * @alias least
    * @see http://chaijs.com/api/bdd/#method_least
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_begte(chainer: beDotgte, value: Double): Chainable[Subject] = js.native
  /**
    * Assert that at least one element of the selection is hidden, using `.is(':hidden')`.
    * @example
    *    cy.get('#result').should('be.hidden')
    * @see http://chaijs.com/plugins/chai-jquery/#hidden
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_behidden(chainer: beDothidden): Chainable[Subject] = js.native
  /**
    * Asserts that the target is an instance of the given `constructor`.
    * @example
    *    cy.wrap([1, 2]).should('be.instanceOf', Array)
    * @see http://chaijs.com/api/bdd/#method_instanceof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_beinstanceOf(chainer: beDotinstanceOf, value: Any): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number or a `n` date less than or equal to the given number or date n respectively.
    * However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(4).should('be.lessThan', 5)
    * @alias below
    * @see http://chaijs.com/api/bdd/#method_below
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_belessThan(chainer: beDotlessThan, value: Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number or a `n` date less than or equal to the given number or date n respectively.
    * However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(4).should('be.lt', 5)
    * @alias below
    * @see http://chaijs.com/api/bdd/#method_below
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_belt(chainer: beDotlt, value: Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number or a date less than or equal to the given number or date n respectively.
    * However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(4).should('be.lte', 5)
    * @alias most
    * @see http://chaijs.com/api/bdd/#method_most
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_belte(chainer: beDotlte, value: Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target is strictly (`===`) equal to null.
    * @example
    *    cy.wrap(null).should('be.null')
    * @see http://chaijs.com/api/bdd/#method_null
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_benull(chainer: beDotnull): Chainable[Subject] = js.native
  /**
    * Asserts that the target is loosely (`==`) equal to `true`. However, it's often best to assert that the target is strictly (`===`) or deeply equal to its expected value.
    * @example
    *    cy.wrap(1).should('be.ok')
    * @see http://chaijs.com/api/bdd/#method_ok
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_beok(chainer: beDotok): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a member of the given array list.
    * @example
    *    cy.wrap(1).should('be.oneOf', [1, 2, 3])
    * @see http://chaijs.com/api/bdd/#method_oneof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_beoneOf(chainer: beDotoneOf, list: js.Array[Any]): Chainable[Subject] = js.native
  /**
    * Asserts that the target is sealed, which means that new properties can't be added to it, and its existing properties can't be reconfigured or deleted.
    * @example
    *    let sealedObject = Object.seal({})
    *    let frozenObject = Object.freeze({})
    *    cy.wrap(sealedObject).should('be.sealed')
    *    cy.wrap(frozenObject).should('be.sealed')
    * @see http://chaijs.com/api/bdd/#method_sealed
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_besealed(chainer: beDotsealed): Chainable[Subject] = js.native
  /**
    * Assert that at least one element of the selection is selected, using `.is(':selected')`.
    * @example
    *    cy.get('#result').should('be.selected')
    * @see http://chaijs.com/plugins/chai-jquery/#selected
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_beselected(chainer: beDotselected): Chainable[Subject] = js.native
  /**
    * Asserts that the target is strictly (`===`) equal to true.
    * @example
    *    cy.wrap(true).should('be.true')
    * @see http://chaijs.com/api/bdd/#method_true
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_betrue(chainer: beDottrue): Chainable[Subject] = js.native
  /**
    * Asserts that the target is strictly (`===`) equal to undefined.
    * @example
    *    cy.wrap(undefined).should('be.undefined')
    * @see http://chaijs.com/api/bdd/#method_undefined
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_beundefined(chainer: beDotundefined): Chainable[Subject] = js.native
  /**
    * Assert that at least one element of the selection is visible, using `.is(':visible')`.
    * @example
    *    cy.get('#result').should('be.visible')
    * @see http://chaijs.com/plugins/chai-jquery/#visible
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_bevisible(chainer: beDotvisible): Chainable[Subject] = js.native
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_bewithin(chainer: beDotwithin, start: js.Date, end: js.Date): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number or a date greater than or equal to the given number or date `start`, and less than or equal to the given number or date `finish` respectively.
    * However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(6).should('be.within', 5, 10)
    * @see http://chaijs.com/api/bdd/#method_within
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_bewithin(chainer: beDotwithin, start: Double, end: Double): Chainable[Subject] = js.native
  /**
    * When one argument is provided, `.change` asserts that the given function `subject` returns a different value when it's invoked before the target function compared to when it's invoked afterward.
    * However, it's often best to assert that `subject` is equal to its expected value.
    * @example
    *    let dots = ''
    *    function addDot() { dots += '.' }
    *    function getDots() { return dots }
    *    cy.wrap(addDot).should('change', getDots)
    * @see http://chaijs.com/api/bdd/#method_change
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_change(chainer: change, fn: js.Function1[/* repeated */ Any, Any]): Chainable[Subject] = js.native
  /**
    * When two arguments are provided, `.change` asserts that the value of the given object `subject`'s `prop` property is different before invoking the target function compared to afterward.
    * @example
    *    const myObj = { dots: '' }
    *    function addDot() { myObj.dots += '.' }
    *    cy.wrap(addDot).should('change', myObj, 'dots')
    * @see http://chaijs.com/api/bdd/#method_change
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_change(chainer: change, obj: js.Object, prop: String): Chainable[Subject] = js.native
  /**
    * Assert that the selection contains the given text, using `:contains()`. If the object asserted against is not a jQuery object, or if `contain` is not called as a function, the original implementation will be called.
    * @example
    *    cy.get('#result').should('contain', 'text')
    * @see http://chaijs.com/plugins/chai-jquery/#containtext
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_contain(chainer: contain, value: String): Chainable[Subject] = js.native
  /**
    * When the target is a string, `.include` asserts that the given string val is a substring of the target.
    * @example
    *    cy.wrap('tester').should('contain', 'test')
    * @alias include
    * @see http://chaijs.com/api/bdd/#method_include
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_contain(chainer: contain, value: Any): Chainable[Subject] = js.native
  /**
    * Assert that the html of the first element of the selection partially contains the given html, using `.html()`.
    * @example
    *    cy.get('#result').should('contain.html', '<em>John Doe</em>')
    * @see http://chaijs.com/plugins/chai-jquery/#htmlhtml
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_containhtml(chainer: containDothtml, value: String): Chainable[Subject] = js.native
  /**
    * Assert that the text of the first element of the selection partially contains the given text, using `.text()`.
    * @example
    *    cy.get('#result').should('contain.text', 'John Doe')
    * @see http://chaijs.com/plugins/chai-jquery/#texttext
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_containtext(chainer: containDottext, value: String): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection partially contains the given value, using `.val()`.
    * @example
    *    cy.get('textarea').should('contain.value', 'foo bar baz')
    * @see http://chaijs.com/plugins/chai-jquery/#valuevalue
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_containvalue(chainer: containDotvalue, value: String): Chainable[Subject] = js.native
  /**
    * When one argument is provided, `.decrease` asserts that the given function `subject` returns a lesser number when it's invoked after invoking the target function compared to when it's invoked beforehand.
    * `.decrease` also causes all `.by` assertions that follow in the chain to assert how much lesser of a number is returned. It's often best to assert that the return value decreased by the expected amount, rather than asserting it decreased by any amount.
    * @example
    *    let val = 1
    *    function subtractTwo() { val -= 2 }
    *    function getVal() { return val }
    *    cy.wrap(subtractTwo).should('decrease', getVal)
    * @see http://chaijs.com/api/bdd/#method_decrease
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_decrease(chainer: decrease, fn: js.Function1[/* repeated */ Any, Any]): Chainable[Subject] = js.native
  /**
    * When two arguments are provided, `.decrease` asserts that the value of the given object `subject`'s `prop` property is lesser after invoking the target function compared to beforehand.
    * @example
    *    let val = 1
    *    function subtractTwo() { val -= 2 }
    *    function getVal() { return val }
    *    cy.wrap(subtractTwo).should('decrease', getVal)
    * @see http://chaijs.com/api/bdd/#method_decrease
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_decrease(chainer: decrease, obj: js.Object, prop: String): Chainable[Subject] = js.native
  /**
    * Causes all `.equal`, `.include`, `.members`, `.keys`, and `.property` assertions that follow in the chain to use deep equality instead of strict (`===`) equality. See the `deep-eql` project page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.
    * @example
    *    cy.wrap({ a: 1 }).should('deep.equal', { a: 1 })
    * @see http://chaijs.com/api/bdd/#method_deep
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_deepequal(chainer: deepDotequal, value: Subject): Chainable[Subject] = js.native
  /**
    * Asserts that the target is strictly (`===`) equal to the given `val`.
    * @example
    *    cy.wrap(1).should('eq', 1)
    * @alias equal
    * @see http://chaijs.com/api/bdd/#method_equal
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_eq(chainer: eq, value: Any): Chainable[Subject] = js.native
  /**
    * Asserts that the target is deeply equal to the given `obj`. See the `deep-eql` project page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.
    * @example
    *    cy.wrap({a: 1}).should('eql', {a: 1}).and('not.equal', {a: 1})
    * @see http://chaijs.com/api/bdd/#method_eql
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_eql(chainer: eql, value: Any): Chainable[Subject] = js.native
  /**
    * Asserts that the target is strictly (`===`) equal to the given `val`.
    * @example
    *    cy.wrap(1).should('equal', 1)
    * @see http://chaijs.com/api/bdd/#method_equal
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_equal(chainer: equal, value: Any): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not strictly (`===`) equal to either `null` or `undefined`. However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(1).should('exist')
    * @see http://chaijs.com/api/bdd/#method_exist
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_exist(chainer: exist): Chainable[Subject] = js.native
  /**
    * Causes all `.key` assertions that follow in the chain to require that the target have all of the given keys. This is the opposite of `.any`, which only requires that the target have at least one of the given keys.
    * @example
    *    cy.wrap({ a: 1, b: 2 }).should('have.all.key', 'a', 'b')
    * @see http://chaijs.com/api/bdd/#method_all
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_haveallkey(chainer: haveDotallDotkey, value: String*): Chainable[Subject] = js.native
  /**
    * Assert spy always returned the provided value.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_havealwaysreturned(chainer: haveDotalwaysDotreturned, obj: Any): Chainable[Subject] = js.native
  /**
    * Assert spy always threw an exception.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spyalwaysthrew
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_havealwaysthrown(chainer: haveDotalwaysDotthrown): Chainable[Subject] = js.native
  @JSName("and")
  def and_havealwaysthrown(chainer: haveDotalwaysDotthrown, value: String): Chainable[Subject] = js.native
  @JSName("and")
  def and_havealwaysthrown(chainer: haveDotalwaysDotthrown, value: js.Error): Chainable[Subject] = js.native
  @JSName("and")
  def and_havealwaysthrown(chainer: haveDotalwaysDotthrown, value: ErrorConstructor): Chainable[Subject] = js.native
  /**
    * Causes all `.key` assertions that follow in the chain to only require that the target have at least one of the given keys. This is the opposite of `.all`, which requires that the target have all of the given keys.
    * @example
    *    cy.wrap({ a: 1, b: 2 }).should('have.any.key', 'a')
    * @see http://chaijs.com/api/bdd/#method_any
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_haveanykey(chainer: haveDotanyDotkey, value: String*): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection has the given attribute, using `.attr()`. Optionally, assert a particular value as well. The return value is available for chaining.
    * @example
    *    cy.get('#result').should('have.attr', 'role')
    *    cy.get('#result').should('have.attr', 'role', 'menu')
    * @see http://chaijs.com/plugins/chai-jquery/#attrname-value
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_haveattr(chainer: haveDotattr, value: String): Chainable[Subject] = js.native
  @JSName("and")
  def and_haveattr(chainer: haveDotattr, value: String, `match`: String): Chainable[Subject] = js.native
  /**
    * Assert the number of calls.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycallcount
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_havecallCount(chainer: haveDotcallCount, value: Double): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection has the given attribute, using `.attr()`. Optionally, assert a particular value as well. The return value is available for chaining.
    * @example
    *    cy.get('#result').should('have.class', 'success')
    * @see http://chaijs.com/plugins/chai-jquery/#classclassname
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_haveclass(chainer: haveDotclass, value: String): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection has the given CSS property, using `.css()`. Optionally, assert a particular value as well. The return value is available for chaining.
    * @example
    *    cy.get('#result').should('have.css', 'display', 'none')
    * @see http://chaijs.com/plugins/chai-jquery/#cssname-value
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_havecss(chainer: haveDotcss, value: String): Chainable[Subject] = js.native
  @JSName("and")
  def and_havecss(chainer: haveDotcss, value: String, `match`: String): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection has the given data value, using `.data()`. Optionally, assert a particular value as well. The return value is available for chaining.
    * @example
    *    cy.get('#result').should('have.data', 'foo', 'bar')
    * @see http://chaijs.com/plugins/chai-jquery/#dataname-value
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_havedata(chainer: haveDotdata, value: String): Chainable[Subject] = js.native
  @JSName("and")
  def and_havedata(chainer: haveDotdata, value: String, `match`: String): Chainable[Subject] = js.native
  /**
    * Asserts that the target has a property with the given key `name`. See the `deep-eql` project page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.
    * @example
    *    cy.wrap({ x: {a: 1 }}).should('have.deep.property', 'x', { a: 1 })
    * @see http://chaijs.com/api/bdd/#method_property
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_havedeepproperty(chainer: haveDotdeepDotproperty, value: String, obj: js.Object): Chainable[Subject] = js.native
  /**
    * Assert that the selection contains at least one element which has a descendant matching the given selector, using `.has()`.
    * @example
    *    cy.get('#result').should('have.descendants', 'h1')
    * @see http://chaijs.com/plugins/chai-jquery/#descendantsselector
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_havedescendants(chainer: haveDotdescendants, selector: String): Chainable[Subject] = js.native
  /**
    * Assert that at least one element of the selection is focused.
    * @example
    *    cy.get('#result').should('have.focus')
    *    cy.get('#result').should('be.focused')
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_havefocus(chainer: haveDotfocus): Chainable[Subject] = js.native
  /**
    * Assert that the html of the first element of the selection is equal to the given html, using `.html()`.
    * @example
    *    cy.get('#result').should('have.html', '<em>John Doe</em>')
    * @see http://chaijs.com/plugins/chai-jquery/#htmlhtml
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_havehtml(chainer: haveDothtml, value: String): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection has the given id, using `.attr('id')`.
    * @example
    *    cy.get('#result').should('have.id', 'result')
    * @see http://chaijs.com/plugins/chai-jquery/#idid
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_haveid(chainer: haveDotid, value: String): Chainable[Subject] = js.native
  @JSName("and")
  def and_haveid(chainer: haveDotid, value: String, `match`: String): Chainable[Subject] = js.native
  /**
    * Asserts that the target array has the same members as the given array where order matters.
    * @example
    *    cy.wrap([1, 2, 3]).should('have.ordered.members', [1, 2, 3])
    * @see http://chaijs.com/api/bdd/#method_members
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_haveorderedmembers(chainer: haveDotorderedDotmembers, values: js.Array[Any]): Chainable[Subject] = js.native
  /**
    * Causes all `.property` and `.include` assertions that follow in the chain to ignore inherited properties.
    * @example
    *    Object.prototype.b = 2
    *    cy.wrap({ a: 1 }).should('have.property', 'a').and('not.have.ownProperty', 'b')
    * @see http://chaijs.com/api/bdd/#method_ownproperty
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_haveownProperty(chainer: haveDotownProperty, property: String): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection has the given property, using `.prop()`. Optionally, assert a particular value as well. The return value is available for chaining.
    * @example
    *    cy.get('#result').should('have.prop', 'disabled')
    *    cy.get('#result').should('have.prop', 'disabled', false)
    * @see http://chaijs.com/plugins/chai-jquery/#propname-value
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_haveprop(chainer: haveDotprop, value: String): Chainable[Subject] = js.native
  @JSName("and")
  def and_haveprop(chainer: haveDotprop, value: String, `match`: Any): Chainable[Subject] = js.native
  /**
    * Asserts that the target string contains the given substring `str`.
    * @example
    *    cy.wrap('foobar').should('have.string', 'bar')
    * @see http://chaijs.com/api/bdd/#method_string
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_havestring(chainer: haveDotstring, `match`: String): Chainable[Subject] = js.native
  @JSName("and")
  def and_havestring(chainer: haveDotstring, `match`: js.RegExp): Chainable[Subject] = js.native
  /**
    * Assert that the text of the first element of the selection is equal to the given text, using `.text()`.
    * @example
    *    cy.get('#result').should('have.text', 'John Doe')
    * @see http://chaijs.com/plugins/chai-jquery/#texttext
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_havetext(chainer: haveDottext, value: String): Chainable[Subject] = js.native
  /**
    * Assert spy threw an exception at least once.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spythrew
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_havethrown(chainer: haveDotthrown): Chainable[Subject] = js.native
  @JSName("and")
  def and_havethrown(chainer: haveDotthrown, value: String): Chainable[Subject] = js.native
  @JSName("and")
  def and_havethrown(chainer: haveDotthrown, value: js.Error): Chainable[Subject] = js.native
  @JSName("and")
  def and_havethrown(chainer: haveDotthrown, value: ErrorConstructor): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection has the given value, using `.val()`.
    * @example
    *    cy.get('textarea').should('have.value', 'foo bar baz')
    * @see http://chaijs.com/plugins/chai-jquery/#valuevalue
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_havevalue(chainer: haveDotvalue, value: String): Chainable[Subject] = js.native
  /**
    * Causes all `.keys` assertions that follow in the chain to require the target to be a superset of the expected set, rather than an identical set.
    * @example
    *    cy.wrap({ a: 1, b: 2 }).should('include.all.keys', 'a', 'b')
    * @see http://chaijs.com/api/bdd/#method_keys
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_includeallkeys(chainer: includeDotallDotkeys, value: String*): Chainable[Subject] = js.native
  /**
    * Assert that the html of the first element of the selection partially contains the given html, using `.html()`.
    * @example
    *    cy.get('#result').should('include.html', '<em>John Doe</em>')
    * @see http://chaijs.com/plugins/chai-jquery/#htmlhtml
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_includehtml(chainer: includeDothtml, value: String): Chainable[Subject] = js.native
  /**
    * Assert that the text of the first element of the selection partially contains the given text, using `.text()`.
    * @example
    *    cy.get('#result').should('include.text', 'John Doe')
    * @see http://chaijs.com/plugins/chai-jquery/#texttext
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_includetext(chainer: includeDottext, value: String): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection partially contains the given value, using `.val()`.
    * @example
    *    cy.get('textarea').should('include.value', 'foo bar baz')
    * @see http://chaijs.com/plugins/chai-jquery/#valuevalue
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_includevalue(chainer: includeDotvalue, value: String): Chainable[Subject] = js.native
  /**
    * When one argument is provided, `.increase` asserts that the given function `subject` returns a greater number when it's
    * invoked after invoking the target function compared to when it's invoked beforehand.
    * `.increase` also causes all `.by` assertions that follow in the chain to assert how much greater of a number is returned.
    * It's often best to assert that the return value increased by the expected amount, rather than asserting it increased by any amount.
    *
    * When two arguments are provided, `.increase` asserts that the value of the given object `subject`'s `prop` property is greater after
    * invoking the target function compared to beforehand.
    *
    * @example
    *    let val = 1
    *    function addTwo() { val += 2 }
    *    function getVal() { return val }
    *    cy.wrap(addTwo).should('increase', getVal)
    *
    *    const myObj = { val: 1 }
    *    function addTwo() { myObj.val += 2 }
    *    cy.wrap(addTwo).should('increase', myObj, 'val')
    * @see http://chaijs.com/api/bdd/#method_increase
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_increase(chainer: increase, value: js.Object): Chainable[Subject] = js.native
  @JSName("and")
  def and_increase(chainer: increase, value: js.Object, property: String): Chainable[Subject] = js.native
  /**
    * Assert that the selection matches a given selector, using `.is()`. Note that this overrides the built-in chai assertion. If the object asserted against is not a jQuery object, the original implementation will be called.
    * @example
    *    cy.get('#result').should('match', ':empty')
    * @see http://chaijs.com/plugins/chai-jquery/#matchselector
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_match(chainer: `match`, value: String): Chainable[Subject] = js.native
  /**
    * Asserts that the target matches the given regular expression `re`.
    * @example
    *    cy.wrap('foobar').should('match', /^foo/)
    * @see http://chaijs.com/api/bdd/#method_match
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_match(chainer: `match`, value: js.RegExp): Chainable[Subject] = js.native
  /**
    * Asserts that the target is strictly (`===`) equal to NaN.
    * @example
    *    cy.wrap(NaN).should('not.be.NaN')
    * @see http://chaijs.com/api/bdd/#method_nan
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbeNaN(chainer: notDotbeDotNaN): Chainable[Subject] = js.native
  // chai.not
  /**
    * Asserts that the target's `type` is not equal to the given string type.
    * Types are case insensitive. See the `type-detect` project page for info on the type detection algorithm:
    * https://github.com/chaijs/type-detect.
    * @example
    *    cy.wrap('foo').should('not.be.a', 'number')
    * @see http://chaijs.com/api/bdd/#method_a
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbea(chainer: notDotbeDota, `type`: String): Chainable[Subject] = js.native
  @JSName("and")
  def and_notbeabove(chainer: notDotbeDotabove, value: js.Date): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a not number or not a date greater than the given number or date n respectively.
    * However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(6).should('not.be.above', 10)
    * @see http://chaijs.com/api/bdd/#method_above
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbeabove(chainer: notDotbeDotabove, value: Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target's `type` is not equal to the given string type.
    * Types are case insensitive. See the `type-detect` project page for info on the type detection algorithm:
    * https://github.com/chaijs/type-detect.
    * @example
    *    cy.wrap('foo').should('not.be.an', 'object')
    * @alias a
    * @see http://chaijs.com/api/bdd/#method_a
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbean(chainer: notDotbeDotan, value: String): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a not number that's within a given +/- `delta` range of the given number `expected`. However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(5.1).should('not.be.approximately', 6, 0.5)
    * @alias closeTo
    * @see http://chaijs.com/api/bdd/#method_closeto
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbeapproximately(chainer: notDotbeDotapproximately, value: Double, delta: Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not an `arguments` object.
    * @example
    *    cy.wrap(1).should('not.be.arguments')
    * @see http://chaijs.com/api/bdd/#method_arguments
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbearguments(chainer: notDotbeDotarguments): Chainable[Subject] = js.native
  @JSName("and")
  def and_notbeatleast(chainer: notDotbeDotatDotleast, value: js.Date): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not a number or not a `n` date greater than or equal to the given number or date n respectively.
    * However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(6).should('not.be.at.least', 10)
    * @see http://chaijs.com/api/bdd/#method_least
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbeatleast(chainer: notDotbeDotatDotleast, value: Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not a number or not a `n` date less than or equal to the given number or date n respectively.
    * However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(4).should('not.be.below', 1)
    * @see http://chaijs.com/api/bdd/#method_below
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbebelow(chainer: notDotbeDotbelow, value: Double): Chainable[Subject] = js.native
  // jquery-chai.not
  /**
    * Assert that at least one element of the selection is not checked, using `.is(':checked')`.
    * @example
    *    cy.get('#result').should('not.be.checked')
    * @see http://chaijs.com/plugins/chai-jquery/#checked
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbechecked(chainer: notDotbeDotchecked): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not a number that's within a given +/- `delta` range of the given number `expected`. However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(5.1).should('not.be.closeTo', 6, 0.5)
    * @see http://chaijs.com/api/bdd/#method_closeto
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbecloseTo(chainer: notDotbeDotcloseTo, value: Double, delta: Double): Chainable[Subject] = js.native
  /**
    * Assert that at least one element of the selection is not disabled, using `.is(':disabled')`.
    * @example
    *    cy.get('#result').should('not.be.disabled')
    * @see http://chaijs.com/plugins/chai-jquery/#disabled
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbedisabled(chainer: notDotbeDotdisabled): Chainable[Subject] = js.native
  /**
    * When the target is a not string or array, .empty asserts that the target's length property is strictly (===) equal to 0
    * @example
    *    cy.wrap([1]).should('not.be.empty')
    *    cy.wrap('foo').should('not.be.empty')
    * @see http://chaijs.com/api/bdd/#method_empty
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbeempty(chainer: notDotbeDotempty): Chainable[Subject] = js.native
  /**
    * Assert that at least one element of the selection is not enabled, using `.is(':enabled')`.
    * @example
    *    cy.get('#result').should('not.be.enabled')
    * @see http://chaijs.com/plugins/chai-jquery/#enabled
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbeenabled(chainer: notDotbeDotenabled): Chainable[Subject] = js.native
  /**
    * Asserts that the target is extensible, which means that new properties can be added to it.
    * @example
    *    let o = Object.seal({})
    *    cy.wrap(o).should('not.be.extensible')
    * @see http://chaijs.com/api/bdd/#method_extensible
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbeextensible(chainer: notDotbeDotextensible): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not strictly (`===`) equal to `false`.
    * @example
    *    cy.wrap(true).should('not.be.false')
    * @see http://chaijs.com/api/bdd/#method_false
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbefalse(chainer: notDotbeDotfalse): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number, and isn't `NaN` or positive/negative `Infinity`.
    * @example
    *    cy.wrap(NaN).should('not.be.finite')
    *    cy.wrap(Infinity).should('not.be.finite')
    * @see http://chaijs.com/api/bdd/#method_finite
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbefinite(chainer: notDotbeDotfinite): Chainable[Subject] = js.native
  /**
    * Assert that no element of the selection is focused.
    * @example
    *    cy.get('#result').should('not.be.focused')
    *    cy.get('#result').should('not.have.focus')
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbefocused(chainer: notDotbeDotfocused): Chainable[Subject] = js.native
  /**
    * Asserts that the target is frozen, which means that new properties can't be added to it, and its existing properties can't be reassigned to different values, reconfigured, or deleted.
    * @example
    *    cy.wrap({a: 1}).should('not.be.frozen')
    * @see http://chaijs.com/api/bdd/#method_frozen
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbefrozen(chainer: notDotbeDotfrozen): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a not number or a date greater than the given number or date n respectively.
    * However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(6).should('be.greaterThan', 7)
    * @alias above
    * @see http://chaijs.com/api/bdd/#method_above
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbegreaterThan(chainer: notDotbeDotgreaterThan, value: Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a not number or a date greater than the given number or date n respectively.
    * However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(6).should('not.be.gt', 7)
    * @alias above
    * @see http://chaijs.com/api/bdd/#method_above
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbegt(chainer: notDotbeDotgt, value: Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a not number or a `n` date greater than or equal to the given number or date n respectively.
    * However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(6).should('not.be.gte', 7)
    * @alias least
    * @see http://chaijs.com/api/bdd/#method_least
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbegte(chainer: notDotbeDotgte, value: Double): Chainable[Subject] = js.native
  /**
    * Assert that at least one element of the selection is not hidden, using `.is(':hidden')`.
    * @example
    *    cy.get('#result').should('not.be.hidden')
    * @see http://chaijs.com/plugins/chai-jquery/#hidden
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbehidden(chainer: notDotbeDothidden): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not an instance of the given `constructor`.
    * @example
    *    cy.wrap([1, 2]).should('not.be.instanceOf', String)
    * @see http://chaijs.com/api/bdd/#method_instanceof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbeinstanceOf(chainer: notDotbeDotinstanceOf, value: Any): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not a number or a `n` date less than or equal to the given number or date n respectively.
    * However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(4).should('not.be.lessThan', 3)
    * @alias below
    * @see http://chaijs.com/api/bdd/#method_below
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbelessThan(chainer: notDotbeDotlessThan, value: Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not a number or a `n` date less than or equal to the given number or date n respectively.
    * However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(4).should('not.be.lt', 3)
    * @alias below
    * @see http://chaijs.com/api/bdd/#method_below
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbelt(chainer: notDotbeDotlt, value: Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not a number or a date less than or equal to the given number or date n respectively.
    * However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(4).should('not.be.lte', 3)
    * @alias most
    * @see http://chaijs.com/api/bdd/#method_most
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbelte(chainer: notDotbeDotlte, value: Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target is strictly (`===`) equal to null.
    * @example
    *    cy.wrap(null).should('not.be.null')
    * @see http://chaijs.com/api/bdd/#method_null
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbenull(chainer: notDotbeDotnull): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not loosely (`==`) equal to `true`. However, it's often best to assert that the target is strictly (`===`) or deeply equal to its expected value.
    * @example
    *    cy.wrap(0).should('not.be.ok')
    * @see http://chaijs.com/api/bdd/#method_ok
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbeok(chainer: notDotbeDotok): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a member of the given array list.
    * @example
    *    cy.wrap(42).should('not.be.oneOf', [1, 2, 3])
    * @see http://chaijs.com/api/bdd/#method_oneof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbeoneOf(chainer: notDotbeDotoneOf, list: js.Array[Any]): Chainable[Subject] = js.native
  /**
    * Asserts that the target is sealed, which means that new properties can't be added to it, and its existing properties can't be reconfigured or deleted.
    * @example
    *    cy.wrap({a: 1}).should('be.sealed')
    *    cy.wrap({a: 1}).should('be.sealed')
    * @see http://chaijs.com/api/bdd/#method_sealed
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbesealed(chainer: notDotbeDotsealed): Chainable[Subject] = js.native
  /**
    * Assert that at least one element of the selection is not selected, using `.is(':selected')`.
    * @example
    *    cy.get('#result').should('not.be.selected')
    * @see http://chaijs.com/plugins/chai-jquery/#selected
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbeselected(chainer: notDotbeDotselected): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not strictly (`===`) equal to true.
    * @example
    *    cy.wrap(false).should('not.be.true')
    * @see http://chaijs.com/api/bdd/#method_true
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbetrue(chainer: notDotbeDottrue): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not strictly (`===`) equal to undefined.
    * @example
    *    cy.wrap(true).should('not.be.undefined')
    * @see http://chaijs.com/api/bdd/#method_undefined
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbeundefined(chainer: notDotbeDotundefined): Chainable[Subject] = js.native
  /**
    * Assert that at least one element of the selection is not visible, using `.is(':visible')`.
    * @example
    *    cy.get('#result').should('not.be.visible')
    * @see http://chaijs.com/plugins/chai-jquery/#visible
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbevisible(chainer: notDotbeDotvisible): Chainable[Subject] = js.native
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbewithin(chainer: notDotbeDotwithin, start: js.Date, end: js.Date): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not a number or a date greater than or equal to the given number or date `start`, and less than or equal to the given number or date `finish` respectively.
    * However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(3).should('not.be.within', 5, 10)
    * @see http://chaijs.com/api/bdd/#method_within
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbewithin(chainer: notDotbeDotwithin, start: Double, end: Double): Chainable[Subject] = js.native
  /**
    * When one argument is provided, `.change` asserts that the given function `subject` returns a different value when it's invoked before the target function compared to when it's invoked afterward.
    * However, it's often best to assert that `subject` is equal to its expected value.
    * @example
    *    let dots = ''
    *    function addDot() { dots += '.' }
    *    function getDots() { return dots }
    *    cy.wrap(() => {}).should('not.change', getDots)
    * @see http://chaijs.com/api/bdd/#method_change
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notchange(chainer: notDotchange, fn: js.Function1[/* repeated */ Any, Any]): Chainable[Subject] = js.native
  /**
    * When two arguments are provided, `.change` asserts that the value of the given object `subject`'s `prop` property is different before invoking the target function compared to afterward.
    * @example
    *    const myObj = { dots: '' }
    *    function addDot() { myObj.dots += '.' }
    *    cy.wrap(() => {}).should('not.change', myObj, 'dots')
    * @see http://chaijs.com/api/bdd/#method_change
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notchange(chainer: notDotchange, obj: js.Object, prop: String): Chainable[Subject] = js.native
  /**
    * Assert that the selection does not contain the given text, using `:contains()`. If the object asserted against is not a jQuery object, or if `contain` is not called as a function, the original implementation will be called.
    * @example
    *    cy.get('#result').should('not.contain', 'text')
    * @see http://chaijs.com/plugins/chai-jquery/#containtext
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notcontain(chainer: notDotcontain, value: String): Chainable[Subject] = js.native
  /**
    * When the target is a string, `.include` asserts that the given string val is a substring of the target.
    * @example
    *    cy.wrap('tester').should('not.contain', 'foo')
    * @alias include
    * @see http://chaijs.com/api/bdd/#method_include
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notcontain(chainer: notDotcontain, value: Any): Chainable[Subject] = js.native
  /**
    * Assert that the html of the first element of the selection does not contain the given html, using `.html()`.
    * @example
    *    cy.get('#result').should('not.contain.html', '<em>John Doe</em>')
    * @see http://chaijs.com/plugins/chai-jquery/#htmlhtml
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notcontainhtml(chainer: notDotcontainDothtml, value: String): Chainable[Subject] = js.native
  /**
    * Assert that the text of the first element of the selection does not contain the given text, using `.text()`.
    * @example
    *    cy.get('#result').should('not.contain.text', 'John Doe')
    * @see http://chaijs.com/plugins/chai-jquery/#texttext
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notcontaintext(chainer: notDotcontainDottext, value: String): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection does not contain the given value, using `.val()`.
    * @example
    *    cy.get('textarea').should('not.contain.value', 'foo bar baz')
    * @see http://chaijs.com/plugins/chai-jquery/#valuevalue
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notcontainvalue(chainer: notDotcontainDotvalue, value: String): Chainable[Subject] = js.native
  /**
    * When one argument is provided, `.decrease` asserts that the given function `subject` does not returns a lesser number when it's invoked after invoking the target function compared to when it's invoked beforehand.
    * `.decrease` also causes all `.by` assertions that follow in the chain to assert how much lesser of a number is returned. It's often best to assert that the return value decreased by the expected amount, rather than asserting it decreased by any amount.
    * @example
    *    let val = 1
    *    function subtractTwo() { val -= 2 }
    *    function getVal() { return val }
    *    cy.wrap(() => {}).should('not.decrease', getVal)
    * @see http://chaijs.com/api/bdd/#method_decrease
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notdecrease(chainer: notDotdecrease, fn: js.Function1[/* repeated */ Any, Any]): Chainable[Subject] = js.native
  /**
    * When two arguments are provided, `.decrease` asserts that the value of the given object `subject`'s `prop` property is not lesser after invoking the target function compared to beforehand.
    * @example
    *    const myObj = { val: 1 }
    *    function subtractTwo() { myObj.val -= 2 }
    *    cy.wrap(() => {}).should('not.decrease', myObj, 'val')
    * @see http://chaijs.com/api/bdd/#method_decrease
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notdecrease(chainer: notDotdecrease, obj: js.Object, prop: String): Chainable[Subject] = js.native
  /**
    * Causes all `.equal`, `.include`, `.members`, `.keys`, and `.property` assertions that follow in the chain to not use deep equality instead of strict (`===`) equality. See the `deep-eql` project page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.
    * @example
    *    cy.wrap({ a: 1 }).should('not.deep.equal', { b: 1 })
    * @see http://chaijs.com/api/bdd/#method_deep
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notdeepequal(chainer: notDotdeepDotequal, value: Subject): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not strictly (`===`) equal to the given `val`.
    * @example
    *    cy.wrap(1).should('not.eq', 2)
    * @alias equal
    * @see http://chaijs.com/api/bdd/#method_equal
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_noteq(chainer: notDoteq, value: Any): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not deeply equal to the given `obj`. See the `deep-eql` project page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.
    * @example
    *    cy.wrap({a: 1}).should('not.eql', {c: 1}).and('not.equal', {a: 1})
    * @see http://chaijs.com/api/bdd/#method_eql
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_noteql(chainer: notDoteql, value: Any): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not strictly (`===`) equal to the given `val`.
    * @example
    *    cy.wrap(1).should('not.equal', 2)
    * @see http://chaijs.com/api/bdd/#method_equal
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notequal(chainer: notDotequal, value: Any): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not strictly (`===`) equal to either `null` or `undefined`. However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(null).should('not.exist')
    * @see http://chaijs.com/api/bdd/#method_exist
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notexist(chainer: notDotexist): Chainable[Subject] = js.native
  /**
    * Assert spy always returned the provided value.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_nothavealwaysreturned(chainer: notDothaveDotalwaysDotreturned, obj: Any): Chainable[Subject] = js.native
  /**
    * Assert spy did not always throw an exception.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spyalwaysthrew
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_nothavealwaysthrown(chainer: notDothaveDotalwaysDotthrown): Chainable[Subject] = js.native
  @JSName("and")
  def and_nothavealwaysthrown(chainer: notDothaveDotalwaysDotthrown, value: String): Chainable[Subject] = js.native
  @JSName("and")
  def and_nothavealwaysthrown(chainer: notDothaveDotalwaysDotthrown, value: js.Error): Chainable[Subject] = js.native
  @JSName("and")
  def and_nothavealwaysthrown(chainer: notDothaveDotalwaysDotthrown, value: ErrorConstructor): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection does not have the given attribute, using `.attr()`. Optionally, assert a particular value as well. The return value is available for chaining.
    * @example
    *    cy.get('#result').should('not.have.attr', 'role')
    *    cy.get('#result').should('not.have.attr', 'role', 'menu')
    * @see http://chaijs.com/plugins/chai-jquery/#attrname-value
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_nothaveattr(chainer: notDothaveDotattr, value: String): Chainable[Subject] = js.native
  @JSName("and")
  def and_nothaveattr(chainer: notDothaveDotattr, value: String, `match`: String): Chainable[Subject] = js.native
  /**
    * Assert not the number of calls.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycallcount
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_nothavecallCount(chainer: notDothaveDotcallCount, value: Double): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection does not have the given attribute, using `.attr()`. Optionally, assert a particular value as well. The return value is available for chaining.
    * @example
    *    cy.get('#result').should('not.have.class', 'success')
    * @see http://chaijs.com/plugins/chai-jquery/#classclassname
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_nothaveclass(chainer: notDothaveDotclass, value: String): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection does not have the given CSS property, using `.css()`. Optionally, assert a particular value as well. The return value is available for chaining.
    * @example
    *    cy.get('#result').should('not.have.css', 'display', 'none')
    * @see http://chaijs.com/plugins/chai-jquery/#cssname-value
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_nothavecss(chainer: notDothaveDotcss, value: String): Chainable[Subject] = js.native
  @JSName("and")
  def and_nothavecss(chainer: notDothaveDotcss, value: String, `match`: String): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection does not have the given data value, using `.data()`. Optionally, assert a particular value as well. The return value is available for chaining.
    * @example
    *    cy.get('#result').should('not.have.data', 'foo', 'bar')
    * @see http://chaijs.com/plugins/chai-jquery/#dataname-value
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_nothavedata(chainer: notDothaveDotdata, value: String): Chainable[Subject] = js.native
  @JSName("and")
  def and_nothavedata(chainer: notDothaveDotdata, value: String, `match`: String): Chainable[Subject] = js.native
  /**
    * Asserts that the target does not have a property with the given key `name`. See the `deep-eql` project page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.
    * @example
    *    cy.wrap({ x: {a: 1 }}).should('not.have.deep.property', 'y', { a: 1 })
    * @see http://chaijs.com/api/bdd/#method_property
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_nothavedeepproperty(chainer: notDothaveDotdeepDotproperty, value: String, obj: js.Object): Chainable[Subject] = js.native
  /**
    * Assert that the selection does not contain at least one element which has a descendant matching the given selector, using `.has()`.
    * @example
    *    cy.get('#result').should('not.have.descendants', 'h1')
    * @see http://chaijs.com/plugins/chai-jquery/#descendantsselector
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_nothavedescendants(chainer: notDothaveDotdescendants, selector: String): Chainable[Subject] = js.native
  /**
    * Assert that no element of the selection is focused.
    * @example
    *    cy.get('#result').should('not.have.focus')
    *    cy.get('#result').should('not.be.focused')
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_nothavefocus(chainer: notDothaveDotfocus): Chainable[Subject] = js.native
  /**
    * Assert that the html of the first element of the selection is not equal to the given html, using `.html()`.
    * @example
    *    cy.get('#result').should('not.have.html', '<em>John Doe</em>')
    * @see http://chaijs.com/plugins/chai-jquery/#htmlhtml
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_nothavehtml(chainer: notDothaveDothtml, value: String): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection does not have the given id, using `.attr('id')`.
    * @example
    *    cy.get('#result').should('not.have.id', 'result')
    * @see http://chaijs.com/plugins/chai-jquery/#idid
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_nothaveid(chainer: notDothaveDotid, value: String): Chainable[Subject] = js.native
  @JSName("and")
  def and_nothaveid(chainer: notDothaveDotid, value: String, `match`: String): Chainable[Subject] = js.native
  /**
    * Asserts that the target array does not have the same members as the given array where order matters.
    * @example
    *    cy.wrap([1, 2, 3]).should('not. have.ordered.members', [4, 5, 6])
    * @see http://chaijs.com/api/bdd/#method_members
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_nothaveorderedmembers(chainer: notDothaveDotorderedDotmembers, values: js.Array[Any]): Chainable[Subject] = js.native
  /**
    * Causes all `.property` and `.include` assertions that follow in the chain to ignore inherited properties.
    * @example
    *    Object.prototype.b = 2
    *    cy.wrap({ a: 1 }).should('have.property', 'a').and('not.have.ownProperty', 'b')
    * @see http://chaijs.com/api/bdd/#method_ownproperty
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_nothaveownProperty(chainer: notDothaveDotownProperty, property: String): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection does not have the given property, using `.prop()`. Optionally, assert a particular value as well. The return value is available for chaining.
    * @example
    *    cy.get('#result').should('not.have.prop', 'disabled')
    *    cy.get('#result').should('not.have.prop', 'disabled', false)
    * @see http://chaijs.com/plugins/chai-jquery/#propname-value
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_nothaveprop(chainer: notDothaveDotprop, value: String): Chainable[Subject] = js.native
  @JSName("and")
  def and_nothaveprop(chainer: notDothaveDotprop, value: String, `match`: Any): Chainable[Subject] = js.native
  /**
    * Asserts that the target string does not contains the given substring `str`.
    * @example
    *    cy.wrap('foobar').should('not.have.string', 'baz')
    * @see http://chaijs.com/api/bdd/#method_string
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_nothavestring(chainer: notDothaveDotstring, `match`: String): Chainable[Subject] = js.native
  @JSName("and")
  def and_nothavestring(chainer: notDothaveDotstring, `match`: js.RegExp): Chainable[Subject] = js.native
  /**
    * Assert that the text of the first element of the selection is not equal to the given text, using `.text()`.
    * @example
    *    cy.get('#result').should('not.have.text', 'John Doe')
    * @see http://chaijs.com/plugins/chai-jquery/#texttext
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_nothavetext(chainer: notDothaveDottext, value: String): Chainable[Subject] = js.native
  /**
    * Assert spy did not throw an exception at least once.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spythrew
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_nothavethrown(chainer: notDothaveDotthrown): Chainable[Subject] = js.native
  @JSName("and")
  def and_nothavethrown(chainer: notDothaveDotthrown, value: String): Chainable[Subject] = js.native
  @JSName("and")
  def and_nothavethrown(chainer: notDothaveDotthrown, value: js.Error): Chainable[Subject] = js.native
  @JSName("and")
  def and_nothavethrown(chainer: notDothaveDotthrown, value: ErrorConstructor): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection does not have the given value, using `.val()`.
    * @example
    *    cy.get('textarea').should('not.have.value', 'foo bar baz')
    * @see http://chaijs.com/plugins/chai-jquery/#valuevalue
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_nothavevalue(chainer: notDothaveDotvalue, value: String): Chainable[Subject] = js.native
  /**
    * Assert that the html of the first element of the selection does not contain the given html, using `.html()`.
    * @example
    *    cy.get('#result').should('not.include.html', '<em>John Doe</em>')
    * @see http://chaijs.com/plugins/chai-jquery/#htmlhtml
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notincludehtml(chainer: notDotincludeDothtml, value: String): Chainable[Subject] = js.native
  /**
    * Assert that the text of the first element of the selection does not contain the given text, using `.text()`.
    * @example
    *    cy.get('#result').should('not.include.text', 'John Doe')
    * @see http://chaijs.com/plugins/chai-jquery/#texttext
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notincludetext(chainer: notDotincludeDottext, value: String): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection does not contain the given value, using `.val()`.
    * @example
    *    cy.get('textarea').should('not.include.value', 'foo bar baz')
    * @see http://chaijs.com/plugins/chai-jquery/#valuevalue
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notincludevalue(chainer: notDotincludeDotvalue, value: String): Chainable[Subject] = js.native
  /**
    * When one argument is provided, `.increase` asserts that the given function `subject` returns a greater number when it's
    * invoked after invoking the target function compared to when it's invoked beforehand.
    * `.increase` also causes all `.by` assertions that follow in the chain to assert how much greater of a number is returned.
    * It's often best to assert that the return value increased by the expected amount, rather than asserting it increased by any amount.
    *
    * When two arguments are provided, `.increase` asserts that the value of the given object `subject`'s `prop` property is greater after
    * invoking the target function compared to beforehand.
    *
    * @example
    *    let val = 1
    *    function addTwo() { val += 2 }
    *    function getVal() { return val }
    *    cy.wrap(() => {}).should('not.increase', getVal)
    *
    *    const myObj = { val: 1 }
    *    function addTwo() { myObj.val += 2 }
    *    cy.wrap(addTwo).should('increase', myObj, 'val')
    * @see http://chaijs.com/api/bdd/#method_increase
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notincrease(chainer: notDotincrease, value: js.Object): Chainable[Subject] = js.native
  @JSName("and")
  def and_notincrease(chainer: notDotincrease, value: js.Object, property: String): Chainable[Subject] = js.native
  /**
    * Assert that the selection does not match a given selector, using `.is()`. Note that this overrides the built-in chai assertion. If the object asserted against is not a jQuery object, the original implementation will be called.
    * @example
    *    cy.get('#result').should('not.match', ':empty')
    * @see http://chaijs.com/plugins/chai-jquery/#matchselector
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notmatch(chainer: notDotmatch, value: String): Chainable[Subject] = js.native
  /**
    * Asserts that the target does not match the given regular expression `re`.
    * @example
    *    cy.wrap('foobar').should('not.match', /baz$/)
    * @see http://chaijs.com/api/bdd/#method_match
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notmatch(chainer: notDotmatch, value: js.RegExp): Chainable[Subject] = js.native
  /**
    * When the target is a non-function object, `.respondTo` asserts that the target does not have a `method` with the given name method. The method can be own or inherited, and it can be enumerable or non-enumerable.
    * @example
    *    class Cat {
    *      meow() {}
    *    }
    *    cy.wrap(new Cat()).should('not.respondTo', 'bark')
    * @see http://chaijs.com/api/bdd/#method_respondto
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notrespondTo(chainer: notDotrespondTo, value: String): Chainable[Subject] = js.native
  /**
    * Invokes the given `matcher` function with the target being passed as the first argument, and asserts that the value returned is falsy.
    * @example
    *    cy.wrap(1).should('not.satisfy', (num) => num < 0)
    * @see http://chaijs.com/api/bdd/#method_satisfy
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notsatisfy(chainer: notDotsatisfy, fn: js.Function1[/* val */ Any, Boolean]): Chainable[Subject] = js.native
  /**
    * When no arguments are provided, `.throw` invokes the target function and asserts that no error is thrown.
    * When one argument is provided, and it's a string, `.throw` invokes the target function and asserts that no error is thrown with a message that contains that string.
    * @example
    *    function badFn() { console.log('Illegal salmon!') }
    *    cy.wrap(badFn).should('not.throw')
    *    cy.wrap(badFn).should('not.throw', 'salmon')
    *    cy.wrap(badFn).should('not.throw', /salmon/)
    * @see http://chaijs.com/api/bdd/#method_throw
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notthrow(chainer: notDotthrow): Chainable[Subject] = js.native
  /**
    * When no arguments are provided, `.throw` invokes the target function and asserts that no error is thrown.
    * When one argument is provided, and it's a string, `.throw` invokes the target function and asserts that no error is thrown with a message that contains that string.
    * @example
    *    function badFn() { console.log('Illegal salmon!') }
    *    cy.wrap(badFn).should('not.throw')
    *    cy.wrap(badFn).should('not.throw', 'salmon')
    *    cy.wrap(badFn).should('not.throw', /salmon/)
    * @see http://chaijs.com/api/bdd/#method_throw
    * @see https://on.cypress.io/assertions
    */
  // tslint:disable-next-line ban-types
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notthrow(chainer: notDotthrow, error: js.Error): Chainable[Subject] = js.native
  @JSName("and")
  def and_notthrow(chainer: notDotthrow, error: js.Error, expected: String): Chainable[Subject] = js.native
  @JSName("and")
  def and_notthrow(chainer: notDotthrow, error: js.Error, expected: js.RegExp): Chainable[Subject] = js.native
  @JSName("and")
  def and_notthrow(chainer: notDotthrow, error: js.Function): Chainable[Subject] = js.native
  @JSName("and")
  def and_notthrow(chainer: notDotthrow, error: js.Function, expected: String): Chainable[Subject] = js.native
  @JSName("and")
  def and_notthrow(chainer: notDotthrow, error: js.Function, expected: js.RegExp): Chainable[Subject] = js.native
  @JSName("and")
  def and_notthrow(chainer: notDotthrow, value: String): Chainable[Subject] = js.native
  @JSName("and")
  def and_notthrow(chainer: notDotthrow, value: js.RegExp): Chainable[Subject] = js.native
  /**
    * When the target is a non-function object, `.respondTo` asserts that the target has a `method` with the given name method. The method can be own or inherited, and it can be enumerable or non-enumerable.
    * @example
    *    class Cat {
    *      meow() {}
    *    }
    *    cy.wrap(new Cat()).should('respondTo', 'meow')
    * @see http://chaijs.com/api/bdd/#method_respondto
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_respondTo(chainer: respondTo, value: String): Chainable[Subject] = js.native
  /**
    * Invokes the given `matcher` function with the target being passed as the first argument, and asserts that the value returned is truthy.
    * @example
    *    cy.wrap(1).should('satisfy', (num) => num > 0)
    * @see http://chaijs.com/api/bdd/#method_satisfy
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_satisfy(chainer: satisfy, fn: js.Function1[/* val */ Any, Boolean]): Chainable[Subject] = js.native
  /**
    * When no arguments are provided, `.throw` invokes the target function and asserts that an error is thrown.
    * When one argument is provided, and it's a string, `.throw` invokes the target function and asserts that an error is thrown with a message that contains that string.
    * @example
    *    function badFn() { throw new TypeError('Illegal salmon!') }
    *    cy.wrap(badFn).should('throw')
    *    cy.wrap(badFn).should('throw', 'salmon')
    *    cy.wrap(badFn).should('throw', /salmon/)
    * @see http://chaijs.com/api/bdd/#method_throw
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_throw(chainer: `throw`): Chainable[Subject] = js.native
  /**
    * When no arguments are provided, `.throw` invokes the target function and asserts that an error is thrown.
    * When one argument is provided, and it's a string, `.throw` invokes the target function and asserts that an error is thrown with a message that contains that string.
    * @example
    *    function badFn() { throw new TypeError('Illegal salmon!') }
    *    cy.wrap(badFn).should('throw')
    *    cy.wrap(badFn).should('throw', 'salmon')
    *    cy.wrap(badFn).should('throw', /salmon/)
    * @see http://chaijs.com/api/bdd/#method_throw
    * @see https://on.cypress.io/assertions
    */
  // tslint:disable-next-line ban-types
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_throw(chainer: `throw`, error: js.Error): Chainable[Subject] = js.native
  @JSName("and")
  def and_throw(chainer: `throw`, error: js.Error, expected: String): Chainable[Subject] = js.native
  @JSName("and")
  def and_throw(chainer: `throw`, error: js.Error, expected: js.RegExp): Chainable[Subject] = js.native
  @JSName("and")
  def and_throw(chainer: `throw`, error: js.Function): Chainable[Subject] = js.native
  @JSName("and")
  def and_throw(chainer: `throw`, error: js.Function, expected: String): Chainable[Subject] = js.native
  @JSName("and")
  def and_throw(chainer: `throw`, error: js.Function, expected: js.RegExp): Chainable[Subject] = js.native
  @JSName("and")
  def and_throw(chainer: `throw`, value: String): Chainable[Subject] = js.native
  @JSName("and")
  def and_throw(chainer: `throw`, value: js.RegExp): Chainable[Subject] = js.native
  
  /**
    * Assign an alias for later use. Reference the alias later within a
    * [cy.get()](https://on.cypress.io/get) or
    * [cy.wait()](https://on.cypress.io/wait) command with a `@` prefix.
    * You can alias DOM elements, routes, stubs and spies.
    *
    * @see https://on.cypress.io/as
    * @see https://on.cypress.io/variables-and-aliases
    * @see https://on.cypress.io/get
    * @example
    ```
    // Get the aliased 'todos' elements
    cy.get('ul#todos').as('todos')
    //...hack hack hack...
    // later retrieve the todos
    cy.get('@todos')
    ```
    */
  def as(alias: String): Chainable[Subject] = js.native
  
  /**
    * Blur a focused element. This element must currently be in focus.
    * If you want to ensure an element is focused before blurring,
    * try using .focus() before .blur().
    *
    * @see https://on.cypress.io/blur
    */
  def blur(): Chainable[Subject] = js.native
  def blur(options: PartialBlurOptions): Chainable[Subject] = js.native
  
  /**
    * Check checkbox(es) or radio(s). This element must be an `<input>` with type `checkbox` or `radio`.
    *
    * @see https://on.cypress.io/check
    * @example
    *    // Check checkbox element
    *    cy.get('[type="checkbox"]').check()
    *    // Check first radio element
    *    cy.get('[type="radio"]').first().check()
    */
  def check(): Chainable[Subject] = js.native
  def check(options: PartialCheckOptions): Chainable[Subject] = js.native
  /**
    * Check checkbox(es) or radio(s). This element must be an `<input>` with type `checkbox` or `radio`.
    *
    * @see https://on.cypress.io/check
    * @example
    *    // Select the radio with the value of 'US'
    *    cy.get('[type="radio"]').check('US')
    *    // Check the checkboxes with the values 'ga' and 'ca'
    *    cy.get('[type="checkbox"]').check(['ga', 'ca'])
    */
  def check(value: String): Chainable[Subject] = js.native
  def check(value: String, options: PartialCheckOptions): Chainable[Subject] = js.native
  def check(value: js.Array[String]): Chainable[Subject] = js.native
  def check(value: js.Array[String], options: PartialCheckOptions): Chainable[Subject] = js.native
  
  /**
    * Get the children of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/children
    */
  def children[E /* <: Node */](): Chainable[JQuery[E]] = js.native
  def children[E /* <: Node */](options: PartialLoggableTimeoutabl): Chainable[JQuery[E]] = js.native
  def children[E /* <: Node */](selector: String): Chainable[JQuery[E]] = js.native
  def children[E /* <: Node */](selector: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[E]] = js.native
  @JSName("children")
  def children_a(selector: a): Chainable[JQuery[HTMLAnchorElement]] = js.native
  @JSName("children")
  def children_a(selector: a, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLAnchorElement]] = js.native
  @JSName("children")
  def children_abbr(selector: abbr): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_abbr(selector: abbr, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_address(selector: address): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_address(selector: address, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_area(selector: area): Chainable[JQuery[HTMLAreaElement]] = js.native
  @JSName("children")
  def children_area(selector: area, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLAreaElement]] = js.native
  @JSName("children")
  def children_article(selector: article): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_article(selector: article, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_aside(selector: aside): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_aside(selector: aside, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_audio(selector: audio): Chainable[JQuery[HTMLAudioElement]] = js.native
  @JSName("children")
  def children_audio(selector: audio, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLAudioElement]] = js.native
  @JSName("children")
  def children_b(selector: b): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_b(selector: b, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_base(selector: base_): Chainable[JQuery[HTMLBaseElement]] = js.native
  @JSName("children")
  def children_base(selector: base_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLBaseElement]] = js.native
  @JSName("children")
  def children_bdi(selector: bdi): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_bdi(selector: bdi, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_bdo(selector: bdo): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_bdo(selector: bdo, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_blockquote(selector: blockquote): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("children")
  def children_blockquote(selector: blockquote, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("children")
  def children_body(selector: body): Chainable[JQuery[HTMLBodyElement]] = js.native
  @JSName("children")
  def children_body(selector: body, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLBodyElement]] = js.native
  @JSName("children")
  def children_br(selector: br): Chainable[JQuery[HTMLBRElement]] = js.native
  @JSName("children")
  def children_br(selector: br, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLBRElement]] = js.native
  @JSName("children")
  def children_button(selector: button): Chainable[JQuery[HTMLButtonElement]] = js.native
  @JSName("children")
  def children_button(selector: button, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLButtonElement]] = js.native
  @JSName("children")
  def children_canvas(selector: canvas): Chainable[JQuery[HTMLCanvasElement]] = js.native
  @JSName("children")
  def children_canvas(selector: canvas, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLCanvasElement]] = js.native
  @JSName("children")
  def children_caption(selector: caption): Chainable[JQuery[HTMLTableCaptionElement]] = js.native
  @JSName("children")
  def children_caption(selector: caption, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableCaptionElement]] = js.native
  @JSName("children")
  def children_cite(selector: cite): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_cite(selector: cite, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_code(selector: code): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_code(selector: code, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_col(selector: col): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("children")
  def children_col(selector: col, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("children")
  def children_colgroup(selector: colgroup): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("children")
  def children_colgroup(selector: colgroup, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("children")
  def children_data(selector: data): Chainable[JQuery[HTMLDataElement]] = js.native
  @JSName("children")
  def children_data(selector: data, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDataElement]] = js.native
  @JSName("children")
  def children_datalist(selector: datalist): Chainable[JQuery[HTMLDataListElement]] = js.native
  @JSName("children")
  def children_datalist(selector: datalist, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDataListElement]] = js.native
  @JSName("children")
  def children_dd(selector: dd): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_dd(selector: dd, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_del(selector: del): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("children")
  def children_del(selector: del, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("children")
  def children_details(selector: details): Chainable[JQuery[HTMLDetailsElement]] = js.native
  @JSName("children")
  def children_details(selector: details, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDetailsElement]] = js.native
  @JSName("children")
  def children_dfn(selector: dfn): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_dfn(selector: dfn, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_dialog(selector: dialog): Chainable[JQuery[HTMLDialogElement]] = js.native
  @JSName("children")
  def children_dialog(selector: dialog, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDialogElement]] = js.native
  @JSName("children")
  def children_div(selector: div): Chainable[JQuery[HTMLDivElement]] = js.native
  @JSName("children")
  def children_div(selector: div, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDivElement]] = js.native
  @JSName("children")
  def children_dl(selector: dl): Chainable[JQuery[HTMLDListElement]] = js.native
  @JSName("children")
  def children_dl(selector: dl, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDListElement]] = js.native
  @JSName("children")
  def children_dt(selector: dt): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_dt(selector: dt, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_em(selector: em): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_em(selector: em, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_embed(selector: embed): Chainable[JQuery[HTMLEmbedElement]] = js.native
  @JSName("children")
  def children_embed(selector: embed, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLEmbedElement]] = js.native
  @JSName("children")
  def children_fieldset(selector: fieldset): Chainable[JQuery[HTMLFieldSetElement]] = js.native
  @JSName("children")
  def children_fieldset(selector: fieldset, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLFieldSetElement]] = js.native
  @JSName("children")
  def children_figcaption(selector: figcaption): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_figcaption(selector: figcaption, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_figure(selector: figure): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_figure(selector: figure, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_footer(selector: footer): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_footer(selector: footer, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_form(selector: form): Chainable[JQuery[HTMLFormElement]] = js.native
  @JSName("children")
  def children_form(selector: form, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLFormElement]] = js.native
  @JSName("children")
  def children_h1(selector: h1): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("children")
  def children_h1(selector: h1, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("children")
  def children_h2(selector: h2): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("children")
  def children_h2(selector: h2, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("children")
  def children_h3(selector: h3): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("children")
  def children_h3(selector: h3, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("children")
  def children_h4(selector: h4): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("children")
  def children_h4(selector: h4, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("children")
  def children_h5(selector: h5): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("children")
  def children_h5(selector: h5, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("children")
  def children_h6(selector: h6): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("children")
  def children_h6(selector: h6, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("children")
  def children_head(selector: head_): Chainable[JQuery[HTMLHeadElement]] = js.native
  @JSName("children")
  def children_head(selector: head_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadElement]] = js.native
  @JSName("children")
  def children_header(selector: header): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_header(selector: header, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_hgroup(selector: hgroup): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_hgroup(selector: hgroup, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_hr(selector: hr): Chainable[JQuery[HTMLHRElement]] = js.native
  @JSName("children")
  def children_hr(selector: hr, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHRElement]] = js.native
  @JSName("children")
  def children_html(selector: html_): Chainable[JQuery[HTMLHtmlElement]] = js.native
  @JSName("children")
  def children_html(selector: html_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHtmlElement]] = js.native
  @JSName("children")
  def children_i(selector: i): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_i(selector: i, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_iframe(selector: iframe): Chainable[JQuery[HTMLIFrameElement]] = js.native
  @JSName("children")
  def children_iframe(selector: iframe, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLIFrameElement]] = js.native
  @JSName("children")
  def children_img(selector: img): Chainable[JQuery[HTMLImageElement]] = js.native
  @JSName("children")
  def children_img(selector: img, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLImageElement]] = js.native
  @JSName("children")
  def children_input(selector: input): Chainable[JQuery[HTMLInputElement]] = js.native
  @JSName("children")
  def children_input(selector: input, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLInputElement]] = js.native
  @JSName("children")
  def children_ins(selector: ins): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("children")
  def children_ins(selector: ins, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("children")
  def children_kbd(selector: kbd): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_kbd(selector: kbd, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_label(selector: label): Chainable[JQuery[HTMLLabelElement]] = js.native
  @JSName("children")
  def children_label(selector: label, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLabelElement]] = js.native
  @JSName("children")
  def children_legend(selector: legend): Chainable[JQuery[HTMLLegendElement]] = js.native
  @JSName("children")
  def children_legend(selector: legend, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLegendElement]] = js.native
  @JSName("children")
  def children_li(selector: li): Chainable[JQuery[HTMLLIElement]] = js.native
  @JSName("children")
  def children_li(selector: li, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLIElement]] = js.native
  @JSName("children")
  def children_link(selector: link_): Chainable[JQuery[HTMLLinkElement]] = js.native
  @JSName("children")
  def children_link(selector: link_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLinkElement]] = js.native
  @JSName("children")
  def children_main(selector: main): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_main(selector: main, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_map(selector: map): Chainable[JQuery[HTMLMapElement]] = js.native
  @JSName("children")
  def children_map(selector: map, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMapElement]] = js.native
  @JSName("children")
  def children_mark(selector: mark): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_mark(selector: mark, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_menu(selector: menu): Chainable[JQuery[HTMLMenuElement]] = js.native
  @JSName("children")
  def children_menu(selector: menu, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMenuElement]] = js.native
  @JSName("children")
  def children_meta(selector: meta): Chainable[JQuery[HTMLMetaElement]] = js.native
  @JSName("children")
  def children_meta(selector: meta, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMetaElement]] = js.native
  @JSName("children")
  def children_meter(selector: meter): Chainable[JQuery[HTMLMeterElement]] = js.native
  @JSName("children")
  def children_meter(selector: meter, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMeterElement]] = js.native
  @JSName("children")
  def children_nav(selector: nav): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_nav(selector: nav, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_noscript(selector: noscript): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_noscript(selector: noscript, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_object(selector: object_): Chainable[JQuery[HTMLObjectElement]] = js.native
  @JSName("children")
  def children_object(selector: object_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLObjectElement]] = js.native
  @JSName("children")
  def children_ol(selector: ol): Chainable[JQuery[HTMLOListElement]] = js.native
  @JSName("children")
  def children_ol(selector: ol, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOListElement]] = js.native
  @JSName("children")
  def children_optgroup(selector: optgroup): Chainable[JQuery[HTMLOptGroupElement]] = js.native
  @JSName("children")
  def children_optgroup(selector: optgroup, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOptGroupElement]] = js.native
  @JSName("children")
  def children_option(selector: option): Chainable[JQuery[HTMLOptionElement]] = js.native
  @JSName("children")
  def children_option(selector: option, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOptionElement]] = js.native
  @JSName("children")
  def children_output(selector: output): Chainable[JQuery[HTMLOutputElement]] = js.native
  @JSName("children")
  def children_output(selector: output, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOutputElement]] = js.native
  @JSName("children")
  def children_p(selector: p): Chainable[JQuery[HTMLParagraphElement]] = js.native
  @JSName("children")
  def children_p(selector: p, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLParagraphElement]] = js.native
  @JSName("children")
  def children_picture(selector: picture): Chainable[JQuery[HTMLPictureElement]] = js.native
  @JSName("children")
  def children_picture(selector: picture, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLPictureElement]] = js.native
  @JSName("children")
  def children_pre(selector: pre): Chainable[JQuery[HTMLPreElement]] = js.native
  @JSName("children")
  def children_pre(selector: pre, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLPreElement]] = js.native
  @JSName("children")
  def children_progress(selector: progress_): Chainable[JQuery[HTMLProgressElement]] = js.native
  @JSName("children")
  def children_progress(selector: progress_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLProgressElement]] = js.native
  @JSName("children")
  def children_q(selector: q): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("children")
  def children_q(selector: q, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("children")
  def children_rp(selector: rp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_rp(selector: rp, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_rt(selector: rt): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_rt(selector: rt, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_ruby(selector: ruby): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_ruby(selector: ruby, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_s(selector: s): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_s(selector: s, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_samp(selector: samp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_samp(selector: samp, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_script(selector: script): Chainable[JQuery[HTMLScriptElement]] = js.native
  @JSName("children")
  def children_script(selector: script, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLScriptElement]] = js.native
  @JSName("children")
  def children_section(selector: section): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_section(selector: section, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_select(selector: select): Chainable[JQuery[HTMLSelectElement]] = js.native
  @JSName("children")
  def children_select(selector: select, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSelectElement]] = js.native
  @JSName("children")
  def children_slot(selector: slot): Chainable[JQuery[HTMLSlotElement]] = js.native
  @JSName("children")
  def children_slot(selector: slot, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSlotElement]] = js.native
  @JSName("children")
  def children_small(selector: small): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_small(selector: small, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_source(selector: source_): Chainable[JQuery[HTMLSourceElement]] = js.native
  @JSName("children")
  def children_source(selector: source_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSourceElement]] = js.native
  @JSName("children")
  def children_span(selector: span): Chainable[JQuery[HTMLSpanElement]] = js.native
  @JSName("children")
  def children_span(selector: span, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSpanElement]] = js.native
  @JSName("children")
  def children_strong(selector: strong): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_strong(selector: strong, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_style(selector: style): Chainable[JQuery[HTMLStyleElement]] = js.native
  @JSName("children")
  def children_style(selector: style, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLStyleElement]] = js.native
  @JSName("children")
  def children_sub(selector: sub): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_sub(selector: sub, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_summary(selector: summary): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_summary(selector: summary, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_sup(selector: sup): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_sup(selector: sup, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_table(selector: table): Chainable[JQuery[HTMLTableElement]] = js.native
  @JSName("children")
  def children_table(selector: table, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableElement]] = js.native
  @JSName("children")
  def children_tbody(selector: tbody): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("children")
  def children_tbody(selector: tbody, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("children")
  def children_td(selector: td): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("children")
  def children_td(selector: td, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("children")
  def children_template(selector: template): Chainable[JQuery[HTMLTemplateElement]] = js.native
  @JSName("children")
  def children_template(selector: template, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTemplateElement]] = js.native
  @JSName("children")
  def children_textarea(selector: textarea): Chainable[JQuery[HTMLTextAreaElement]] = js.native
  @JSName("children")
  def children_textarea(selector: textarea, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTextAreaElement]] = js.native
  @JSName("children")
  def children_tfoot(selector: tfoot): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("children")
  def children_tfoot(selector: tfoot, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("children")
  def children_th(selector: th): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("children")
  def children_th(selector: th, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("children")
  def children_thead(selector: thead): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("children")
  def children_thead(selector: thead, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("children")
  def children_time(selector: time): Chainable[JQuery[HTMLTimeElement]] = js.native
  @JSName("children")
  def children_time(selector: time, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTimeElement]] = js.native
  @JSName("children")
  def children_title(selector: title): Chainable[JQuery[HTMLTitleElement]] = js.native
  @JSName("children")
  def children_title(selector: title, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTitleElement]] = js.native
  @JSName("children")
  def children_tr(selector: tr): Chainable[JQuery[HTMLTableRowElement]] = js.native
  @JSName("children")
  def children_tr(selector: tr, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableRowElement]] = js.native
  @JSName("children")
  def children_track(selector: track): Chainable[JQuery[HTMLTrackElement]] = js.native
  @JSName("children")
  def children_track(selector: track, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTrackElement]] = js.native
  @JSName("children")
  def children_u(selector: u): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_u(selector: u, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_ul(selector: ul): Chainable[JQuery[HTMLUListElement]] = js.native
  @JSName("children")
  def children_ul(selector: ul, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLUListElement]] = js.native
  @JSName("children")
  def children_var(selector: `var`): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_var(selector: `var`, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_video(selector: video): Chainable[JQuery[HTMLVideoElement]] = js.native
  @JSName("children")
  def children_video(selector: video, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLVideoElement]] = js.native
  @JSName("children")
  def children_wbr(selector: wbr): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("children")
  def children_wbr(selector: wbr, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  
  /**
    * Clear the value of an `input` or `textarea`.
    * An alias for `.type({selectall}{backspace})`
    *
    * @see https://on.cypress.io/clear
    */
  def clear(): Chainable[Subject] = js.native
  def clear(options: PartialClearOptions): Chainable[Subject] = js.native
  
  /**
    * Clear a specific browser cookie.
    * Cypress automatically clears all cookies before each test to prevent state from being shared across tests. You shouldn't need to use this command unless you're using it to clear a specific cookie inside a single test.
    *
    * @see https://on.cypress.io/clearcookie
    */
  def clearCookie(name: String): Chainable[Null] = js.native
  def clearCookie(name: String, options: PartialLoggableTimeoutabl): Chainable[Null] = js.native
  
  /**
    * Clear all browser cookies.
    * Cypress automatically clears all cookies before each test to prevent state from being shared across tests. You shouldn't need to use this command unless you're using it to clear a specific cookie inside a single test.
    *
    * @see https://on.cypress.io/clearcookies
    */
  def clearCookies(): Chainable[Null] = js.native
  def clearCookies(options: PartialLoggableTimeoutabl): Chainable[Null] = js.native
  
  /**
    * Clear data in local storage.
    * Cypress automatically runs this command before each test to prevent state from being
    * shared across tests. You shouldn't need to use this command unless you're using it
    * to clear localStorage inside a single test. Yields `localStorage` object.
    *
    * @see https://on.cypress.io/clearlocalstorage
    * @param {string} [key] - name of a particular item to remove (optional).
    * @example
    ```
    // Removes all local storage keys
    cy.clearLocalStorage()
    .should(ls => {
    expect(ls.getItem('prop1')).to.be.null
    })
    // Removes item "todos"
    cy.clearLocalStorage("todos")
    ```
    */
  def clearLocalStorage(): Chainable[Storage] = js.native
  def clearLocalStorage(key: String): Chainable[Storage] = js.native
  /**
    * Clear data in local storage.
    * Cypress automatically runs this command before each test to prevent state from being
    * shared across tests. You shouldn't need to use this command unless you're using it
    * to clear localStorage inside a single test. Yields `localStorage` object.
    *
    * @see https://on.cypress.io/clearlocalstorage
    * @param {string} [key] - name of a particular item to remove (optional).
    * @param {options} [object] - options object
    * @example
    ```
    // Removes item "todos" without logging
    cy.clearLocalStorage("todos", { log: false })
    ```
    */
  def clearLocalStorage(key: String, options: PartialLoggable): Chainable[Storage] = js.native
  /**
    * Clear data in local storage.
    * Cypress automatically runs this command before each test to prevent state from being
    * shared across tests. You shouldn't need to use this command unless you're using it
    * to clear localStorage inside a single test. Yields `localStorage` object.
    *
    * @see https://on.cypress.io/clearlocalstorage
    * @param {options} [object] - options object
    * @example
    ```
    // Removes all local storage items, without logging
    cy.clearLocalStorage({ log: false })
    ```
    */
  def clearLocalStorage(options: PartialLoggable): Chainable[Storage] = js.native
  /**
    * Clear keys in local storage that match given regular expression.
    *
    * @see https://on.cypress.io/clearlocalstorage
    * @param {RegExp} re - regular expression to match.
    * @example
    ```
    // Clears all local storage matching /app-/
    cy.clearLocalStorage(/app-/)
    ```
    */
  def clearLocalStorage(re: js.RegExp): Chainable[Storage] = js.native
  
  /**
    * Click a DOM element.
    *
    * @see https://on.cypress.io/click
    * @example
    *    cy.get('button').click()          // Click on button
    *    cy.focused().click()              // Click on el with focus
    *    cy.contains('Welcome').click()    // Click on first el containing 'Welcome'
    */
  def click(): Chainable[Subject] = js.native
  def click(options: PartialClickOptions): Chainable[Subject] = js.native
  /**
    * Click a DOM element at specific corner / side.
    *
    * @param {PositionType} position - The position where the click should be issued.
    * The `center` position is the default position.
    * @see https://on.cypress.io/click
    * @example
    *    cy.get('button').click('topRight')
    */
  def click(position: PositionType): Chainable[Subject] = js.native
  def click(position: PositionType, options: PartialClickOptions): Chainable[Subject] = js.native
  /**
    * Click a DOM element at specific coordinates
    *
    * @param {number} x The distance in pixels from the element's left to issue the click.
    * @param {number} y The distance in pixels from the element's top to issue the click.
    * @see https://on.cypress.io/click
    * @example
    ```
    // The click below will be issued inside of the element
    // (15px from the left and 40px from the top).
    cy.get('button').click(15, 40)
    ```
    */
  def click(x: Double, y: Double): Chainable[Subject] = js.native
  def click(x: Double, y: Double, options: PartialClickOptions): Chainable[Subject] = js.native
  
  /**
    * `cy.clock()` overrides native global functions related to time allowing them to be controlled
    * synchronously via [cy.tick()](https://on.cypress.io/tick) or the yielded clock object.
    * This includes controlling:
    * * `setTimeout`
    * * `clearTimeout`
    * * `setInterval`
    * * `clearInterval`
    * * `Date` Objects
    *
    * The clock starts at the unix epoch (timestamp of 0).
    * This means that when you instantiate new Date in your application,
    * it will have a time of January 1st, 1970.
    *
    * To restore the real clock call `.restore()`
    *
    * @example
    *  cy.clock()
    *  ...
    *  // restore the application clock
    *  cy.clock().then(clock => {
    *    clock.restore()
    *  })
    *  // or use this shortcut
    *  cy.clock().invoke('restore')
    *
    * @see https://on.cypress.io/clock
    */
  def clock(): Chainable[Clock] = js.native
  def clock(now: js.Date): Chainable[Clock] = js.native
  def clock(now: js.Date, functions: js.Array[setTimeout | clearTimeout | setInterval | clearInterval | Date]): Chainable[Clock] = js.native
  def clock(
    now: js.Date,
    functions: js.Array[setTimeout | clearTimeout | setInterval | clearInterval | Date],
    options: Loggable
  ): Chainable[Clock] = js.native
  def clock(now: js.Date, functions: Unit, options: Loggable): Chainable[Clock] = js.native
  def clock(now: js.Date, options: Loggable): Chainable[Clock] = js.native
  /**
    * Mocks global clock and sets current timestamp to the given value.
    * Overrides all functions that deal with time.
    *
    * @see https://on.cypress.io/clock
    * @example
    *    // in your app code
    *    $('#date').text(new Date().toJSON())
    *    // in the spec file
    *    // March 14, 2017 timestamp or Date object
    *    const now = new Date(2017, 2, 14).getTime()
    *    cy.clock(now)
    *    cy.visit('/index.html')
    *    cy.get('#date').contains('2017-03-14')
    *    // to restore the real clock
    *    cy.clock().then(clock => {
    *      clock.restore()
    *    })
    *    // or use this shortcut
    *    cy.clock().invoke('restore')
    */
  def clock(now: Double): Chainable[Clock] = js.native
  def clock(now: Double, functions: js.Array[setTimeout | clearTimeout | setInterval | clearInterval | Date]): Chainable[Clock] = js.native
  def clock(
    now: Double,
    functions: js.Array[setTimeout | clearTimeout | setInterval | clearInterval | Date],
    options: Loggable
  ): Chainable[Clock] = js.native
  def clock(now: Double, functions: Unit, options: Loggable): Chainable[Clock] = js.native
  def clock(now: Double, options: Loggable): Chainable[Clock] = js.native
  /**
    * Mocks global clock and all functions.
    *
    * @see https://on.cypress.io/clock
    * @example
    *    // mock clock but do not log this command
    *    cy.clock({ log: false })
    */
  def clock(options: Loggable): Chainable[Clock] = js.native
  
  def closest[E /* <: Node */](selector: String): Chainable[JQuery[E]] = js.native
  def closest[E /* <: Node */](selector: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[E]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_a(selector: a): Chainable[JQuery[HTMLAnchorElement]] = js.native
  @JSName("closest")
  def closest_a(selector: a, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLAnchorElement]] = js.native
  @JSName("closest")
  def closest_abbr(selector: abbr): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_abbr(selector: abbr, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_address(selector: address): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_address(selector: address, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_area(selector: area): Chainable[JQuery[HTMLAreaElement]] = js.native
  @JSName("closest")
  def closest_area(selector: area, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLAreaElement]] = js.native
  @JSName("closest")
  def closest_article(selector: article): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_article(selector: article, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_aside(selector: aside): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_aside(selector: aside, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_audio(selector: audio): Chainable[JQuery[HTMLAudioElement]] = js.native
  @JSName("closest")
  def closest_audio(selector: audio, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLAudioElement]] = js.native
  @JSName("closest")
  def closest_b(selector: b): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_b(selector: b, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_base(selector: base_): Chainable[JQuery[HTMLBaseElement]] = js.native
  @JSName("closest")
  def closest_base(selector: base_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLBaseElement]] = js.native
  @JSName("closest")
  def closest_bdi(selector: bdi): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_bdi(selector: bdi, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_bdo(selector: bdo): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_bdo(selector: bdo, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_blockquote(selector: blockquote): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("closest")
  def closest_blockquote(selector: blockquote, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("closest")
  def closest_body(selector: body): Chainable[JQuery[HTMLBodyElement]] = js.native
  @JSName("closest")
  def closest_body(selector: body, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLBodyElement]] = js.native
  @JSName("closest")
  def closest_br(selector: br): Chainable[JQuery[HTMLBRElement]] = js.native
  @JSName("closest")
  def closest_br(selector: br, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLBRElement]] = js.native
  @JSName("closest")
  def closest_button(selector: button): Chainable[JQuery[HTMLButtonElement]] = js.native
  @JSName("closest")
  def closest_button(selector: button, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLButtonElement]] = js.native
  @JSName("closest")
  def closest_canvas(selector: canvas): Chainable[JQuery[HTMLCanvasElement]] = js.native
  @JSName("closest")
  def closest_canvas(selector: canvas, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLCanvasElement]] = js.native
  @JSName("closest")
  def closest_caption(selector: caption): Chainable[JQuery[HTMLTableCaptionElement]] = js.native
  @JSName("closest")
  def closest_caption(selector: caption, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableCaptionElement]] = js.native
  @JSName("closest")
  def closest_cite(selector: cite): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_cite(selector: cite, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_code(selector: code): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_code(selector: code, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_col(selector: col): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("closest")
  def closest_col(selector: col, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("closest")
  def closest_colgroup(selector: colgroup): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("closest")
  def closest_colgroup(selector: colgroup, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("closest")
  def closest_data(selector: data): Chainable[JQuery[HTMLDataElement]] = js.native
  @JSName("closest")
  def closest_data(selector: data, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDataElement]] = js.native
  @JSName("closest")
  def closest_datalist(selector: datalist): Chainable[JQuery[HTMLDataListElement]] = js.native
  @JSName("closest")
  def closest_datalist(selector: datalist, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDataListElement]] = js.native
  @JSName("closest")
  def closest_dd(selector: dd): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_dd(selector: dd, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_del(selector: del): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("closest")
  def closest_del(selector: del, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("closest")
  def closest_details(selector: details): Chainable[JQuery[HTMLDetailsElement]] = js.native
  @JSName("closest")
  def closest_details(selector: details, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDetailsElement]] = js.native
  @JSName("closest")
  def closest_dfn(selector: dfn): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_dfn(selector: dfn, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_dialog(selector: dialog): Chainable[JQuery[HTMLDialogElement]] = js.native
  @JSName("closest")
  def closest_dialog(selector: dialog, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDialogElement]] = js.native
  @JSName("closest")
  def closest_div(selector: div): Chainable[JQuery[HTMLDivElement]] = js.native
  @JSName("closest")
  def closest_div(selector: div, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDivElement]] = js.native
  @JSName("closest")
  def closest_dl(selector: dl): Chainable[JQuery[HTMLDListElement]] = js.native
  @JSName("closest")
  def closest_dl(selector: dl, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDListElement]] = js.native
  @JSName("closest")
  def closest_dt(selector: dt): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_dt(selector: dt, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_em(selector: em): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_em(selector: em, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_embed(selector: embed): Chainable[JQuery[HTMLEmbedElement]] = js.native
  @JSName("closest")
  def closest_embed(selector: embed, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLEmbedElement]] = js.native
  @JSName("closest")
  def closest_fieldset(selector: fieldset): Chainable[JQuery[HTMLFieldSetElement]] = js.native
  @JSName("closest")
  def closest_fieldset(selector: fieldset, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLFieldSetElement]] = js.native
  @JSName("closest")
  def closest_figcaption(selector: figcaption): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_figcaption(selector: figcaption, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_figure(selector: figure): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_figure(selector: figure, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_footer(selector: footer): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_footer(selector: footer, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_form(selector: form): Chainable[JQuery[HTMLFormElement]] = js.native
  @JSName("closest")
  def closest_form(selector: form, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLFormElement]] = js.native
  @JSName("closest")
  def closest_h1(selector: h1): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("closest")
  def closest_h1(selector: h1, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("closest")
  def closest_h2(selector: h2): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("closest")
  def closest_h2(selector: h2, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("closest")
  def closest_h3(selector: h3): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("closest")
  def closest_h3(selector: h3, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("closest")
  def closest_h4(selector: h4): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("closest")
  def closest_h4(selector: h4, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("closest")
  def closest_h5(selector: h5): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("closest")
  def closest_h5(selector: h5, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("closest")
  def closest_h6(selector: h6): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("closest")
  def closest_h6(selector: h6, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("closest")
  def closest_head(selector: head_): Chainable[JQuery[HTMLHeadElement]] = js.native
  @JSName("closest")
  def closest_head(selector: head_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadElement]] = js.native
  @JSName("closest")
  def closest_header(selector: header): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_header(selector: header, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_hgroup(selector: hgroup): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_hgroup(selector: hgroup, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_hr(selector: hr): Chainable[JQuery[HTMLHRElement]] = js.native
  @JSName("closest")
  def closest_hr(selector: hr, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHRElement]] = js.native
  @JSName("closest")
  def closest_html(selector: html_): Chainable[JQuery[HTMLHtmlElement]] = js.native
  @JSName("closest")
  def closest_html(selector: html_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHtmlElement]] = js.native
  @JSName("closest")
  def closest_i(selector: i): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_i(selector: i, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_iframe(selector: iframe): Chainable[JQuery[HTMLIFrameElement]] = js.native
  @JSName("closest")
  def closest_iframe(selector: iframe, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLIFrameElement]] = js.native
  @JSName("closest")
  def closest_img(selector: img): Chainable[JQuery[HTMLImageElement]] = js.native
  @JSName("closest")
  def closest_img(selector: img, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLImageElement]] = js.native
  @JSName("closest")
  def closest_input(selector: input): Chainable[JQuery[HTMLInputElement]] = js.native
  @JSName("closest")
  def closest_input(selector: input, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLInputElement]] = js.native
  @JSName("closest")
  def closest_ins(selector: ins): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("closest")
  def closest_ins(selector: ins, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("closest")
  def closest_kbd(selector: kbd): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_kbd(selector: kbd, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_label(selector: label): Chainable[JQuery[HTMLLabelElement]] = js.native
  @JSName("closest")
  def closest_label(selector: label, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLabelElement]] = js.native
  @JSName("closest")
  def closest_legend(selector: legend): Chainable[JQuery[HTMLLegendElement]] = js.native
  @JSName("closest")
  def closest_legend(selector: legend, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLegendElement]] = js.native
  @JSName("closest")
  def closest_li(selector: li): Chainable[JQuery[HTMLLIElement]] = js.native
  @JSName("closest")
  def closest_li(selector: li, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLIElement]] = js.native
  @JSName("closest")
  def closest_link(selector: link_): Chainable[JQuery[HTMLLinkElement]] = js.native
  @JSName("closest")
  def closest_link(selector: link_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLinkElement]] = js.native
  @JSName("closest")
  def closest_main(selector: main): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_main(selector: main, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_map(selector: map): Chainable[JQuery[HTMLMapElement]] = js.native
  @JSName("closest")
  def closest_map(selector: map, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMapElement]] = js.native
  @JSName("closest")
  def closest_mark(selector: mark): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_mark(selector: mark, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_menu(selector: menu): Chainable[JQuery[HTMLMenuElement]] = js.native
  @JSName("closest")
  def closest_menu(selector: menu, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMenuElement]] = js.native
  @JSName("closest")
  def closest_meta(selector: meta): Chainable[JQuery[HTMLMetaElement]] = js.native
  @JSName("closest")
  def closest_meta(selector: meta, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMetaElement]] = js.native
  @JSName("closest")
  def closest_meter(selector: meter): Chainable[JQuery[HTMLMeterElement]] = js.native
  @JSName("closest")
  def closest_meter(selector: meter, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMeterElement]] = js.native
  @JSName("closest")
  def closest_nav(selector: nav): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_nav(selector: nav, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_noscript(selector: noscript): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_noscript(selector: noscript, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_object(selector: object_): Chainable[JQuery[HTMLObjectElement]] = js.native
  @JSName("closest")
  def closest_object(selector: object_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLObjectElement]] = js.native
  @JSName("closest")
  def closest_ol(selector: ol): Chainable[JQuery[HTMLOListElement]] = js.native
  @JSName("closest")
  def closest_ol(selector: ol, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOListElement]] = js.native
  @JSName("closest")
  def closest_optgroup(selector: optgroup): Chainable[JQuery[HTMLOptGroupElement]] = js.native
  @JSName("closest")
  def closest_optgroup(selector: optgroup, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOptGroupElement]] = js.native
  @JSName("closest")
  def closest_option(selector: option): Chainable[JQuery[HTMLOptionElement]] = js.native
  @JSName("closest")
  def closest_option(selector: option, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOptionElement]] = js.native
  @JSName("closest")
  def closest_output(selector: output): Chainable[JQuery[HTMLOutputElement]] = js.native
  @JSName("closest")
  def closest_output(selector: output, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOutputElement]] = js.native
  @JSName("closest")
  def closest_p(selector: p): Chainable[JQuery[HTMLParagraphElement]] = js.native
  @JSName("closest")
  def closest_p(selector: p, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLParagraphElement]] = js.native
  @JSName("closest")
  def closest_picture(selector: picture): Chainable[JQuery[HTMLPictureElement]] = js.native
  @JSName("closest")
  def closest_picture(selector: picture, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLPictureElement]] = js.native
  @JSName("closest")
  def closest_pre(selector: pre): Chainable[JQuery[HTMLPreElement]] = js.native
  @JSName("closest")
  def closest_pre(selector: pre, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLPreElement]] = js.native
  @JSName("closest")
  def closest_progress(selector: progress_): Chainable[JQuery[HTMLProgressElement]] = js.native
  @JSName("closest")
  def closest_progress(selector: progress_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLProgressElement]] = js.native
  @JSName("closest")
  def closest_q(selector: q): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("closest")
  def closest_q(selector: q, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("closest")
  def closest_rp(selector: rp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_rp(selector: rp, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_rt(selector: rt): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_rt(selector: rt, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_ruby(selector: ruby): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_ruby(selector: ruby, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_s(selector: s): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_s(selector: s, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_samp(selector: samp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_samp(selector: samp, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_script(selector: script): Chainable[JQuery[HTMLScriptElement]] = js.native
  @JSName("closest")
  def closest_script(selector: script, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLScriptElement]] = js.native
  @JSName("closest")
  def closest_section(selector: section): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_section(selector: section, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_select(selector: select): Chainable[JQuery[HTMLSelectElement]] = js.native
  @JSName("closest")
  def closest_select(selector: select, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSelectElement]] = js.native
  @JSName("closest")
  def closest_slot(selector: slot): Chainable[JQuery[HTMLSlotElement]] = js.native
  @JSName("closest")
  def closest_slot(selector: slot, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSlotElement]] = js.native
  @JSName("closest")
  def closest_small(selector: small): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_small(selector: small, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_source(selector: source_): Chainable[JQuery[HTMLSourceElement]] = js.native
  @JSName("closest")
  def closest_source(selector: source_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSourceElement]] = js.native
  @JSName("closest")
  def closest_span(selector: span): Chainable[JQuery[HTMLSpanElement]] = js.native
  @JSName("closest")
  def closest_span(selector: span, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSpanElement]] = js.native
  @JSName("closest")
  def closest_strong(selector: strong): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_strong(selector: strong, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_style(selector: style): Chainable[JQuery[HTMLStyleElement]] = js.native
  @JSName("closest")
  def closest_style(selector: style, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLStyleElement]] = js.native
  @JSName("closest")
  def closest_sub(selector: sub): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_sub(selector: sub, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_summary(selector: summary): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_summary(selector: summary, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_sup(selector: sup): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_sup(selector: sup, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_table(selector: table): Chainable[JQuery[HTMLTableElement]] = js.native
  @JSName("closest")
  def closest_table(selector: table, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableElement]] = js.native
  @JSName("closest")
  def closest_tbody(selector: tbody): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("closest")
  def closest_tbody(selector: tbody, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("closest")
  def closest_td(selector: td): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("closest")
  def closest_td(selector: td, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("closest")
  def closest_template(selector: template): Chainable[JQuery[HTMLTemplateElement]] = js.native
  @JSName("closest")
  def closest_template(selector: template, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTemplateElement]] = js.native
  @JSName("closest")
  def closest_textarea(selector: textarea): Chainable[JQuery[HTMLTextAreaElement]] = js.native
  @JSName("closest")
  def closest_textarea(selector: textarea, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTextAreaElement]] = js.native
  @JSName("closest")
  def closest_tfoot(selector: tfoot): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("closest")
  def closest_tfoot(selector: tfoot, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("closest")
  def closest_th(selector: th): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("closest")
  def closest_th(selector: th, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("closest")
  def closest_thead(selector: thead): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("closest")
  def closest_thead(selector: thead, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("closest")
  def closest_time(selector: time): Chainable[JQuery[HTMLTimeElement]] = js.native
  @JSName("closest")
  def closest_time(selector: time, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTimeElement]] = js.native
  @JSName("closest")
  def closest_title(selector: title): Chainable[JQuery[HTMLTitleElement]] = js.native
  @JSName("closest")
  def closest_title(selector: title, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTitleElement]] = js.native
  @JSName("closest")
  def closest_tr(selector: tr): Chainable[JQuery[HTMLTableRowElement]] = js.native
  @JSName("closest")
  def closest_tr(selector: tr, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableRowElement]] = js.native
  @JSName("closest")
  def closest_track(selector: track): Chainable[JQuery[HTMLTrackElement]] = js.native
  @JSName("closest")
  def closest_track(selector: track, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTrackElement]] = js.native
  @JSName("closest")
  def closest_u(selector: u): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_u(selector: u, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_ul(selector: ul): Chainable[JQuery[HTMLUListElement]] = js.native
  @JSName("closest")
  def closest_ul(selector: ul, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLUListElement]] = js.native
  @JSName("closest")
  def closest_var(selector: `var`): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_var(selector: `var`, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_video(selector: video): Chainable[JQuery[HTMLVideoElement]] = js.native
  @JSName("closest")
  def closest_video(selector: video, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLVideoElement]] = js.native
  @JSName("closest")
  def closest_wbr(selector: wbr): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("closest")
  def closest_wbr(selector: wbr, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  
  /**
    * Get the DOM element containing the text.
    * DOM elements can contain more than the desired text and still match.
    * Additionally, Cypress prefers some DOM elements over the deepest element found.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // Yield el in .nav containing 'About'
    *    cy.get('.nav').contains('About')
    *    // Yield first el in document containing 'Hello'
    *    cy.contains('Hello')
    *    // you can use regular expression
    *    cy.contains(/^b\w+/)
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    *    // tries to find the given text for up to 1 second
    *    cy.contains('my text to find', {timeout: 1000})
    */
  def contains(content: String): Chainable[Subject] = js.native
  def contains(content: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[Subject] = js.native
  def contains(content: js.RegExp): Chainable[Subject] = js.native
  def contains(content: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[Subject] = js.native
  def contains(content: Double): Chainable[Subject] = js.native
  def contains(content: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[Subject] = js.native
  /**
    * Get the DOM element using CSS "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <... class="foo">... apples ...</...>
    *    cy.contains('.foo', 'apples')
    */
  def contains[E /* <: Node */](selector: String, text: String): Chainable[JQuery[E]] = js.native
  def contains[E /* <: Node */](selector: String, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[E]] = js.native
  def contains[E /* <: Node */](selector: String, text: js.RegExp): Chainable[JQuery[E]] = js.native
  def contains[E /* <: Node */](selector: String, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[E]] = js.native
  def contains[E /* <: Node */](selector: String, text: Double): Chainable[JQuery[E]] = js.native
  def contains[E /* <: Node */](selector: String, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[E]] = js.native
  /**
    * Get the child DOM element that contains given text.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // Yield el in .nav containing 'About'
    *    cy.get('.nav').contains('About')
    */
  @JSName("contains")
  def contains_E[E /* <: Node */](content: String): Chainable[JQuery[E]] = js.native
  @JSName("contains")
  def contains_E[E /* <: Node */](content: js.RegExp): Chainable[JQuery[E]] = js.native
  @JSName("contains")
  def contains_E[E /* <: Node */](content: Double): Chainable[JQuery[E]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_a(selector: a, text: String): Chainable[JQuery[HTMLAnchorElement]] = js.native
  @JSName("contains")
  def contains_a(selector: a, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLAnchorElement]] = js.native
  @JSName("contains")
  def contains_a(selector: a, text: js.RegExp): Chainable[JQuery[HTMLAnchorElement]] = js.native
  @JSName("contains")
  def contains_a(selector: a, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLAnchorElement]] = js.native
  @JSName("contains")
  def contains_a(selector: a, text: Double): Chainable[JQuery[HTMLAnchorElement]] = js.native
  @JSName("contains")
  def contains_a(selector: a, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLAnchorElement]] = js.native
  @JSName("contains")
  def contains_abbr(selector: abbr, text: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_abbr(selector: abbr, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_abbr(selector: abbr, text: js.RegExp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_abbr(selector: abbr, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_abbr(selector: abbr, text: Double): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_abbr(selector: abbr, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_address(selector: address, text: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_address(selector: address, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_address(selector: address, text: js.RegExp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_address(selector: address, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_address(selector: address, text: Double): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_address(selector: address, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_area(selector: area, text: String): Chainable[JQuery[HTMLAreaElement]] = js.native
  @JSName("contains")
  def contains_area(selector: area, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLAreaElement]] = js.native
  @JSName("contains")
  def contains_area(selector: area, text: js.RegExp): Chainable[JQuery[HTMLAreaElement]] = js.native
  @JSName("contains")
  def contains_area(selector: area, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLAreaElement]] = js.native
  @JSName("contains")
  def contains_area(selector: area, text: Double): Chainable[JQuery[HTMLAreaElement]] = js.native
  @JSName("contains")
  def contains_area(selector: area, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLAreaElement]] = js.native
  @JSName("contains")
  def contains_article(selector: article, text: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_article(selector: article, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_article(selector: article, text: js.RegExp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_article(selector: article, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_article(selector: article, text: Double): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_article(selector: article, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_aside(selector: aside, text: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_aside(selector: aside, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_aside(selector: aside, text: js.RegExp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_aside(selector: aside, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_aside(selector: aside, text: Double): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_aside(selector: aside, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_audio(selector: audio, text: String): Chainable[JQuery[HTMLAudioElement]] = js.native
  @JSName("contains")
  def contains_audio(selector: audio, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLAudioElement]] = js.native
  @JSName("contains")
  def contains_audio(selector: audio, text: js.RegExp): Chainable[JQuery[HTMLAudioElement]] = js.native
  @JSName("contains")
  def contains_audio(selector: audio, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLAudioElement]] = js.native
  @JSName("contains")
  def contains_audio(selector: audio, text: Double): Chainable[JQuery[HTMLAudioElement]] = js.native
  @JSName("contains")
  def contains_audio(selector: audio, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLAudioElement]] = js.native
  @JSName("contains")
  def contains_b(selector: b, text: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_b(selector: b, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_b(selector: b, text: js.RegExp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_b(selector: b, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_b(selector: b, text: Double): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_b(selector: b, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_base(selector: base_, text: String): Chainable[JQuery[HTMLBaseElement]] = js.native
  @JSName("contains")
  def contains_base(selector: base_, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLBaseElement]] = js.native
  @JSName("contains")
  def contains_base(selector: base_, text: js.RegExp): Chainable[JQuery[HTMLBaseElement]] = js.native
  @JSName("contains")
  def contains_base(selector: base_, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLBaseElement]] = js.native
  @JSName("contains")
  def contains_base(selector: base_, text: Double): Chainable[JQuery[HTMLBaseElement]] = js.native
  @JSName("contains")
  def contains_base(selector: base_, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLBaseElement]] = js.native
  @JSName("contains")
  def contains_bdi(selector: bdi, text: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_bdi(selector: bdi, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_bdi(selector: bdi, text: js.RegExp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_bdi(selector: bdi, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_bdi(selector: bdi, text: Double): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_bdi(selector: bdi, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_bdo(selector: bdo, text: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_bdo(selector: bdo, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_bdo(selector: bdo, text: js.RegExp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_bdo(selector: bdo, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_bdo(selector: bdo, text: Double): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_bdo(selector: bdo, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_blockquote(selector: blockquote, text: String): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("contains")
  def contains_blockquote(selector: blockquote, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("contains")
  def contains_blockquote(selector: blockquote, text: js.RegExp): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("contains")
  def contains_blockquote(selector: blockquote, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("contains")
  def contains_blockquote(selector: blockquote, text: Double): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("contains")
  def contains_blockquote(selector: blockquote, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("contains")
  def contains_body(selector: body, text: String): Chainable[JQuery[HTMLBodyElement]] = js.native
  @JSName("contains")
  def contains_body(selector: body, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLBodyElement]] = js.native
  @JSName("contains")
  def contains_body(selector: body, text: js.RegExp): Chainable[JQuery[HTMLBodyElement]] = js.native
  @JSName("contains")
  def contains_body(selector: body, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLBodyElement]] = js.native
  @JSName("contains")
  def contains_body(selector: body, text: Double): Chainable[JQuery[HTMLBodyElement]] = js.native
  @JSName("contains")
  def contains_body(selector: body, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLBodyElement]] = js.native
  @JSName("contains")
  def contains_br(selector: br, text: String): Chainable[JQuery[HTMLBRElement]] = js.native
  @JSName("contains")
  def contains_br(selector: br, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLBRElement]] = js.native
  @JSName("contains")
  def contains_br(selector: br, text: js.RegExp): Chainable[JQuery[HTMLBRElement]] = js.native
  @JSName("contains")
  def contains_br(selector: br, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLBRElement]] = js.native
  @JSName("contains")
  def contains_br(selector: br, text: Double): Chainable[JQuery[HTMLBRElement]] = js.native
  @JSName("contains")
  def contains_br(selector: br, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLBRElement]] = js.native
  @JSName("contains")
  def contains_button(selector: button, text: String): Chainable[JQuery[HTMLButtonElement]] = js.native
  @JSName("contains")
  def contains_button(selector: button, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLButtonElement]] = js.native
  @JSName("contains")
  def contains_button(selector: button, text: js.RegExp): Chainable[JQuery[HTMLButtonElement]] = js.native
  @JSName("contains")
  def contains_button(selector: button, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLButtonElement]] = js.native
  @JSName("contains")
  def contains_button(selector: button, text: Double): Chainable[JQuery[HTMLButtonElement]] = js.native
  @JSName("contains")
  def contains_button(selector: button, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLButtonElement]] = js.native
  @JSName("contains")
  def contains_canvas(selector: canvas, text: String): Chainable[JQuery[HTMLCanvasElement]] = js.native
  @JSName("contains")
  def contains_canvas(selector: canvas, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLCanvasElement]] = js.native
  @JSName("contains")
  def contains_canvas(selector: canvas, text: js.RegExp): Chainable[JQuery[HTMLCanvasElement]] = js.native
  @JSName("contains")
  def contains_canvas(selector: canvas, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLCanvasElement]] = js.native
  @JSName("contains")
  def contains_canvas(selector: canvas, text: Double): Chainable[JQuery[HTMLCanvasElement]] = js.native
  @JSName("contains")
  def contains_canvas(selector: canvas, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLCanvasElement]] = js.native
  @JSName("contains")
  def contains_caption(selector: caption, text: String): Chainable[JQuery[HTMLTableCaptionElement]] = js.native
  @JSName("contains")
  def contains_caption(selector: caption, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLTableCaptionElement]] = js.native
  @JSName("contains")
  def contains_caption(selector: caption, text: js.RegExp): Chainable[JQuery[HTMLTableCaptionElement]] = js.native
  @JSName("contains")
  def contains_caption(selector: caption, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLTableCaptionElement]] = js.native
  @JSName("contains")
  def contains_caption(selector: caption, text: Double): Chainable[JQuery[HTMLTableCaptionElement]] = js.native
  @JSName("contains")
  def contains_caption(selector: caption, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLTableCaptionElement]] = js.native
  @JSName("contains")
  def contains_cite(selector: cite, text: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_cite(selector: cite, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_cite(selector: cite, text: js.RegExp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_cite(selector: cite, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_cite(selector: cite, text: Double): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_cite(selector: cite, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_code(selector: code, text: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_code(selector: code, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_code(selector: code, text: js.RegExp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_code(selector: code, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_code(selector: code, text: Double): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_code(selector: code, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_col(selector: col, text: String): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("contains")
  def contains_col(selector: col, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("contains")
  def contains_col(selector: col, text: js.RegExp): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("contains")
  def contains_col(selector: col, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("contains")
  def contains_col(selector: col, text: Double): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("contains")
  def contains_col(selector: col, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("contains")
  def contains_colgroup(selector: colgroup, text: String): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("contains")
  def contains_colgroup(selector: colgroup, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("contains")
  def contains_colgroup(selector: colgroup, text: js.RegExp): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("contains")
  def contains_colgroup(selector: colgroup, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("contains")
  def contains_colgroup(selector: colgroup, text: Double): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("contains")
  def contains_colgroup(selector: colgroup, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("contains")
  def contains_data(selector: data, text: String): Chainable[JQuery[HTMLDataElement]] = js.native
  @JSName("contains")
  def contains_data(selector: data, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLDataElement]] = js.native
  @JSName("contains")
  def contains_data(selector: data, text: js.RegExp): Chainable[JQuery[HTMLDataElement]] = js.native
  @JSName("contains")
  def contains_data(selector: data, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLDataElement]] = js.native
  @JSName("contains")
  def contains_data(selector: data, text: Double): Chainable[JQuery[HTMLDataElement]] = js.native
  @JSName("contains")
  def contains_data(selector: data, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLDataElement]] = js.native
  @JSName("contains")
  def contains_datalist(selector: datalist, text: String): Chainable[JQuery[HTMLDataListElement]] = js.native
  @JSName("contains")
  def contains_datalist(selector: datalist, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLDataListElement]] = js.native
  @JSName("contains")
  def contains_datalist(selector: datalist, text: js.RegExp): Chainable[JQuery[HTMLDataListElement]] = js.native
  @JSName("contains")
  def contains_datalist(selector: datalist, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLDataListElement]] = js.native
  @JSName("contains")
  def contains_datalist(selector: datalist, text: Double): Chainable[JQuery[HTMLDataListElement]] = js.native
  @JSName("contains")
  def contains_datalist(selector: datalist, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLDataListElement]] = js.native
  @JSName("contains")
  def contains_dd(selector: dd, text: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_dd(selector: dd, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_dd(selector: dd, text: js.RegExp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_dd(selector: dd, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_dd(selector: dd, text: Double): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_dd(selector: dd, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_del(selector: del, text: String): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("contains")
  def contains_del(selector: del, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("contains")
  def contains_del(selector: del, text: js.RegExp): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("contains")
  def contains_del(selector: del, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("contains")
  def contains_del(selector: del, text: Double): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("contains")
  def contains_del(selector: del, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("contains")
  def contains_details(selector: details, text: String): Chainable[JQuery[HTMLDetailsElement]] = js.native
  @JSName("contains")
  def contains_details(selector: details, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLDetailsElement]] = js.native
  @JSName("contains")
  def contains_details(selector: details, text: js.RegExp): Chainable[JQuery[HTMLDetailsElement]] = js.native
  @JSName("contains")
  def contains_details(selector: details, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLDetailsElement]] = js.native
  @JSName("contains")
  def contains_details(selector: details, text: Double): Chainable[JQuery[HTMLDetailsElement]] = js.native
  @JSName("contains")
  def contains_details(selector: details, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLDetailsElement]] = js.native
  @JSName("contains")
  def contains_dfn(selector: dfn, text: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_dfn(selector: dfn, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_dfn(selector: dfn, text: js.RegExp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_dfn(selector: dfn, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_dfn(selector: dfn, text: Double): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_dfn(selector: dfn, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_dialog(selector: dialog, text: String): Chainable[JQuery[HTMLDialogElement]] = js.native
  @JSName("contains")
  def contains_dialog(selector: dialog, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLDialogElement]] = js.native
  @JSName("contains")
  def contains_dialog(selector: dialog, text: js.RegExp): Chainable[JQuery[HTMLDialogElement]] = js.native
  @JSName("contains")
  def contains_dialog(selector: dialog, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLDialogElement]] = js.native
  @JSName("contains")
  def contains_dialog(selector: dialog, text: Double): Chainable[JQuery[HTMLDialogElement]] = js.native
  @JSName("contains")
  def contains_dialog(selector: dialog, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLDialogElement]] = js.native
  @JSName("contains")
  def contains_div(selector: div, text: String): Chainable[JQuery[HTMLDivElement]] = js.native
  @JSName("contains")
  def contains_div(selector: div, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLDivElement]] = js.native
  @JSName("contains")
  def contains_div(selector: div, text: js.RegExp): Chainable[JQuery[HTMLDivElement]] = js.native
  @JSName("contains")
  def contains_div(selector: div, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLDivElement]] = js.native
  @JSName("contains")
  def contains_div(selector: div, text: Double): Chainable[JQuery[HTMLDivElement]] = js.native
  @JSName("contains")
  def contains_div(selector: div, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLDivElement]] = js.native
  @JSName("contains")
  def contains_dl(selector: dl, text: String): Chainable[JQuery[HTMLDListElement]] = js.native
  @JSName("contains")
  def contains_dl(selector: dl, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLDListElement]] = js.native
  @JSName("contains")
  def contains_dl(selector: dl, text: js.RegExp): Chainable[JQuery[HTMLDListElement]] = js.native
  @JSName("contains")
  def contains_dl(selector: dl, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLDListElement]] = js.native
  @JSName("contains")
  def contains_dl(selector: dl, text: Double): Chainable[JQuery[HTMLDListElement]] = js.native
  @JSName("contains")
  def contains_dl(selector: dl, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLDListElement]] = js.native
  @JSName("contains")
  def contains_dt(selector: dt, text: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_dt(selector: dt, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_dt(selector: dt, text: js.RegExp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_dt(selector: dt, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_dt(selector: dt, text: Double): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_dt(selector: dt, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_em(selector: em, text: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_em(selector: em, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_em(selector: em, text: js.RegExp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_em(selector: em, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_em(selector: em, text: Double): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_em(selector: em, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_embed(selector: embed, text: String): Chainable[JQuery[HTMLEmbedElement]] = js.native
  @JSName("contains")
  def contains_embed(selector: embed, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLEmbedElement]] = js.native
  @JSName("contains")
  def contains_embed(selector: embed, text: js.RegExp): Chainable[JQuery[HTMLEmbedElement]] = js.native
  @JSName("contains")
  def contains_embed(selector: embed, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLEmbedElement]] = js.native
  @JSName("contains")
  def contains_embed(selector: embed, text: Double): Chainable[JQuery[HTMLEmbedElement]] = js.native
  @JSName("contains")
  def contains_embed(selector: embed, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLEmbedElement]] = js.native
  @JSName("contains")
  def contains_fieldset(selector: fieldset, text: String): Chainable[JQuery[HTMLFieldSetElement]] = js.native
  @JSName("contains")
  def contains_fieldset(selector: fieldset, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLFieldSetElement]] = js.native
  @JSName("contains")
  def contains_fieldset(selector: fieldset, text: js.RegExp): Chainable[JQuery[HTMLFieldSetElement]] = js.native
  @JSName("contains")
  def contains_fieldset(selector: fieldset, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLFieldSetElement]] = js.native
  @JSName("contains")
  def contains_fieldset(selector: fieldset, text: Double): Chainable[JQuery[HTMLFieldSetElement]] = js.native
  @JSName("contains")
  def contains_fieldset(selector: fieldset, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLFieldSetElement]] = js.native
  @JSName("contains")
  def contains_figcaption(selector: figcaption, text: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_figcaption(selector: figcaption, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_figcaption(selector: figcaption, text: js.RegExp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_figcaption(selector: figcaption, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_figcaption(selector: figcaption, text: Double): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_figcaption(selector: figcaption, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_figure(selector: figure, text: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_figure(selector: figure, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_figure(selector: figure, text: js.RegExp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_figure(selector: figure, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_figure(selector: figure, text: Double): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_figure(selector: figure, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_footer(selector: footer, text: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_footer(selector: footer, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_footer(selector: footer, text: js.RegExp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_footer(selector: footer, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_footer(selector: footer, text: Double): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_footer(selector: footer, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_form(selector: form, text: String): Chainable[JQuery[HTMLFormElement]] = js.native
  @JSName("contains")
  def contains_form(selector: form, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLFormElement]] = js.native
  @JSName("contains")
  def contains_form(selector: form, text: js.RegExp): Chainable[JQuery[HTMLFormElement]] = js.native
  @JSName("contains")
  def contains_form(selector: form, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLFormElement]] = js.native
  @JSName("contains")
  def contains_form(selector: form, text: Double): Chainable[JQuery[HTMLFormElement]] = js.native
  @JSName("contains")
  def contains_form(selector: form, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLFormElement]] = js.native
  @JSName("contains")
  def contains_h1(selector: h1, text: String): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h1(selector: h1, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h1(selector: h1, text: js.RegExp): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h1(selector: h1, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h1(selector: h1, text: Double): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h1(selector: h1, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h2(selector: h2, text: String): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h2(selector: h2, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h2(selector: h2, text: js.RegExp): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h2(selector: h2, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h2(selector: h2, text: Double): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h2(selector: h2, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h3(selector: h3, text: String): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h3(selector: h3, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h3(selector: h3, text: js.RegExp): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h3(selector: h3, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h3(selector: h3, text: Double): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h3(selector: h3, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h4(selector: h4, text: String): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h4(selector: h4, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h4(selector: h4, text: js.RegExp): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h4(selector: h4, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h4(selector: h4, text: Double): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h4(selector: h4, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h5(selector: h5, text: String): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h5(selector: h5, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h5(selector: h5, text: js.RegExp): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h5(selector: h5, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h5(selector: h5, text: Double): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h5(selector: h5, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h6(selector: h6, text: String): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h6(selector: h6, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h6(selector: h6, text: js.RegExp): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h6(selector: h6, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h6(selector: h6, text: Double): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h6(selector: h6, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_head(selector: head_, text: String): Chainable[JQuery[HTMLHeadElement]] = js.native
  @JSName("contains")
  def contains_head(selector: head_, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLHeadElement]] = js.native
  @JSName("contains")
  def contains_head(selector: head_, text: js.RegExp): Chainable[JQuery[HTMLHeadElement]] = js.native
  @JSName("contains")
  def contains_head(selector: head_, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLHeadElement]] = js.native
  @JSName("contains")
  def contains_head(selector: head_, text: Double): Chainable[JQuery[HTMLHeadElement]] = js.native
  @JSName("contains")
  def contains_head(selector: head_, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLHeadElement]] = js.native
  @JSName("contains")
  def contains_header(selector: header, text: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_header(selector: header, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_header(selector: header, text: js.RegExp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_header(selector: header, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_header(selector: header, text: Double): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_header(selector: header, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_hgroup(selector: hgroup, text: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_hgroup(selector: hgroup, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_hgroup(selector: hgroup, text: js.RegExp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_hgroup(selector: hgroup, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_hgroup(selector: hgroup, text: Double): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_hgroup(selector: hgroup, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_hr(selector: hr, text: String): Chainable[JQuery[HTMLHRElement]] = js.native
  @JSName("contains")
  def contains_hr(selector: hr, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLHRElement]] = js.native
  @JSName("contains")
  def contains_hr(selector: hr, text: js.RegExp): Chainable[JQuery[HTMLHRElement]] = js.native
  @JSName("contains")
  def contains_hr(selector: hr, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLHRElement]] = js.native
  @JSName("contains")
  def contains_hr(selector: hr, text: Double): Chainable[JQuery[HTMLHRElement]] = js.native
  @JSName("contains")
  def contains_hr(selector: hr, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLHRElement]] = js.native
  @JSName("contains")
  def contains_html(selector: html_, text: String): Chainable[JQuery[HTMLHtmlElement]] = js.native
  @JSName("contains")
  def contains_html(selector: html_, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLHtmlElement]] = js.native
  @JSName("contains")
  def contains_html(selector: html_, text: js.RegExp): Chainable[JQuery[HTMLHtmlElement]] = js.native
  @JSName("contains")
  def contains_html(selector: html_, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLHtmlElement]] = js.native
  @JSName("contains")
  def contains_html(selector: html_, text: Double): Chainable[JQuery[HTMLHtmlElement]] = js.native
  @JSName("contains")
  def contains_html(selector: html_, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLHtmlElement]] = js.native
  @JSName("contains")
  def contains_i(selector: i, text: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_i(selector: i, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_i(selector: i, text: js.RegExp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_i(selector: i, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_i(selector: i, text: Double): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_i(selector: i, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_iframe(selector: iframe, text: String): Chainable[JQuery[HTMLIFrameElement]] = js.native
  @JSName("contains")
  def contains_iframe(selector: iframe, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLIFrameElement]] = js.native
  @JSName("contains")
  def contains_iframe(selector: iframe, text: js.RegExp): Chainable[JQuery[HTMLIFrameElement]] = js.native
  @JSName("contains")
  def contains_iframe(selector: iframe, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLIFrameElement]] = js.native
  @JSName("contains")
  def contains_iframe(selector: iframe, text: Double): Chainable[JQuery[HTMLIFrameElement]] = js.native
  @JSName("contains")
  def contains_iframe(selector: iframe, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLIFrameElement]] = js.native
  @JSName("contains")
  def contains_img(selector: img, text: String): Chainable[JQuery[HTMLImageElement]] = js.native
  @JSName("contains")
  def contains_img(selector: img, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLImageElement]] = js.native
  @JSName("contains")
  def contains_img(selector: img, text: js.RegExp): Chainable[JQuery[HTMLImageElement]] = js.native
  @JSName("contains")
  def contains_img(selector: img, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLImageElement]] = js.native
  @JSName("contains")
  def contains_img(selector: img, text: Double): Chainable[JQuery[HTMLImageElement]] = js.native
  @JSName("contains")
  def contains_img(selector: img, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLImageElement]] = js.native
  @JSName("contains")
  def contains_input(selector: input, text: String): Chainable[JQuery[HTMLInputElement]] = js.native
  @JSName("contains")
  def contains_input(selector: input, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLInputElement]] = js.native
  @JSName("contains")
  def contains_input(selector: input, text: js.RegExp): Chainable[JQuery[HTMLInputElement]] = js.native
  @JSName("contains")
  def contains_input(selector: input, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLInputElement]] = js.native
  @JSName("contains")
  def contains_input(selector: input, text: Double): Chainable[JQuery[HTMLInputElement]] = js.native
  @JSName("contains")
  def contains_input(selector: input, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLInputElement]] = js.native
  @JSName("contains")
  def contains_ins(selector: ins, text: String): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("contains")
  def contains_ins(selector: ins, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("contains")
  def contains_ins(selector: ins, text: js.RegExp): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("contains")
  def contains_ins(selector: ins, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("contains")
  def contains_ins(selector: ins, text: Double): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("contains")
  def contains_ins(selector: ins, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("contains")
  def contains_kbd(selector: kbd, text: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_kbd(selector: kbd, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_kbd(selector: kbd, text: js.RegExp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_kbd(selector: kbd, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_kbd(selector: kbd, text: Double): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_kbd(selector: kbd, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_label(selector: label, text: String): Chainable[JQuery[HTMLLabelElement]] = js.native
  @JSName("contains")
  def contains_label(selector: label, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLLabelElement]] = js.native
  @JSName("contains")
  def contains_label(selector: label, text: js.RegExp): Chainable[JQuery[HTMLLabelElement]] = js.native
  @JSName("contains")
  def contains_label(selector: label, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLLabelElement]] = js.native
  @JSName("contains")
  def contains_label(selector: label, text: Double): Chainable[JQuery[HTMLLabelElement]] = js.native
  @JSName("contains")
  def contains_label(selector: label, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLLabelElement]] = js.native
  @JSName("contains")
  def contains_legend(selector: legend, text: String): Chainable[JQuery[HTMLLegendElement]] = js.native
  @JSName("contains")
  def contains_legend(selector: legend, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLLegendElement]] = js.native
  @JSName("contains")
  def contains_legend(selector: legend, text: js.RegExp): Chainable[JQuery[HTMLLegendElement]] = js.native
  @JSName("contains")
  def contains_legend(selector: legend, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLLegendElement]] = js.native
  @JSName("contains")
  def contains_legend(selector: legend, text: Double): Chainable[JQuery[HTMLLegendElement]] = js.native
  @JSName("contains")
  def contains_legend(selector: legend, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLLegendElement]] = js.native
  @JSName("contains")
  def contains_li(selector: li, text: String): Chainable[JQuery[HTMLLIElement]] = js.native
  @JSName("contains")
  def contains_li(selector: li, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLLIElement]] = js.native
  @JSName("contains")
  def contains_li(selector: li, text: js.RegExp): Chainable[JQuery[HTMLLIElement]] = js.native
  @JSName("contains")
  def contains_li(selector: li, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLLIElement]] = js.native
  @JSName("contains")
  def contains_li(selector: li, text: Double): Chainable[JQuery[HTMLLIElement]] = js.native
  @JSName("contains")
  def contains_li(selector: li, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLLIElement]] = js.native
  @JSName("contains")
  def contains_link(selector: link_, text: String): Chainable[JQuery[HTMLLinkElement]] = js.native
  @JSName("contains")
  def contains_link(selector: link_, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLLinkElement]] = js.native
  @JSName("contains")
  def contains_link(selector: link_, text: js.RegExp): Chainable[JQuery[HTMLLinkElement]] = js.native
  @JSName("contains")
  def contains_link(selector: link_, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLLinkElement]] = js.native
  @JSName("contains")
  def contains_link(selector: link_, text: Double): Chainable[JQuery[HTMLLinkElement]] = js.native
  @JSName("contains")
  def contains_link(selector: link_, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLLinkElement]] = js.native
  @JSName("contains")
  def contains_main(selector: main, text: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_main(selector: main, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_main(selector: main, text: js.RegExp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_main(selector: main, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_main(selector: main, text: Double): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_main(selector: main, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_map(selector: map, text: String): Chainable[JQuery[HTMLMapElement]] = js.native
  @JSName("contains")
  def contains_map(selector: map, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLMapElement]] = js.native
  @JSName("contains")
  def contains_map(selector: map, text: js.RegExp): Chainable[JQuery[HTMLMapElement]] = js.native
  @JSName("contains")
  def contains_map(selector: map, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLMapElement]] = js.native
  @JSName("contains")
  def contains_map(selector: map, text: Double): Chainable[JQuery[HTMLMapElement]] = js.native
  @JSName("contains")
  def contains_map(selector: map, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLMapElement]] = js.native
  @JSName("contains")
  def contains_mark(selector: mark, text: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_mark(selector: mark, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_mark(selector: mark, text: js.RegExp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_mark(selector: mark, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_mark(selector: mark, text: Double): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_mark(selector: mark, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_menu(selector: menu, text: String): Chainable[JQuery[HTMLMenuElement]] = js.native
  @JSName("contains")
  def contains_menu(selector: menu, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLMenuElement]] = js.native
  @JSName("contains")
  def contains_menu(selector: menu, text: js.RegExp): Chainable[JQuery[HTMLMenuElement]] = js.native
  @JSName("contains")
  def contains_menu(selector: menu, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLMenuElement]] = js.native
  @JSName("contains")
  def contains_menu(selector: menu, text: Double): Chainable[JQuery[HTMLMenuElement]] = js.native
  @JSName("contains")
  def contains_menu(selector: menu, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLMenuElement]] = js.native
  @JSName("contains")
  def contains_meta(selector: meta, text: String): Chainable[JQuery[HTMLMetaElement]] = js.native
  @JSName("contains")
  def contains_meta(selector: meta, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLMetaElement]] = js.native
  @JSName("contains")
  def contains_meta(selector: meta, text: js.RegExp): Chainable[JQuery[HTMLMetaElement]] = js.native
  @JSName("contains")
  def contains_meta(selector: meta, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLMetaElement]] = js.native
  @JSName("contains")
  def contains_meta(selector: meta, text: Double): Chainable[JQuery[HTMLMetaElement]] = js.native
  @JSName("contains")
  def contains_meta(selector: meta, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLMetaElement]] = js.native
  @JSName("contains")
  def contains_meter(selector: meter, text: String): Chainable[JQuery[HTMLMeterElement]] = js.native
  @JSName("contains")
  def contains_meter(selector: meter, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLMeterElement]] = js.native
  @JSName("contains")
  def contains_meter(selector: meter, text: js.RegExp): Chainable[JQuery[HTMLMeterElement]] = js.native
  @JSName("contains")
  def contains_meter(selector: meter, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLMeterElement]] = js.native
  @JSName("contains")
  def contains_meter(selector: meter, text: Double): Chainable[JQuery[HTMLMeterElement]] = js.native
  @JSName("contains")
  def contains_meter(selector: meter, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLMeterElement]] = js.native
  @JSName("contains")
  def contains_nav(selector: nav, text: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_nav(selector: nav, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_nav(selector: nav, text: js.RegExp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_nav(selector: nav, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_nav(selector: nav, text: Double): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_nav(selector: nav, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_noscript(selector: noscript, text: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_noscript(selector: noscript, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_noscript(selector: noscript, text: js.RegExp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_noscript(selector: noscript, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_noscript(selector: noscript, text: Double): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_noscript(selector: noscript, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_object(selector: object_, text: String): Chainable[JQuery[HTMLObjectElement]] = js.native
  @JSName("contains")
  def contains_object(selector: object_, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLObjectElement]] = js.native
  @JSName("contains")
  def contains_object(selector: object_, text: js.RegExp): Chainable[JQuery[HTMLObjectElement]] = js.native
  @JSName("contains")
  def contains_object(selector: object_, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLObjectElement]] = js.native
  @JSName("contains")
  def contains_object(selector: object_, text: Double): Chainable[JQuery[HTMLObjectElement]] = js.native
  @JSName("contains")
  def contains_object(selector: object_, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLObjectElement]] = js.native
  @JSName("contains")
  def contains_ol(selector: ol, text: String): Chainable[JQuery[HTMLOListElement]] = js.native
  @JSName("contains")
  def contains_ol(selector: ol, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLOListElement]] = js.native
  @JSName("contains")
  def contains_ol(selector: ol, text: js.RegExp): Chainable[JQuery[HTMLOListElement]] = js.native
  @JSName("contains")
  def contains_ol(selector: ol, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLOListElement]] = js.native
  @JSName("contains")
  def contains_ol(selector: ol, text: Double): Chainable[JQuery[HTMLOListElement]] = js.native
  @JSName("contains")
  def contains_ol(selector: ol, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLOListElement]] = js.native
  @JSName("contains")
  def contains_optgroup(selector: optgroup, text: String): Chainable[JQuery[HTMLOptGroupElement]] = js.native
  @JSName("contains")
  def contains_optgroup(selector: optgroup, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLOptGroupElement]] = js.native
  @JSName("contains")
  def contains_optgroup(selector: optgroup, text: js.RegExp): Chainable[JQuery[HTMLOptGroupElement]] = js.native
  @JSName("contains")
  def contains_optgroup(selector: optgroup, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLOptGroupElement]] = js.native
  @JSName("contains")
  def contains_optgroup(selector: optgroup, text: Double): Chainable[JQuery[HTMLOptGroupElement]] = js.native
  @JSName("contains")
  def contains_optgroup(selector: optgroup, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLOptGroupElement]] = js.native
  @JSName("contains")
  def contains_option(selector: option, text: String): Chainable[JQuery[HTMLOptionElement]] = js.native
  @JSName("contains")
  def contains_option(selector: option, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLOptionElement]] = js.native
  @JSName("contains")
  def contains_option(selector: option, text: js.RegExp): Chainable[JQuery[HTMLOptionElement]] = js.native
  @JSName("contains")
  def contains_option(selector: option, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLOptionElement]] = js.native
  @JSName("contains")
  def contains_option(selector: option, text: Double): Chainable[JQuery[HTMLOptionElement]] = js.native
  @JSName("contains")
  def contains_option(selector: option, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLOptionElement]] = js.native
  @JSName("contains")
  def contains_output(selector: output, text: String): Chainable[JQuery[HTMLOutputElement]] = js.native
  @JSName("contains")
  def contains_output(selector: output, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLOutputElement]] = js.native
  @JSName("contains")
  def contains_output(selector: output, text: js.RegExp): Chainable[JQuery[HTMLOutputElement]] = js.native
  @JSName("contains")
  def contains_output(selector: output, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLOutputElement]] = js.native
  @JSName("contains")
  def contains_output(selector: output, text: Double): Chainable[JQuery[HTMLOutputElement]] = js.native
  @JSName("contains")
  def contains_output(selector: output, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLOutputElement]] = js.native
  @JSName("contains")
  def contains_p(selector: p, text: String): Chainable[JQuery[HTMLParagraphElement]] = js.native
  @JSName("contains")
  def contains_p(selector: p, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLParagraphElement]] = js.native
  @JSName("contains")
  def contains_p(selector: p, text: js.RegExp): Chainable[JQuery[HTMLParagraphElement]] = js.native
  @JSName("contains")
  def contains_p(selector: p, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLParagraphElement]] = js.native
  @JSName("contains")
  def contains_p(selector: p, text: Double): Chainable[JQuery[HTMLParagraphElement]] = js.native
  @JSName("contains")
  def contains_p(selector: p, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLParagraphElement]] = js.native
  @JSName("contains")
  def contains_picture(selector: picture, text: String): Chainable[JQuery[HTMLPictureElement]] = js.native
  @JSName("contains")
  def contains_picture(selector: picture, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLPictureElement]] = js.native
  @JSName("contains")
  def contains_picture(selector: picture, text: js.RegExp): Chainable[JQuery[HTMLPictureElement]] = js.native
  @JSName("contains")
  def contains_picture(selector: picture, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLPictureElement]] = js.native
  @JSName("contains")
  def contains_picture(selector: picture, text: Double): Chainable[JQuery[HTMLPictureElement]] = js.native
  @JSName("contains")
  def contains_picture(selector: picture, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLPictureElement]] = js.native
  @JSName("contains")
  def contains_pre(selector: pre, text: String): Chainable[JQuery[HTMLPreElement]] = js.native
  @JSName("contains")
  def contains_pre(selector: pre, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLPreElement]] = js.native
  @JSName("contains")
  def contains_pre(selector: pre, text: js.RegExp): Chainable[JQuery[HTMLPreElement]] = js.native
  @JSName("contains")
  def contains_pre(selector: pre, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLPreElement]] = js.native
  @JSName("contains")
  def contains_pre(selector: pre, text: Double): Chainable[JQuery[HTMLPreElement]] = js.native
  @JSName("contains")
  def contains_pre(selector: pre, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLPreElement]] = js.native
  @JSName("contains")
  def contains_progress(selector: progress_, text: String): Chainable[JQuery[HTMLProgressElement]] = js.native
  @JSName("contains")
  def contains_progress(selector: progress_, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLProgressElement]] = js.native
  @JSName("contains")
  def contains_progress(selector: progress_, text: js.RegExp): Chainable[JQuery[HTMLProgressElement]] = js.native
  @JSName("contains")
  def contains_progress(selector: progress_, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLProgressElement]] = js.native
  @JSName("contains")
  def contains_progress(selector: progress_, text: Double): Chainable[JQuery[HTMLProgressElement]] = js.native
  @JSName("contains")
  def contains_progress(selector: progress_, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLProgressElement]] = js.native
  @JSName("contains")
  def contains_q(selector: q, text: String): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("contains")
  def contains_q(selector: q, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("contains")
  def contains_q(selector: q, text: js.RegExp): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("contains")
  def contains_q(selector: q, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("contains")
  def contains_q(selector: q, text: Double): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("contains")
  def contains_q(selector: q, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("contains")
  def contains_rp(selector: rp, text: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_rp(selector: rp, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_rp(selector: rp, text: js.RegExp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_rp(selector: rp, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_rp(selector: rp, text: Double): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_rp(selector: rp, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_rt(selector: rt, text: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_rt(selector: rt, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_rt(selector: rt, text: js.RegExp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_rt(selector: rt, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_rt(selector: rt, text: Double): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_rt(selector: rt, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_ruby(selector: ruby, text: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_ruby(selector: ruby, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_ruby(selector: ruby, text: js.RegExp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_ruby(selector: ruby, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_ruby(selector: ruby, text: Double): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_ruby(selector: ruby, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_s(selector: s, text: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_s(selector: s, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_s(selector: s, text: js.RegExp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_s(selector: s, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_s(selector: s, text: Double): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_s(selector: s, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_samp(selector: samp, text: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_samp(selector: samp, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_samp(selector: samp, text: js.RegExp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_samp(selector: samp, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_samp(selector: samp, text: Double): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_samp(selector: samp, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_script(selector: script, text: String): Chainable[JQuery[HTMLScriptElement]] = js.native
  @JSName("contains")
  def contains_script(selector: script, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLScriptElement]] = js.native
  @JSName("contains")
  def contains_script(selector: script, text: js.RegExp): Chainable[JQuery[HTMLScriptElement]] = js.native
  @JSName("contains")
  def contains_script(selector: script, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLScriptElement]] = js.native
  @JSName("contains")
  def contains_script(selector: script, text: Double): Chainable[JQuery[HTMLScriptElement]] = js.native
  @JSName("contains")
  def contains_script(selector: script, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLScriptElement]] = js.native
  @JSName("contains")
  def contains_section(selector: section, text: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_section(selector: section, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_section(selector: section, text: js.RegExp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_section(selector: section, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_section(selector: section, text: Double): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_section(selector: section, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_select(selector: select, text: String): Chainable[JQuery[HTMLSelectElement]] = js.native
  @JSName("contains")
  def contains_select(selector: select, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLSelectElement]] = js.native
  @JSName("contains")
  def contains_select(selector: select, text: js.RegExp): Chainable[JQuery[HTMLSelectElement]] = js.native
  @JSName("contains")
  def contains_select(selector: select, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLSelectElement]] = js.native
  @JSName("contains")
  def contains_select(selector: select, text: Double): Chainable[JQuery[HTMLSelectElement]] = js.native
  @JSName("contains")
  def contains_select(selector: select, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLSelectElement]] = js.native
  @JSName("contains")
  def contains_slot(selector: slot, text: String): Chainable[JQuery[HTMLSlotElement]] = js.native
  @JSName("contains")
  def contains_slot(selector: slot, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLSlotElement]] = js.native
  @JSName("contains")
  def contains_slot(selector: slot, text: js.RegExp): Chainable[JQuery[HTMLSlotElement]] = js.native
  @JSName("contains")
  def contains_slot(selector: slot, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLSlotElement]] = js.native
  @JSName("contains")
  def contains_slot(selector: slot, text: Double): Chainable[JQuery[HTMLSlotElement]] = js.native
  @JSName("contains")
  def contains_slot(selector: slot, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLSlotElement]] = js.native
  @JSName("contains")
  def contains_small(selector: small, text: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_small(selector: small, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_small(selector: small, text: js.RegExp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_small(selector: small, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_small(selector: small, text: Double): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_small(selector: small, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_source(selector: source_, text: String): Chainable[JQuery[HTMLSourceElement]] = js.native
  @JSName("contains")
  def contains_source(selector: source_, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLSourceElement]] = js.native
  @JSName("contains")
  def contains_source(selector: source_, text: js.RegExp): Chainable[JQuery[HTMLSourceElement]] = js.native
  @JSName("contains")
  def contains_source(selector: source_, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLSourceElement]] = js.native
  @JSName("contains")
  def contains_source(selector: source_, text: Double): Chainable[JQuery[HTMLSourceElement]] = js.native
  @JSName("contains")
  def contains_source(selector: source_, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLSourceElement]] = js.native
  @JSName("contains")
  def contains_span(selector: span, text: String): Chainable[JQuery[HTMLSpanElement]] = js.native
  @JSName("contains")
  def contains_span(selector: span, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLSpanElement]] = js.native
  @JSName("contains")
  def contains_span(selector: span, text: js.RegExp): Chainable[JQuery[HTMLSpanElement]] = js.native
  @JSName("contains")
  def contains_span(selector: span, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLSpanElement]] = js.native
  @JSName("contains")
  def contains_span(selector: span, text: Double): Chainable[JQuery[HTMLSpanElement]] = js.native
  @JSName("contains")
  def contains_span(selector: span, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLSpanElement]] = js.native
  @JSName("contains")
  def contains_strong(selector: strong, text: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_strong(selector: strong, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_strong(selector: strong, text: js.RegExp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_strong(selector: strong, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_strong(selector: strong, text: Double): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_strong(selector: strong, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_style(selector: style, text: String): Chainable[JQuery[HTMLStyleElement]] = js.native
  @JSName("contains")
  def contains_style(selector: style, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLStyleElement]] = js.native
  @JSName("contains")
  def contains_style(selector: style, text: js.RegExp): Chainable[JQuery[HTMLStyleElement]] = js.native
  @JSName("contains")
  def contains_style(selector: style, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLStyleElement]] = js.native
  @JSName("contains")
  def contains_style(selector: style, text: Double): Chainable[JQuery[HTMLStyleElement]] = js.native
  @JSName("contains")
  def contains_style(selector: style, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLStyleElement]] = js.native
  @JSName("contains")
  def contains_sub(selector: sub, text: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_sub(selector: sub, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_sub(selector: sub, text: js.RegExp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_sub(selector: sub, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_sub(selector: sub, text: Double): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_sub(selector: sub, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_summary(selector: summary, text: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_summary(selector: summary, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_summary(selector: summary, text: js.RegExp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_summary(selector: summary, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_summary(selector: summary, text: Double): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_summary(selector: summary, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_sup(selector: sup, text: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_sup(selector: sup, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_sup(selector: sup, text: js.RegExp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_sup(selector: sup, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_sup(selector: sup, text: Double): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_sup(selector: sup, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_table(selector: table, text: String): Chainable[JQuery[HTMLTableElement]] = js.native
  @JSName("contains")
  def contains_table(selector: table, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLTableElement]] = js.native
  @JSName("contains")
  def contains_table(selector: table, text: js.RegExp): Chainable[JQuery[HTMLTableElement]] = js.native
  @JSName("contains")
  def contains_table(selector: table, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLTableElement]] = js.native
  @JSName("contains")
  def contains_table(selector: table, text: Double): Chainable[JQuery[HTMLTableElement]] = js.native
  @JSName("contains")
  def contains_table(selector: table, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLTableElement]] = js.native
  @JSName("contains")
  def contains_tbody(selector: tbody, text: String): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("contains")
  def contains_tbody(selector: tbody, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("contains")
  def contains_tbody(selector: tbody, text: js.RegExp): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("contains")
  def contains_tbody(selector: tbody, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("contains")
  def contains_tbody(selector: tbody, text: Double): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("contains")
  def contains_tbody(selector: tbody, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("contains")
  def contains_td(selector: td, text: String): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("contains")
  def contains_td(selector: td, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("contains")
  def contains_td(selector: td, text: js.RegExp): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("contains")
  def contains_td(selector: td, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("contains")
  def contains_td(selector: td, text: Double): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("contains")
  def contains_td(selector: td, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("contains")
  def contains_template(selector: template, text: String): Chainable[JQuery[HTMLTemplateElement]] = js.native
  @JSName("contains")
  def contains_template(selector: template, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLTemplateElement]] = js.native
  @JSName("contains")
  def contains_template(selector: template, text: js.RegExp): Chainable[JQuery[HTMLTemplateElement]] = js.native
  @JSName("contains")
  def contains_template(selector: template, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLTemplateElement]] = js.native
  @JSName("contains")
  def contains_template(selector: template, text: Double): Chainable[JQuery[HTMLTemplateElement]] = js.native
  @JSName("contains")
  def contains_template(selector: template, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLTemplateElement]] = js.native
  @JSName("contains")
  def contains_textarea(selector: textarea, text: String): Chainable[JQuery[HTMLTextAreaElement]] = js.native
  @JSName("contains")
  def contains_textarea(selector: textarea, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLTextAreaElement]] = js.native
  @JSName("contains")
  def contains_textarea(selector: textarea, text: js.RegExp): Chainable[JQuery[HTMLTextAreaElement]] = js.native
  @JSName("contains")
  def contains_textarea(selector: textarea, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLTextAreaElement]] = js.native
  @JSName("contains")
  def contains_textarea(selector: textarea, text: Double): Chainable[JQuery[HTMLTextAreaElement]] = js.native
  @JSName("contains")
  def contains_textarea(selector: textarea, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLTextAreaElement]] = js.native
  @JSName("contains")
  def contains_tfoot(selector: tfoot, text: String): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("contains")
  def contains_tfoot(selector: tfoot, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("contains")
  def contains_tfoot(selector: tfoot, text: js.RegExp): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("contains")
  def contains_tfoot(selector: tfoot, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("contains")
  def contains_tfoot(selector: tfoot, text: Double): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("contains")
  def contains_tfoot(selector: tfoot, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("contains")
  def contains_th(selector: th, text: String): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("contains")
  def contains_th(selector: th, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("contains")
  def contains_th(selector: th, text: js.RegExp): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("contains")
  def contains_th(selector: th, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("contains")
  def contains_th(selector: th, text: Double): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("contains")
  def contains_th(selector: th, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("contains")
  def contains_thead(selector: thead, text: String): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("contains")
  def contains_thead(selector: thead, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("contains")
  def contains_thead(selector: thead, text: js.RegExp): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("contains")
  def contains_thead(selector: thead, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("contains")
  def contains_thead(selector: thead, text: Double): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("contains")
  def contains_thead(selector: thead, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("contains")
  def contains_time(selector: time, text: String): Chainable[JQuery[HTMLTimeElement]] = js.native
  @JSName("contains")
  def contains_time(selector: time, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLTimeElement]] = js.native
  @JSName("contains")
  def contains_time(selector: time, text: js.RegExp): Chainable[JQuery[HTMLTimeElement]] = js.native
  @JSName("contains")
  def contains_time(selector: time, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLTimeElement]] = js.native
  @JSName("contains")
  def contains_time(selector: time, text: Double): Chainable[JQuery[HTMLTimeElement]] = js.native
  @JSName("contains")
  def contains_time(selector: time, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLTimeElement]] = js.native
  @JSName("contains")
  def contains_title(selector: title, text: String): Chainable[JQuery[HTMLTitleElement]] = js.native
  @JSName("contains")
  def contains_title(selector: title, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLTitleElement]] = js.native
  @JSName("contains")
  def contains_title(selector: title, text: js.RegExp): Chainable[JQuery[HTMLTitleElement]] = js.native
  @JSName("contains")
  def contains_title(selector: title, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLTitleElement]] = js.native
  @JSName("contains")
  def contains_title(selector: title, text: Double): Chainable[JQuery[HTMLTitleElement]] = js.native
  @JSName("contains")
  def contains_title(selector: title, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLTitleElement]] = js.native
  @JSName("contains")
  def contains_tr(selector: tr, text: String): Chainable[JQuery[HTMLTableRowElement]] = js.native
  @JSName("contains")
  def contains_tr(selector: tr, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLTableRowElement]] = js.native
  @JSName("contains")
  def contains_tr(selector: tr, text: js.RegExp): Chainable[JQuery[HTMLTableRowElement]] = js.native
  @JSName("contains")
  def contains_tr(selector: tr, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLTableRowElement]] = js.native
  @JSName("contains")
  def contains_tr(selector: tr, text: Double): Chainable[JQuery[HTMLTableRowElement]] = js.native
  @JSName("contains")
  def contains_tr(selector: tr, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLTableRowElement]] = js.native
  @JSName("contains")
  def contains_track(selector: track, text: String): Chainable[JQuery[HTMLTrackElement]] = js.native
  @JSName("contains")
  def contains_track(selector: track, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLTrackElement]] = js.native
  @JSName("contains")
  def contains_track(selector: track, text: js.RegExp): Chainable[JQuery[HTMLTrackElement]] = js.native
  @JSName("contains")
  def contains_track(selector: track, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLTrackElement]] = js.native
  @JSName("contains")
  def contains_track(selector: track, text: Double): Chainable[JQuery[HTMLTrackElement]] = js.native
  @JSName("contains")
  def contains_track(selector: track, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLTrackElement]] = js.native
  @JSName("contains")
  def contains_u(selector: u, text: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_u(selector: u, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_u(selector: u, text: js.RegExp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_u(selector: u, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_u(selector: u, text: Double): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_u(selector: u, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_ul(selector: ul, text: String): Chainable[JQuery[HTMLUListElement]] = js.native
  @JSName("contains")
  def contains_ul(selector: ul, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLUListElement]] = js.native
  @JSName("contains")
  def contains_ul(selector: ul, text: js.RegExp): Chainable[JQuery[HTMLUListElement]] = js.native
  @JSName("contains")
  def contains_ul(selector: ul, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLUListElement]] = js.native
  @JSName("contains")
  def contains_ul(selector: ul, text: Double): Chainable[JQuery[HTMLUListElement]] = js.native
  @JSName("contains")
  def contains_ul(selector: ul, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLUListElement]] = js.native
  @JSName("contains")
  def contains_var(selector: `var`, text: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_var(selector: `var`, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_var(selector: `var`, text: js.RegExp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_var(selector: `var`, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_var(selector: `var`, text: Double): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_var(selector: `var`, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_video(selector: video, text: String): Chainable[JQuery[HTMLVideoElement]] = js.native
  @JSName("contains")
  def contains_video(selector: video, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLVideoElement]] = js.native
  @JSName("contains")
  def contains_video(selector: video, text: js.RegExp): Chainable[JQuery[HTMLVideoElement]] = js.native
  @JSName("contains")
  def contains_video(selector: video, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLVideoElement]] = js.native
  @JSName("contains")
  def contains_video(selector: video, text: Double): Chainable[JQuery[HTMLVideoElement]] = js.native
  @JSName("contains")
  def contains_video(selector: video, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLVideoElement]] = js.native
  @JSName("contains")
  def contains_wbr(selector: wbr, text: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_wbr(selector: wbr, text: String, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_wbr(selector: wbr, text: js.RegExp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_wbr(selector: wbr, text: js.RegExp, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_wbr(selector: wbr, text: Double): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("contains")
  def contains_wbr(selector: wbr, text: Double, options: PartialLoggableTimeoutablIncludeShadowDom): Chainable[JQuery[HTMLElement]] = js.native
  
  /**
    * Double-click a DOM element.
    *
    * @see https://on.cypress.io/dblclick
    */
  def dblclick(): Chainable[Subject] = js.native
  def dblclick(options: PartialClickOptions): Chainable[Subject] = js.native
  /**
    * Double-click a DOM element at specific corner / side.
    *
    * @param {PositionType} position - The position where the click should be issued.
    * The `center` position is the default position.
    * @see https://on.cypress.io/dblclick
    * @example
    *    cy.get('button').dblclick('topRight')
    */
  def dblclick(position: PositionType): Chainable[Subject] = js.native
  def dblclick(position: PositionType, options: PartialClickOptions): Chainable[Subject] = js.native
  /**
    * Double-click a DOM element at specific coordinates
    *
    * @param {number} x The distance in pixels from the element's left to issue the click.
    * @param {number} y The distance in pixels from the element's top to issue the click.
    * @see https://on.cypress.io/dblclick
    * @example
    ```
    // The click below will be issued inside of the element
    // (15px from the left and 40px from the top).
    cy.get('button').dblclick(15, 40)
    ```
    */
  def dblclick(x: Double, y: Double): Chainable[Subject] = js.native
  def dblclick(x: Double, y: Double, options: PartialClickOptions): Chainable[Subject] = js.native
  
  /**
    * Set a debugger and log what the previous command yields.
    *
    * @see https://on.cypress.io/debug
    */
  def debug(): Chainable[Subject] = js.native
  def debug(options: PartialLoggable): Chainable[Subject] = js.native
  
  /**
    * Get the window.document of the page that is currently active.
    *
    * @see https://on.cypress.io/document
    * @example
    *    cy.document()
    *      .its('contentType')
    *      .should('eq', 'text/html')
    */
  def document(): Chainable[Document] = js.native
  def document(options: PartialLoggableTimeoutabl): Chainable[Document] = js.native
  
  // Can't properly infer type without breaking down Chainable
  def each(fn: js.Function3[/* item */ Any, /* index */ Double, /* $list */ js.Array[Any], Unit]): Chainable[Subject] = js.native
  /**
    * Iterate through an array like structure (arrays or objects with a length property).
    *
    * @see https://on.cypress.io/each
    */
  @JSName("each")
  def each_E[E /* <: Node */](fn: js.Function3[/* element */ JQuery[E], /* index */ Double, /* $list */ js.Array[E], Unit]): Chainable[JQuery[E]] = js.native
  
  /**
    * End a chain of commands
    *
    * @see https://on.cypress.io/end
    */
  def end(): Chainable[Null] = js.native
  
  /**
    * Get A DOM element at a specific index in an array of elements.
    *
    * @see https://on.cypress.io/eq
    * @param {Number} index A number indicating the index to find the element at within an array of elements. A negative number counts index from the end of the list.
    * @example
    *    cy.get('tbody>tr').eq(0)    // Yield first 'tr' in 'tbody'
    *    cy.get('ul>li').eq('4')     // Yield fifth 'li' in 'ul'
    *    cy.get('li').eq(-2) // Yields second from last 'li' element
    */
  def eq[E /* <: Node */](index: Double): Chainable[JQuery[E]] = js.native
  def eq[E /* <: Node */](index: Double, options: PartialLoggableTimeoutabl): Chainable[JQuery[E]] = js.native
  
  /**
    * Execute a system command.
    * @see https://on.cypress.io/exec
    */
  def exec(command: String): Chainable[Exec] = js.native
  def exec(command: String, options: PartialExecOptions): Chainable[Exec] = js.native
  
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  def filter[E /* <: Node */](fn: js.Function2[/* index */ Double, /* element */ E, Boolean]): Chainable[JQuery[E]] = js.native
  def filter[E /* <: Node */](fn: js.Function2[/* index */ Double, /* element */ E, Boolean], options: PartialLoggableTimeoutabl): Chainable[JQuery[E]] = js.native
  // automatically returns the correct HTMLElement type
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  def filter[E /* <: Node */](selector: String): Chainable[JQuery[E]] = js.native
  def filter[E /* <: Node */](selector: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[E]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_a(selector: a): Chainable[JQuery[HTMLAnchorElement]] = js.native
  @JSName("filter")
  def filter_a(selector: a, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLAnchorElement]] = js.native
  @JSName("filter")
  def filter_abbr(selector: abbr): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_abbr(selector: abbr, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_address(selector: address): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_address(selector: address, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_area(selector: area): Chainable[JQuery[HTMLAreaElement]] = js.native
  @JSName("filter")
  def filter_area(selector: area, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLAreaElement]] = js.native
  @JSName("filter")
  def filter_article(selector: article): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_article(selector: article, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_aside(selector: aside): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_aside(selector: aside, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_audio(selector: audio): Chainable[JQuery[HTMLAudioElement]] = js.native
  @JSName("filter")
  def filter_audio(selector: audio, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLAudioElement]] = js.native
  @JSName("filter")
  def filter_b(selector: b): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_b(selector: b, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_base(selector: base_): Chainable[JQuery[HTMLBaseElement]] = js.native
  @JSName("filter")
  def filter_base(selector: base_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLBaseElement]] = js.native
  @JSName("filter")
  def filter_bdi(selector: bdi): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_bdi(selector: bdi, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_bdo(selector: bdo): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_bdo(selector: bdo, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_blockquote(selector: blockquote): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("filter")
  def filter_blockquote(selector: blockquote, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("filter")
  def filter_body(selector: body): Chainable[JQuery[HTMLBodyElement]] = js.native
  @JSName("filter")
  def filter_body(selector: body, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLBodyElement]] = js.native
  @JSName("filter")
  def filter_br(selector: br): Chainable[JQuery[HTMLBRElement]] = js.native
  @JSName("filter")
  def filter_br(selector: br, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLBRElement]] = js.native
  @JSName("filter")
  def filter_button(selector: button): Chainable[JQuery[HTMLButtonElement]] = js.native
  @JSName("filter")
  def filter_button(selector: button, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLButtonElement]] = js.native
  @JSName("filter")
  def filter_canvas(selector: canvas): Chainable[JQuery[HTMLCanvasElement]] = js.native
  @JSName("filter")
  def filter_canvas(selector: canvas, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLCanvasElement]] = js.native
  @JSName("filter")
  def filter_caption(selector: caption): Chainable[JQuery[HTMLTableCaptionElement]] = js.native
  @JSName("filter")
  def filter_caption(selector: caption, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableCaptionElement]] = js.native
  @JSName("filter")
  def filter_cite(selector: cite): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_cite(selector: cite, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_code(selector: code): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_code(selector: code, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_col(selector: col): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("filter")
  def filter_col(selector: col, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("filter")
  def filter_colgroup(selector: colgroup): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("filter")
  def filter_colgroup(selector: colgroup, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("filter")
  def filter_data(selector: data): Chainable[JQuery[HTMLDataElement]] = js.native
  @JSName("filter")
  def filter_data(selector: data, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDataElement]] = js.native
  @JSName("filter")
  def filter_datalist(selector: datalist): Chainable[JQuery[HTMLDataListElement]] = js.native
  @JSName("filter")
  def filter_datalist(selector: datalist, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDataListElement]] = js.native
  @JSName("filter")
  def filter_dd(selector: dd): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_dd(selector: dd, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_del(selector: del): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("filter")
  def filter_del(selector: del, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("filter")
  def filter_details(selector: details): Chainable[JQuery[HTMLDetailsElement]] = js.native
  @JSName("filter")
  def filter_details(selector: details, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDetailsElement]] = js.native
  @JSName("filter")
  def filter_dfn(selector: dfn): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_dfn(selector: dfn, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_dialog(selector: dialog): Chainable[JQuery[HTMLDialogElement]] = js.native
  @JSName("filter")
  def filter_dialog(selector: dialog, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDialogElement]] = js.native
  @JSName("filter")
  def filter_div(selector: div): Chainable[JQuery[HTMLDivElement]] = js.native
  @JSName("filter")
  def filter_div(selector: div, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDivElement]] = js.native
  @JSName("filter")
  def filter_dl(selector: dl): Chainable[JQuery[HTMLDListElement]] = js.native
  @JSName("filter")
  def filter_dl(selector: dl, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDListElement]] = js.native
  @JSName("filter")
  def filter_dt(selector: dt): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_dt(selector: dt, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_em(selector: em): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_em(selector: em, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_embed(selector: embed): Chainable[JQuery[HTMLEmbedElement]] = js.native
  @JSName("filter")
  def filter_embed(selector: embed, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLEmbedElement]] = js.native
  @JSName("filter")
  def filter_fieldset(selector: fieldset): Chainable[JQuery[HTMLFieldSetElement]] = js.native
  @JSName("filter")
  def filter_fieldset(selector: fieldset, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLFieldSetElement]] = js.native
  @JSName("filter")
  def filter_figcaption(selector: figcaption): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_figcaption(selector: figcaption, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_figure(selector: figure): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_figure(selector: figure, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_footer(selector: footer): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_footer(selector: footer, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_form(selector: form): Chainable[JQuery[HTMLFormElement]] = js.native
  @JSName("filter")
  def filter_form(selector: form, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLFormElement]] = js.native
  @JSName("filter")
  def filter_h1(selector: h1): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("filter")
  def filter_h1(selector: h1, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("filter")
  def filter_h2(selector: h2): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("filter")
  def filter_h2(selector: h2, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("filter")
  def filter_h3(selector: h3): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("filter")
  def filter_h3(selector: h3, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("filter")
  def filter_h4(selector: h4): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("filter")
  def filter_h4(selector: h4, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("filter")
  def filter_h5(selector: h5): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("filter")
  def filter_h5(selector: h5, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("filter")
  def filter_h6(selector: h6): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("filter")
  def filter_h6(selector: h6, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("filter")
  def filter_head(selector: head_): Chainable[JQuery[HTMLHeadElement]] = js.native
  @JSName("filter")
  def filter_head(selector: head_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadElement]] = js.native
  @JSName("filter")
  def filter_header(selector: header): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_header(selector: header, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_hgroup(selector: hgroup): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_hgroup(selector: hgroup, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_hr(selector: hr): Chainable[JQuery[HTMLHRElement]] = js.native
  @JSName("filter")
  def filter_hr(selector: hr, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHRElement]] = js.native
  @JSName("filter")
  def filter_html(selector: html_): Chainable[JQuery[HTMLHtmlElement]] = js.native
  @JSName("filter")
  def filter_html(selector: html_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHtmlElement]] = js.native
  @JSName("filter")
  def filter_i(selector: i): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_i(selector: i, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_iframe(selector: iframe): Chainable[JQuery[HTMLIFrameElement]] = js.native
  @JSName("filter")
  def filter_iframe(selector: iframe, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLIFrameElement]] = js.native
  @JSName("filter")
  def filter_img(selector: img): Chainable[JQuery[HTMLImageElement]] = js.native
  @JSName("filter")
  def filter_img(selector: img, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLImageElement]] = js.native
  @JSName("filter")
  def filter_input(selector: input): Chainable[JQuery[HTMLInputElement]] = js.native
  @JSName("filter")
  def filter_input(selector: input, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLInputElement]] = js.native
  @JSName("filter")
  def filter_ins(selector: ins): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("filter")
  def filter_ins(selector: ins, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("filter")
  def filter_kbd(selector: kbd): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_kbd(selector: kbd, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_label(selector: label): Chainable[JQuery[HTMLLabelElement]] = js.native
  @JSName("filter")
  def filter_label(selector: label, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLabelElement]] = js.native
  @JSName("filter")
  def filter_legend(selector: legend): Chainable[JQuery[HTMLLegendElement]] = js.native
  @JSName("filter")
  def filter_legend(selector: legend, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLegendElement]] = js.native
  @JSName("filter")
  def filter_li(selector: li): Chainable[JQuery[HTMLLIElement]] = js.native
  @JSName("filter")
  def filter_li(selector: li, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLIElement]] = js.native
  @JSName("filter")
  def filter_link(selector: link_): Chainable[JQuery[HTMLLinkElement]] = js.native
  @JSName("filter")
  def filter_link(selector: link_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLinkElement]] = js.native
  @JSName("filter")
  def filter_main(selector: main): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_main(selector: main, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_map(selector: map): Chainable[JQuery[HTMLMapElement]] = js.native
  @JSName("filter")
  def filter_map(selector: map, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMapElement]] = js.native
  @JSName("filter")
  def filter_mark(selector: mark): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_mark(selector: mark, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_menu(selector: menu): Chainable[JQuery[HTMLMenuElement]] = js.native
  @JSName("filter")
  def filter_menu(selector: menu, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMenuElement]] = js.native
  @JSName("filter")
  def filter_meta(selector: meta): Chainable[JQuery[HTMLMetaElement]] = js.native
  @JSName("filter")
  def filter_meta(selector: meta, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMetaElement]] = js.native
  @JSName("filter")
  def filter_meter(selector: meter): Chainable[JQuery[HTMLMeterElement]] = js.native
  @JSName("filter")
  def filter_meter(selector: meter, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMeterElement]] = js.native
  @JSName("filter")
  def filter_nav(selector: nav): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_nav(selector: nav, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_noscript(selector: noscript): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_noscript(selector: noscript, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_object(selector: object_): Chainable[JQuery[HTMLObjectElement]] = js.native
  @JSName("filter")
  def filter_object(selector: object_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLObjectElement]] = js.native
  @JSName("filter")
  def filter_ol(selector: ol): Chainable[JQuery[HTMLOListElement]] = js.native
  @JSName("filter")
  def filter_ol(selector: ol, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOListElement]] = js.native
  @JSName("filter")
  def filter_optgroup(selector: optgroup): Chainable[JQuery[HTMLOptGroupElement]] = js.native
  @JSName("filter")
  def filter_optgroup(selector: optgroup, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOptGroupElement]] = js.native
  @JSName("filter")
  def filter_option(selector: option): Chainable[JQuery[HTMLOptionElement]] = js.native
  @JSName("filter")
  def filter_option(selector: option, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOptionElement]] = js.native
  @JSName("filter")
  def filter_output(selector: output): Chainable[JQuery[HTMLOutputElement]] = js.native
  @JSName("filter")
  def filter_output(selector: output, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOutputElement]] = js.native
  @JSName("filter")
  def filter_p(selector: p): Chainable[JQuery[HTMLParagraphElement]] = js.native
  @JSName("filter")
  def filter_p(selector: p, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLParagraphElement]] = js.native
  @JSName("filter")
  def filter_picture(selector: picture): Chainable[JQuery[HTMLPictureElement]] = js.native
  @JSName("filter")
  def filter_picture(selector: picture, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLPictureElement]] = js.native
  @JSName("filter")
  def filter_pre(selector: pre): Chainable[JQuery[HTMLPreElement]] = js.native
  @JSName("filter")
  def filter_pre(selector: pre, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLPreElement]] = js.native
  @JSName("filter")
  def filter_progress(selector: progress_): Chainable[JQuery[HTMLProgressElement]] = js.native
  @JSName("filter")
  def filter_progress(selector: progress_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLProgressElement]] = js.native
  @JSName("filter")
  def filter_q(selector: q): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("filter")
  def filter_q(selector: q, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("filter")
  def filter_rp(selector: rp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_rp(selector: rp, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_rt(selector: rt): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_rt(selector: rt, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_ruby(selector: ruby): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_ruby(selector: ruby, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_s(selector: s): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_s(selector: s, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_samp(selector: samp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_samp(selector: samp, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_script(selector: script): Chainable[JQuery[HTMLScriptElement]] = js.native
  @JSName("filter")
  def filter_script(selector: script, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLScriptElement]] = js.native
  @JSName("filter")
  def filter_section(selector: section): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_section(selector: section, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_select(selector: select): Chainable[JQuery[HTMLSelectElement]] = js.native
  @JSName("filter")
  def filter_select(selector: select, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSelectElement]] = js.native
  @JSName("filter")
  def filter_slot(selector: slot): Chainable[JQuery[HTMLSlotElement]] = js.native
  @JSName("filter")
  def filter_slot(selector: slot, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSlotElement]] = js.native
  @JSName("filter")
  def filter_small(selector: small): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_small(selector: small, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_source(selector: source_): Chainable[JQuery[HTMLSourceElement]] = js.native
  @JSName("filter")
  def filter_source(selector: source_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSourceElement]] = js.native
  @JSName("filter")
  def filter_span(selector: span): Chainable[JQuery[HTMLSpanElement]] = js.native
  @JSName("filter")
  def filter_span(selector: span, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSpanElement]] = js.native
  @JSName("filter")
  def filter_strong(selector: strong): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_strong(selector: strong, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_style(selector: style): Chainable[JQuery[HTMLStyleElement]] = js.native
  @JSName("filter")
  def filter_style(selector: style, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLStyleElement]] = js.native
  @JSName("filter")
  def filter_sub(selector: sub): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_sub(selector: sub, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_summary(selector: summary): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_summary(selector: summary, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_sup(selector: sup): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_sup(selector: sup, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_table(selector: table): Chainable[JQuery[HTMLTableElement]] = js.native
  @JSName("filter")
  def filter_table(selector: table, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableElement]] = js.native
  @JSName("filter")
  def filter_tbody(selector: tbody): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("filter")
  def filter_tbody(selector: tbody, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("filter")
  def filter_td(selector: td): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("filter")
  def filter_td(selector: td, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("filter")
  def filter_template(selector: template): Chainable[JQuery[HTMLTemplateElement]] = js.native
  @JSName("filter")
  def filter_template(selector: template, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTemplateElement]] = js.native
  @JSName("filter")
  def filter_textarea(selector: textarea): Chainable[JQuery[HTMLTextAreaElement]] = js.native
  @JSName("filter")
  def filter_textarea(selector: textarea, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTextAreaElement]] = js.native
  @JSName("filter")
  def filter_tfoot(selector: tfoot): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("filter")
  def filter_tfoot(selector: tfoot, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("filter")
  def filter_th(selector: th): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("filter")
  def filter_th(selector: th, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("filter")
  def filter_thead(selector: thead): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("filter")
  def filter_thead(selector: thead, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("filter")
  def filter_time(selector: time): Chainable[JQuery[HTMLTimeElement]] = js.native
  @JSName("filter")
  def filter_time(selector: time, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTimeElement]] = js.native
  @JSName("filter")
  def filter_title(selector: title): Chainable[JQuery[HTMLTitleElement]] = js.native
  @JSName("filter")
  def filter_title(selector: title, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTitleElement]] = js.native
  @JSName("filter")
  def filter_tr(selector: tr): Chainable[JQuery[HTMLTableRowElement]] = js.native
  @JSName("filter")
  def filter_tr(selector: tr, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableRowElement]] = js.native
  @JSName("filter")
  def filter_track(selector: track): Chainable[JQuery[HTMLTrackElement]] = js.native
  @JSName("filter")
  def filter_track(selector: track, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTrackElement]] = js.native
  @JSName("filter")
  def filter_u(selector: u): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_u(selector: u, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_ul(selector: ul): Chainable[JQuery[HTMLUListElement]] = js.native
  @JSName("filter")
  def filter_ul(selector: ul, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLUListElement]] = js.native
  @JSName("filter")
  def filter_var(selector: `var`): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_var(selector: `var`, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_video(selector: video): Chainable[JQuery[HTMLVideoElement]] = js.native
  @JSName("filter")
  def filter_video(selector: video, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLVideoElement]] = js.native
  @JSName("filter")
  def filter_wbr(selector: wbr): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("filter")
  def filter_wbr(selector: wbr, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  
  /**
    * Finds the descendent DOM elements with the given selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    // Find the li's within the nav
    *    cy.get('.left-nav>.nav').find('>li')
    */
  def find[E /* <: Node */](selector: String): Chainable[JQuery[E]] = js.native
  def find[E /* <: Node */](selector: String, options: PartialLoggableTimeoutablLog): Chainable[JQuery[E]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_a(selector: a): Chainable[JQuery[HTMLAnchorElement]] = js.native
  @JSName("find")
  def find_a(selector: a, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLAnchorElement]] = js.native
  @JSName("find")
  def find_abbr(selector: abbr): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_abbr(selector: abbr, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_address(selector: address): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_address(selector: address, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_area(selector: area): Chainable[JQuery[HTMLAreaElement]] = js.native
  @JSName("find")
  def find_area(selector: area, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLAreaElement]] = js.native
  @JSName("find")
  def find_article(selector: article): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_article(selector: article, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_aside(selector: aside): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_aside(selector: aside, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_audio(selector: audio): Chainable[JQuery[HTMLAudioElement]] = js.native
  @JSName("find")
  def find_audio(selector: audio, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLAudioElement]] = js.native
  @JSName("find")
  def find_b(selector: b): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_b(selector: b, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_base(selector: base_): Chainable[JQuery[HTMLBaseElement]] = js.native
  @JSName("find")
  def find_base(selector: base_, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLBaseElement]] = js.native
  @JSName("find")
  def find_bdi(selector: bdi): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_bdi(selector: bdi, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_bdo(selector: bdo): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_bdo(selector: bdo, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_blockquote(selector: blockquote): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("find")
  def find_blockquote(selector: blockquote, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("find")
  def find_body(selector: body): Chainable[JQuery[HTMLBodyElement]] = js.native
  @JSName("find")
  def find_body(selector: body, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLBodyElement]] = js.native
  @JSName("find")
  def find_br(selector: br): Chainable[JQuery[HTMLBRElement]] = js.native
  @JSName("find")
  def find_br(selector: br, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLBRElement]] = js.native
  @JSName("find")
  def find_button(selector: button): Chainable[JQuery[HTMLButtonElement]] = js.native
  @JSName("find")
  def find_button(selector: button, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLButtonElement]] = js.native
  @JSName("find")
  def find_canvas(selector: canvas): Chainable[JQuery[HTMLCanvasElement]] = js.native
  @JSName("find")
  def find_canvas(selector: canvas, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLCanvasElement]] = js.native
  @JSName("find")
  def find_caption(selector: caption): Chainable[JQuery[HTMLTableCaptionElement]] = js.native
  @JSName("find")
  def find_caption(selector: caption, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLTableCaptionElement]] = js.native
  @JSName("find")
  def find_cite(selector: cite): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_cite(selector: cite, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_code(selector: code): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_code(selector: code, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_col(selector: col): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("find")
  def find_col(selector: col, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("find")
  def find_colgroup(selector: colgroup): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("find")
  def find_colgroup(selector: colgroup, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("find")
  def find_data(selector: data): Chainable[JQuery[HTMLDataElement]] = js.native
  @JSName("find")
  def find_data(selector: data, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLDataElement]] = js.native
  @JSName("find")
  def find_datalist(selector: datalist): Chainable[JQuery[HTMLDataListElement]] = js.native
  @JSName("find")
  def find_datalist(selector: datalist, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLDataListElement]] = js.native
  @JSName("find")
  def find_dd(selector: dd): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_dd(selector: dd, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_del(selector: del): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("find")
  def find_del(selector: del, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("find")
  def find_details(selector: details): Chainable[JQuery[HTMLDetailsElement]] = js.native
  @JSName("find")
  def find_details(selector: details, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLDetailsElement]] = js.native
  @JSName("find")
  def find_dfn(selector: dfn): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_dfn(selector: dfn, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_dialog(selector: dialog): Chainable[JQuery[HTMLDialogElement]] = js.native
  @JSName("find")
  def find_dialog(selector: dialog, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLDialogElement]] = js.native
  @JSName("find")
  def find_div(selector: div): Chainable[JQuery[HTMLDivElement]] = js.native
  @JSName("find")
  def find_div(selector: div, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLDivElement]] = js.native
  @JSName("find")
  def find_dl(selector: dl): Chainable[JQuery[HTMLDListElement]] = js.native
  @JSName("find")
  def find_dl(selector: dl, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLDListElement]] = js.native
  @JSName("find")
  def find_dt(selector: dt): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_dt(selector: dt, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_em(selector: em): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_em(selector: em, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_embed(selector: embed): Chainable[JQuery[HTMLEmbedElement]] = js.native
  @JSName("find")
  def find_embed(selector: embed, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLEmbedElement]] = js.native
  @JSName("find")
  def find_fieldset(selector: fieldset): Chainable[JQuery[HTMLFieldSetElement]] = js.native
  @JSName("find")
  def find_fieldset(selector: fieldset, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLFieldSetElement]] = js.native
  @JSName("find")
  def find_figcaption(selector: figcaption): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_figcaption(selector: figcaption, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_figure(selector: figure): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_figure(selector: figure, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_footer(selector: footer): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_footer(selector: footer, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_form(selector: form): Chainable[JQuery[HTMLFormElement]] = js.native
  @JSName("find")
  def find_form(selector: form, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLFormElement]] = js.native
  @JSName("find")
  def find_h1(selector: h1): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("find")
  def find_h1(selector: h1, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("find")
  def find_h2(selector: h2): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("find")
  def find_h2(selector: h2, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("find")
  def find_h3(selector: h3): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("find")
  def find_h3(selector: h3, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("find")
  def find_h4(selector: h4): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("find")
  def find_h4(selector: h4, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("find")
  def find_h5(selector: h5): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("find")
  def find_h5(selector: h5, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("find")
  def find_h6(selector: h6): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("find")
  def find_h6(selector: h6, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("find")
  def find_head(selector: head_): Chainable[JQuery[HTMLHeadElement]] = js.native
  @JSName("find")
  def find_head(selector: head_, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLHeadElement]] = js.native
  @JSName("find")
  def find_header(selector: header): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_header(selector: header, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_hgroup(selector: hgroup): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_hgroup(selector: hgroup, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_hr(selector: hr): Chainable[JQuery[HTMLHRElement]] = js.native
  @JSName("find")
  def find_hr(selector: hr, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLHRElement]] = js.native
  @JSName("find")
  def find_html(selector: html_): Chainable[JQuery[HTMLHtmlElement]] = js.native
  @JSName("find")
  def find_html(selector: html_, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLHtmlElement]] = js.native
  @JSName("find")
  def find_i(selector: i): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_i(selector: i, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_iframe(selector: iframe): Chainable[JQuery[HTMLIFrameElement]] = js.native
  @JSName("find")
  def find_iframe(selector: iframe, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLIFrameElement]] = js.native
  @JSName("find")
  def find_img(selector: img): Chainable[JQuery[HTMLImageElement]] = js.native
  @JSName("find")
  def find_img(selector: img, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLImageElement]] = js.native
  @JSName("find")
  def find_input(selector: input): Chainable[JQuery[HTMLInputElement]] = js.native
  @JSName("find")
  def find_input(selector: input, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLInputElement]] = js.native
  @JSName("find")
  def find_ins(selector: ins): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("find")
  def find_ins(selector: ins, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("find")
  def find_kbd(selector: kbd): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_kbd(selector: kbd, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_label(selector: label): Chainable[JQuery[HTMLLabelElement]] = js.native
  @JSName("find")
  def find_label(selector: label, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLLabelElement]] = js.native
  @JSName("find")
  def find_legend(selector: legend): Chainable[JQuery[HTMLLegendElement]] = js.native
  @JSName("find")
  def find_legend(selector: legend, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLLegendElement]] = js.native
  @JSName("find")
  def find_li(selector: li): Chainable[JQuery[HTMLLIElement]] = js.native
  @JSName("find")
  def find_li(selector: li, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLLIElement]] = js.native
  @JSName("find")
  def find_link(selector: link_): Chainable[JQuery[HTMLLinkElement]] = js.native
  @JSName("find")
  def find_link(selector: link_, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLLinkElement]] = js.native
  @JSName("find")
  def find_main(selector: main): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_main(selector: main, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_map(selector: map): Chainable[JQuery[HTMLMapElement]] = js.native
  @JSName("find")
  def find_map(selector: map, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLMapElement]] = js.native
  @JSName("find")
  def find_mark(selector: mark): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_mark(selector: mark, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_menu(selector: menu): Chainable[JQuery[HTMLMenuElement]] = js.native
  @JSName("find")
  def find_menu(selector: menu, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLMenuElement]] = js.native
  @JSName("find")
  def find_meta(selector: meta): Chainable[JQuery[HTMLMetaElement]] = js.native
  @JSName("find")
  def find_meta(selector: meta, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLMetaElement]] = js.native
  @JSName("find")
  def find_meter(selector: meter): Chainable[JQuery[HTMLMeterElement]] = js.native
  @JSName("find")
  def find_meter(selector: meter, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLMeterElement]] = js.native
  @JSName("find")
  def find_nav(selector: nav): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_nav(selector: nav, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_noscript(selector: noscript): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_noscript(selector: noscript, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_object(selector: object_): Chainable[JQuery[HTMLObjectElement]] = js.native
  @JSName("find")
  def find_object(selector: object_, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLObjectElement]] = js.native
  @JSName("find")
  def find_ol(selector: ol): Chainable[JQuery[HTMLOListElement]] = js.native
  @JSName("find")
  def find_ol(selector: ol, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLOListElement]] = js.native
  @JSName("find")
  def find_optgroup(selector: optgroup): Chainable[JQuery[HTMLOptGroupElement]] = js.native
  @JSName("find")
  def find_optgroup(selector: optgroup, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLOptGroupElement]] = js.native
  @JSName("find")
  def find_option(selector: option): Chainable[JQuery[HTMLOptionElement]] = js.native
  @JSName("find")
  def find_option(selector: option, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLOptionElement]] = js.native
  @JSName("find")
  def find_output(selector: output): Chainable[JQuery[HTMLOutputElement]] = js.native
  @JSName("find")
  def find_output(selector: output, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLOutputElement]] = js.native
  @JSName("find")
  def find_p(selector: p): Chainable[JQuery[HTMLParagraphElement]] = js.native
  @JSName("find")
  def find_p(selector: p, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLParagraphElement]] = js.native
  @JSName("find")
  def find_picture(selector: picture): Chainable[JQuery[HTMLPictureElement]] = js.native
  @JSName("find")
  def find_picture(selector: picture, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLPictureElement]] = js.native
  @JSName("find")
  def find_pre(selector: pre): Chainable[JQuery[HTMLPreElement]] = js.native
  @JSName("find")
  def find_pre(selector: pre, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLPreElement]] = js.native
  @JSName("find")
  def find_progress(selector: progress_): Chainable[JQuery[HTMLProgressElement]] = js.native
  @JSName("find")
  def find_progress(selector: progress_, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLProgressElement]] = js.native
  @JSName("find")
  def find_q(selector: q): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("find")
  def find_q(selector: q, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("find")
  def find_rp(selector: rp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_rp(selector: rp, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_rt(selector: rt): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_rt(selector: rt, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_ruby(selector: ruby): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_ruby(selector: ruby, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_s(selector: s): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_s(selector: s, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_samp(selector: samp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_samp(selector: samp, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_script(selector: script): Chainable[JQuery[HTMLScriptElement]] = js.native
  @JSName("find")
  def find_script(selector: script, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLScriptElement]] = js.native
  @JSName("find")
  def find_section(selector: section): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_section(selector: section, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_select(selector: select): Chainable[JQuery[HTMLSelectElement]] = js.native
  @JSName("find")
  def find_select(selector: select, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLSelectElement]] = js.native
  @JSName("find")
  def find_slot(selector: slot): Chainable[JQuery[HTMLSlotElement]] = js.native
  @JSName("find")
  def find_slot(selector: slot, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLSlotElement]] = js.native
  @JSName("find")
  def find_small(selector: small): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_small(selector: small, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_source(selector: source_): Chainable[JQuery[HTMLSourceElement]] = js.native
  @JSName("find")
  def find_source(selector: source_, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLSourceElement]] = js.native
  @JSName("find")
  def find_span(selector: span): Chainable[JQuery[HTMLSpanElement]] = js.native
  @JSName("find")
  def find_span(selector: span, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLSpanElement]] = js.native
  @JSName("find")
  def find_strong(selector: strong): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_strong(selector: strong, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_style(selector: style): Chainable[JQuery[HTMLStyleElement]] = js.native
  @JSName("find")
  def find_style(selector: style, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLStyleElement]] = js.native
  @JSName("find")
  def find_sub(selector: sub): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_sub(selector: sub, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_summary(selector: summary): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_summary(selector: summary, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_sup(selector: sup): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_sup(selector: sup, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_table(selector: table): Chainable[JQuery[HTMLTableElement]] = js.native
  @JSName("find")
  def find_table(selector: table, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLTableElement]] = js.native
  @JSName("find")
  def find_tbody(selector: tbody): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("find")
  def find_tbody(selector: tbody, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("find")
  def find_td(selector: td): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("find")
  def find_td(selector: td, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("find")
  def find_template(selector: template): Chainable[JQuery[HTMLTemplateElement]] = js.native
  @JSName("find")
  def find_template(selector: template, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLTemplateElement]] = js.native
  @JSName("find")
  def find_textarea(selector: textarea): Chainable[JQuery[HTMLTextAreaElement]] = js.native
  @JSName("find")
  def find_textarea(selector: textarea, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLTextAreaElement]] = js.native
  @JSName("find")
  def find_tfoot(selector: tfoot): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("find")
  def find_tfoot(selector: tfoot, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("find")
  def find_th(selector: th): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("find")
  def find_th(selector: th, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("find")
  def find_thead(selector: thead): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("find")
  def find_thead(selector: thead, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("find")
  def find_time(selector: time): Chainable[JQuery[HTMLTimeElement]] = js.native
  @JSName("find")
  def find_time(selector: time, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLTimeElement]] = js.native
  @JSName("find")
  def find_title(selector: title): Chainable[JQuery[HTMLTitleElement]] = js.native
  @JSName("find")
  def find_title(selector: title, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLTitleElement]] = js.native
  @JSName("find")
  def find_tr(selector: tr): Chainable[JQuery[HTMLTableRowElement]] = js.native
  @JSName("find")
  def find_tr(selector: tr, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLTableRowElement]] = js.native
  @JSName("find")
  def find_track(selector: track): Chainable[JQuery[HTMLTrackElement]] = js.native
  @JSName("find")
  def find_track(selector: track, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLTrackElement]] = js.native
  @JSName("find")
  def find_u(selector: u): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_u(selector: u, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_ul(selector: ul): Chainable[JQuery[HTMLUListElement]] = js.native
  @JSName("find")
  def find_ul(selector: ul, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLUListElement]] = js.native
  @JSName("find")
  def find_var(selector: `var`): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_var(selector: `var`, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_video(selector: video): Chainable[JQuery[HTMLVideoElement]] = js.native
  @JSName("find")
  def find_video(selector: video, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLVideoElement]] = js.native
  @JSName("find")
  def find_wbr(selector: wbr): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("find")
  def find_wbr(selector: wbr, options: PartialLoggableTimeoutablLog): Chainable[JQuery[HTMLElement]] = js.native
  
  /**
    * Get the first DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/first
    */
  def first(): Chainable[Subject] = js.native
  def first(options: PartialLoggableTimeoutabl): Chainable[Subject] = js.native
  
  /**
    * Load a fixed set of data located in a file.
    *
    * @see https://on.cypress.io/fixture
    */
  def fixture[Contents](path: String): Chainable[Contents] = js.native
  // no log?
  /**
    * Load a fixed set of data located in a file with given encoding.
    *
    * @see https://on.cypress.io/fixture
    */
  def fixture[Contents](path: String, encoding: Encodings): Chainable[Contents] = js.native
  def fixture[Contents](path: String, encoding: Encodings, options: PartialTimeoutable): Chainable[Contents] = js.native
  def fixture[Contents](path: String, options: PartialTimeoutable): Chainable[Contents] = js.native
  
  // no log?
  /**
    * Focus on a DOM element.
    *
    * @see https://on.cypress.io/focus
    * @example
    * cy.get('input').first().focus() // Focus on the first input
    */
  def focus(): Chainable[Subject] = js.native
  def focus(options: PartialLoggableTimeoutabl): Chainable[Subject] = js.native
  
  /**
    * Get the DOM element that is currently focused.
    *
    * @see https://on.cypress.io/focused
    * @example
    *    // Get the element that is focused
    *    cy.focused().then(function($el) {
    *       // do something with $el
    *    })
    *    // Blur the element with focus
    *    cy.focused().blur()
    *    // Make an assertion on the focused element
    *    cy.focused().should('have.attr', 'name', 'username')
    */
  def focused(): Chainable[JQuery[HTMLElement]] = js.native
  def focused(options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  
  /**
    * Get one or more DOM elements by alias.
    * @see https://on.cypress.io/get#Alias
    * @example
    *    // Get the aliased 'todos' elements
    *    cy.get('ul#todos').as('todos')
    *    //...hack hack hack...
    *    //later retrieve the todos
    *    cy.get('@todos')
    */
  def get[S](alias: String): Chainable[S] = js.native
  def get[S](alias: String, options: PartialLoggableTimeoutablTimeout): Chainable[S] = js.native
  
  /**
    * Get a browser cookie by its name.
    *
    * @see https://on.cypress.io/getcookie
    */
  def getCookie(name: String): Chainable[Cookie | Null] = js.native
  def getCookie(name: String, options: PartialLoggableTimeoutabl): Chainable[Cookie | Null] = js.native
  
  /**
    * Get all of the browser cookies.
    *
    * @see https://on.cypress.io/getcookies
    */
  def getCookies(): Chainable[js.Array[Cookie]] = js.native
  def getCookies(options: PartialLoggableTimeoutabl): Chainable[js.Array[Cookie]] = js.native
  
  /**
    * Get one or more DOM elements by selector.
    * The querying behavior of this command matches exactly how $(…) works in jQuery.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('.list>li')    // Yield the <li>'s in <.list>
    *    cy.get('ul li:first').should('have.class', 'active')
    *    cy.get('.dropdown-menu').click()
    */
  @JSName("get")
  def get_E[E /* <: Node */](selector: String): Chainable[JQuery[E]] = js.native
  @JSName("get")
  def get_E[E /* <: Node */](selector: String, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[E]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_a(selector: a): Chainable[JQuery[HTMLAnchorElement]] = js.native
  @JSName("get")
  def get_a(selector: a, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLAnchorElement]] = js.native
  @JSName("get")
  def get_abbr(selector: abbr): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_abbr(selector: abbr, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_address(selector: address): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_address(selector: address, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_area(selector: area): Chainable[JQuery[HTMLAreaElement]] = js.native
  @JSName("get")
  def get_area(selector: area, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLAreaElement]] = js.native
  @JSName("get")
  def get_article(selector: article): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_article(selector: article, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_aside(selector: aside): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_aside(selector: aside, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_audio(selector: audio): Chainable[JQuery[HTMLAudioElement]] = js.native
  @JSName("get")
  def get_audio(selector: audio, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLAudioElement]] = js.native
  @JSName("get")
  def get_b(selector: b): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_b(selector: b, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_base(selector: base_): Chainable[JQuery[HTMLBaseElement]] = js.native
  @JSName("get")
  def get_base(selector: base_, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLBaseElement]] = js.native
  @JSName("get")
  def get_bdi(selector: bdi): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_bdi(selector: bdi, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_bdo(selector: bdo): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_bdo(selector: bdo, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_blockquote(selector: blockquote): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("get")
  def get_blockquote(selector: blockquote, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("get")
  def get_body(selector: body): Chainable[JQuery[HTMLBodyElement]] = js.native
  @JSName("get")
  def get_body(selector: body, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLBodyElement]] = js.native
  @JSName("get")
  def get_br(selector: br): Chainable[JQuery[HTMLBRElement]] = js.native
  @JSName("get")
  def get_br(selector: br, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLBRElement]] = js.native
  @JSName("get")
  def get_button(selector: button): Chainable[JQuery[HTMLButtonElement]] = js.native
  @JSName("get")
  def get_button(selector: button, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLButtonElement]] = js.native
  @JSName("get")
  def get_canvas(selector: canvas): Chainable[JQuery[HTMLCanvasElement]] = js.native
  @JSName("get")
  def get_canvas(selector: canvas, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLCanvasElement]] = js.native
  @JSName("get")
  def get_caption(selector: caption): Chainable[JQuery[HTMLTableCaptionElement]] = js.native
  @JSName("get")
  def get_caption(selector: caption, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLTableCaptionElement]] = js.native
  @JSName("get")
  def get_cite(selector: cite): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_cite(selector: cite, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_code(selector: code): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_code(selector: code, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_col(selector: col): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("get")
  def get_col(selector: col, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("get")
  def get_colgroup(selector: colgroup): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("get")
  def get_colgroup(selector: colgroup, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("get")
  def get_data(selector: data): Chainable[JQuery[HTMLDataElement]] = js.native
  @JSName("get")
  def get_data(selector: data, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLDataElement]] = js.native
  @JSName("get")
  def get_datalist(selector: datalist): Chainable[JQuery[HTMLDataListElement]] = js.native
  @JSName("get")
  def get_datalist(selector: datalist, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLDataListElement]] = js.native
  @JSName("get")
  def get_dd(selector: dd): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_dd(selector: dd, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_del(selector: del): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("get")
  def get_del(selector: del, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("get")
  def get_details(selector: details): Chainable[JQuery[HTMLDetailsElement]] = js.native
  @JSName("get")
  def get_details(selector: details, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLDetailsElement]] = js.native
  @JSName("get")
  def get_dfn(selector: dfn): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_dfn(selector: dfn, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_dialog(selector: dialog): Chainable[JQuery[HTMLDialogElement]] = js.native
  @JSName("get")
  def get_dialog(selector: dialog, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLDialogElement]] = js.native
  @JSName("get")
  def get_div(selector: div): Chainable[JQuery[HTMLDivElement]] = js.native
  @JSName("get")
  def get_div(selector: div, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLDivElement]] = js.native
  @JSName("get")
  def get_dl(selector: dl): Chainable[JQuery[HTMLDListElement]] = js.native
  @JSName("get")
  def get_dl(selector: dl, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLDListElement]] = js.native
  @JSName("get")
  def get_dt(selector: dt): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_dt(selector: dt, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_em(selector: em): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_em(selector: em, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_embed(selector: embed): Chainable[JQuery[HTMLEmbedElement]] = js.native
  @JSName("get")
  def get_embed(selector: embed, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLEmbedElement]] = js.native
  @JSName("get")
  def get_fieldset(selector: fieldset): Chainable[JQuery[HTMLFieldSetElement]] = js.native
  @JSName("get")
  def get_fieldset(selector: fieldset, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLFieldSetElement]] = js.native
  @JSName("get")
  def get_figcaption(selector: figcaption): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_figcaption(selector: figcaption, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_figure(selector: figure): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_figure(selector: figure, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_footer(selector: footer): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_footer(selector: footer, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_form(selector: form): Chainable[JQuery[HTMLFormElement]] = js.native
  @JSName("get")
  def get_form(selector: form, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLFormElement]] = js.native
  @JSName("get")
  def get_h1(selector: h1): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("get")
  def get_h1(selector: h1, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("get")
  def get_h2(selector: h2): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("get")
  def get_h2(selector: h2, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("get")
  def get_h3(selector: h3): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("get")
  def get_h3(selector: h3, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("get")
  def get_h4(selector: h4): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("get")
  def get_h4(selector: h4, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("get")
  def get_h5(selector: h5): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("get")
  def get_h5(selector: h5, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("get")
  def get_h6(selector: h6): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("get")
  def get_h6(selector: h6, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("get")
  def get_head(selector: head_): Chainable[JQuery[HTMLHeadElement]] = js.native
  @JSName("get")
  def get_head(selector: head_, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLHeadElement]] = js.native
  @JSName("get")
  def get_header(selector: header): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_header(selector: header, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_hgroup(selector: hgroup): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_hgroup(selector: hgroup, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_hr(selector: hr): Chainable[JQuery[HTMLHRElement]] = js.native
  @JSName("get")
  def get_hr(selector: hr, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLHRElement]] = js.native
  @JSName("get")
  def get_html(selector: html_): Chainable[JQuery[HTMLHtmlElement]] = js.native
  @JSName("get")
  def get_html(selector: html_, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLHtmlElement]] = js.native
  @JSName("get")
  def get_i(selector: i): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_i(selector: i, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_iframe(selector: iframe): Chainable[JQuery[HTMLIFrameElement]] = js.native
  @JSName("get")
  def get_iframe(selector: iframe, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLIFrameElement]] = js.native
  @JSName("get")
  def get_img(selector: img): Chainable[JQuery[HTMLImageElement]] = js.native
  @JSName("get")
  def get_img(selector: img, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLImageElement]] = js.native
  @JSName("get")
  def get_input(selector: input): Chainable[JQuery[HTMLInputElement]] = js.native
  @JSName("get")
  def get_input(selector: input, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLInputElement]] = js.native
  @JSName("get")
  def get_ins(selector: ins): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("get")
  def get_ins(selector: ins, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("get")
  def get_kbd(selector: kbd): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_kbd(selector: kbd, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_label(selector: label): Chainable[JQuery[HTMLLabelElement]] = js.native
  @JSName("get")
  def get_label(selector: label, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLLabelElement]] = js.native
  @JSName("get")
  def get_legend(selector: legend): Chainable[JQuery[HTMLLegendElement]] = js.native
  @JSName("get")
  def get_legend(selector: legend, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLLegendElement]] = js.native
  @JSName("get")
  def get_li(selector: li): Chainable[JQuery[HTMLLIElement]] = js.native
  @JSName("get")
  def get_li(selector: li, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLLIElement]] = js.native
  @JSName("get")
  def get_link(selector: link_): Chainable[JQuery[HTMLLinkElement]] = js.native
  @JSName("get")
  def get_link(selector: link_, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLLinkElement]] = js.native
  @JSName("get")
  def get_main(selector: main): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_main(selector: main, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_map(selector: map): Chainable[JQuery[HTMLMapElement]] = js.native
  @JSName("get")
  def get_map(selector: map, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLMapElement]] = js.native
  @JSName("get")
  def get_mark(selector: mark): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_mark(selector: mark, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_menu(selector: menu): Chainable[JQuery[HTMLMenuElement]] = js.native
  @JSName("get")
  def get_menu(selector: menu, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLMenuElement]] = js.native
  @JSName("get")
  def get_meta(selector: meta): Chainable[JQuery[HTMLMetaElement]] = js.native
  @JSName("get")
  def get_meta(selector: meta, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLMetaElement]] = js.native
  @JSName("get")
  def get_meter(selector: meter): Chainable[JQuery[HTMLMeterElement]] = js.native
  @JSName("get")
  def get_meter(selector: meter, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLMeterElement]] = js.native
  @JSName("get")
  def get_nav(selector: nav): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_nav(selector: nav, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_noscript(selector: noscript): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_noscript(selector: noscript, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_object(selector: object_): Chainable[JQuery[HTMLObjectElement]] = js.native
  @JSName("get")
  def get_object(selector: object_, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLObjectElement]] = js.native
  @JSName("get")
  def get_ol(selector: ol): Chainable[JQuery[HTMLOListElement]] = js.native
  @JSName("get")
  def get_ol(selector: ol, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLOListElement]] = js.native
  @JSName("get")
  def get_optgroup(selector: optgroup): Chainable[JQuery[HTMLOptGroupElement]] = js.native
  @JSName("get")
  def get_optgroup(selector: optgroup, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLOptGroupElement]] = js.native
  @JSName("get")
  def get_option(selector: option): Chainable[JQuery[HTMLOptionElement]] = js.native
  @JSName("get")
  def get_option(selector: option, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLOptionElement]] = js.native
  @JSName("get")
  def get_output(selector: output): Chainable[JQuery[HTMLOutputElement]] = js.native
  @JSName("get")
  def get_output(selector: output, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLOutputElement]] = js.native
  @JSName("get")
  def get_p(selector: p): Chainable[JQuery[HTMLParagraphElement]] = js.native
  @JSName("get")
  def get_p(selector: p, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLParagraphElement]] = js.native
  @JSName("get")
  def get_picture(selector: picture): Chainable[JQuery[HTMLPictureElement]] = js.native
  @JSName("get")
  def get_picture(selector: picture, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLPictureElement]] = js.native
  @JSName("get")
  def get_pre(selector: pre): Chainable[JQuery[HTMLPreElement]] = js.native
  @JSName("get")
  def get_pre(selector: pre, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLPreElement]] = js.native
  @JSName("get")
  def get_progress(selector: progress_): Chainable[JQuery[HTMLProgressElement]] = js.native
  @JSName("get")
  def get_progress(selector: progress_, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLProgressElement]] = js.native
  @JSName("get")
  def get_q(selector: q): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("get")
  def get_q(selector: q, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("get")
  def get_rp(selector: rp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_rp(selector: rp, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_rt(selector: rt): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_rt(selector: rt, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_ruby(selector: ruby): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_ruby(selector: ruby, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_s(selector: s): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_s(selector: s, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_samp(selector: samp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_samp(selector: samp, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_script(selector: script): Chainable[JQuery[HTMLScriptElement]] = js.native
  @JSName("get")
  def get_script(selector: script, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLScriptElement]] = js.native
  @JSName("get")
  def get_section(selector: section): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_section(selector: section, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_select(selector: select): Chainable[JQuery[HTMLSelectElement]] = js.native
  @JSName("get")
  def get_select(selector: select, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLSelectElement]] = js.native
  @JSName("get")
  def get_slot(selector: slot): Chainable[JQuery[HTMLSlotElement]] = js.native
  @JSName("get")
  def get_slot(selector: slot, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLSlotElement]] = js.native
  @JSName("get")
  def get_small(selector: small): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_small(selector: small, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_source(selector: source_): Chainable[JQuery[HTMLSourceElement]] = js.native
  @JSName("get")
  def get_source(selector: source_, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLSourceElement]] = js.native
  @JSName("get")
  def get_span(selector: span): Chainable[JQuery[HTMLSpanElement]] = js.native
  @JSName("get")
  def get_span(selector: span, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLSpanElement]] = js.native
  @JSName("get")
  def get_strong(selector: strong): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_strong(selector: strong, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_style(selector: style): Chainable[JQuery[HTMLStyleElement]] = js.native
  @JSName("get")
  def get_style(selector: style, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLStyleElement]] = js.native
  @JSName("get")
  def get_sub(selector: sub): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_sub(selector: sub, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_summary(selector: summary): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_summary(selector: summary, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_sup(selector: sup): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_sup(selector: sup, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_table(selector: table): Chainable[JQuery[HTMLTableElement]] = js.native
  @JSName("get")
  def get_table(selector: table, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLTableElement]] = js.native
  @JSName("get")
  def get_tbody(selector: tbody): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("get")
  def get_tbody(selector: tbody, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("get")
  def get_td(selector: td): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("get")
  def get_td(selector: td, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("get")
  def get_template(selector: template): Chainable[JQuery[HTMLTemplateElement]] = js.native
  @JSName("get")
  def get_template(selector: template, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLTemplateElement]] = js.native
  @JSName("get")
  def get_textarea(selector: textarea): Chainable[JQuery[HTMLTextAreaElement]] = js.native
  @JSName("get")
  def get_textarea(selector: textarea, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLTextAreaElement]] = js.native
  @JSName("get")
  def get_tfoot(selector: tfoot): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("get")
  def get_tfoot(selector: tfoot, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("get")
  def get_th(selector: th): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("get")
  def get_th(selector: th, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("get")
  def get_thead(selector: thead): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("get")
  def get_thead(selector: thead, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("get")
  def get_time(selector: time): Chainable[JQuery[HTMLTimeElement]] = js.native
  @JSName("get")
  def get_time(selector: time, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLTimeElement]] = js.native
  @JSName("get")
  def get_title(selector: title): Chainable[JQuery[HTMLTitleElement]] = js.native
  @JSName("get")
  def get_title(selector: title, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLTitleElement]] = js.native
  @JSName("get")
  def get_tr(selector: tr): Chainable[JQuery[HTMLTableRowElement]] = js.native
  @JSName("get")
  def get_tr(selector: tr, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLTableRowElement]] = js.native
  @JSName("get")
  def get_track(selector: track): Chainable[JQuery[HTMLTrackElement]] = js.native
  @JSName("get")
  def get_track(selector: track, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLTrackElement]] = js.native
  @JSName("get")
  def get_u(selector: u): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_u(selector: u, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_ul(selector: ul): Chainable[JQuery[HTMLUListElement]] = js.native
  @JSName("get")
  def get_ul(selector: ul, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLUListElement]] = js.native
  @JSName("get")
  def get_var(selector: `var`): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_var(selector: `var`, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_video(selector: video): Chainable[JQuery[HTMLVideoElement]] = js.native
  @JSName("get")
  def get_video(selector: video, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLVideoElement]] = js.native
  @JSName("get")
  def get_wbr(selector: wbr): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("get")
  def get_wbr(selector: wbr, options: PartialLoggableTimeoutablTimeout): Chainable[JQuery[HTMLElement]] = js.native
  
  def go(direction: Double): Chainable[AUTWindow] = js.native
  def go(direction: Double, options: PartialLoggableTimeoutabl): Chainable[AUTWindow] = js.native
  /**
    * Navigate back or forward to the previous or next URL in the browser's history.
    *
    * @see https://on.cypress.io/go
    */
  def go(direction: HistoryDirection): Chainable[AUTWindow] = js.native
  def go(direction: HistoryDirection, options: PartialLoggableTimeoutabl): Chainable[AUTWindow] = js.native
  
  /**
    * Get the current URL hash of the page that is currently active.
    *
    * @see https://on.cypress.io/hash
    */
  def hash(): Chainable[String] = js.native
  def hash(options: PartialLoggableTimeoutabl): Chainable[String] = js.native
  
  /**
    * Invoke a function on the previously yielded subject by a property path.
    * Property path invocation cannot be strongly-typed.
    * Invoking by a property path will always result in any.
    *
    * @see https://on.cypress.io/invoke
    */
  def invoke(propertyPath: String, args: Any*): Chainable[Any] = js.native
  /**
    * Invoke a function in an array of functions.
    * @see https://on.cypress.io/invoke
    */
  def invoke[T /* <: js.Function1[/* repeated */ Any, Any] */, Subject /* <: js.Array[T] */](index: Double): Chainable[ReturnType[T]] = js.native
  def invoke[T /* <: js.Function1[/* repeated */ Any, Any] */, Subject /* <: js.Array[T] */](options: PartialLoggableTimeoutabl, index: Double): Chainable[ReturnType[T]] = js.native
  /**
    * Invoke a function on the previously yielded subject.
    *
    * @see https://on.cypress.io/invoke
    */
  def invoke[K /* <: /* keyof Subject */ String */, F /* <: (js.Function1[/* repeated */ Any, Any]) & (/* import warning: importer.ImportType#apply Failed type conversion: Subject[K] */ js.Any) */, R](functionName: K, args: Any*): Chainable[R] = js.native
  def invoke[K /* <: /* keyof Subject */ String */, F /* <: (js.Function1[/* repeated */ Any, Any]) & (/* import warning: importer.ImportType#apply Failed type conversion: Subject[K] */ js.Any) */, R](options: PartialLoggableTimeoutabl, functionName: K, args: Any*): Chainable[R] = js.native
  
  def its(propertyPath: String): Chainable[Any] = js.native
  def its(propertyPath: String, options: PartialLoggableTimeoutabl): Chainable[Any] = js.native
  /**
    * Get a property's value on the previously yielded subject.
    *
    * @see https://on.cypress.io/its
    * @example
    *    // Get the 'width' property
    *    cy.wrap({width: '50'}).its('width')
    *    // Drill into nested properties by using dot notation
    *    cy.wrap({foo: {bar: {baz: 1}}}).its('foo.bar.baz')
    */
  def its[K /* <: /* keyof Subject */ String */](propertyName: K): Chainable[
    /* import warning: importer.ImportType#apply Failed type conversion: Subject[K] */ js.Any
  ] = js.native
  def its[K /* <: /* keyof Subject */ String */](propertyName: K, options: PartialLoggableTimeoutabl): Chainable[
    /* import warning: importer.ImportType#apply Failed type conversion: Subject[K] */ js.Any
  ] = js.native
  /**
    * Get a value by index from an array yielded from the previous command.
    * @see https://on.cypress.io/its
    * @example
    *    cy.wrap(['a', 'b']).its(1).should('equal', 'b')
    */
  def its[T, Subject /* <: js.Array[T] */](index: Double): Chainable[T] = js.native
  def its[T, Subject /* <: js.Array[T] */](index: Double, options: PartialLoggableTimeoutabl): Chainable[T] = js.native
  
  /**
    * Get the last DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/last
    */
  def last[E /* <: Node */](): Chainable[JQuery[E]] = js.native
  def last[E /* <: Node */](options: PartialLoggableTimeoutabl): Chainable[JQuery[E]] = js.native
  
  /**
    * Get the global `window.location` object of the page that is currently active.
    *
    * @see https://on.cypress.io/location
    * @example
    *    cy.location() // Get location object
    */
  def location(): Chainable[Location] = js.native
  def location(options: PartialLoggableTimeoutabl): Chainable[Location] = js.native
  /**
    * Get a part of the global `window.location` object of the page that is currently active.
    *
    * @see https://on.cypress.io/location
    * @example
    *    cy.location('host') // Get the host of the location object
    *    cy.location('port') // Get the port of the location object
    *    // Assert on the href of the location
    *    cy.location('href').should('contain', '/tag/tutorials')
    */
  @JSName("location")
  def location_ancestorOrigins(key: ancestorOrigins): Chainable[DOMStringList] = js.native
  @JSName("location")
  def location_ancestorOrigins(key: ancestorOrigins, options: PartialLoggableTimeoutabl): Chainable[DOMStringList] = js.native
  @JSName("location")
  def location_hash(key: hash): Chainable[String] = js.native
  @JSName("location")
  def location_hash(key: hash, options: PartialLoggableTimeoutabl): Chainable[String] = js.native
  @JSName("location")
  def location_host(key: host): Chainable[String] = js.native
  @JSName("location")
  def location_host(key: host, options: PartialLoggableTimeoutabl): Chainable[String] = js.native
  @JSName("location")
  def location_hostname(key: hostname): Chainable[String] = js.native
  @JSName("location")
  def location_hostname(key: hostname, options: PartialLoggableTimeoutabl): Chainable[String] = js.native
  @JSName("location")
  def location_href(key: href): Chainable[String] = js.native
  @JSName("location")
  def location_href(key: href, options: PartialLoggableTimeoutabl): Chainable[String] = js.native
  @JSName("location")
  def location_origin(key: origin): Chainable[String] = js.native
  @JSName("location")
  def location_origin(key: origin, options: PartialLoggableTimeoutabl): Chainable[String] = js.native
  @JSName("location")
  def location_pathname(key: pathname): Chainable[String] = js.native
  @JSName("location")
  def location_pathname(key: pathname, options: PartialLoggableTimeoutabl): Chainable[String] = js.native
  @JSName("location")
  def location_port(key: port): Chainable[String] = js.native
  @JSName("location")
  def location_port(key: port, options: PartialLoggableTimeoutabl): Chainable[String] = js.native
  @JSName("location")
  def location_protocol(key: protocol): Chainable[String] = js.native
  @JSName("location")
  def location_protocol(key: protocol, options: PartialLoggableTimeoutabl): Chainable[String] = js.native
  @JSName("location")
  def location_search(key: search_): Chainable[String] = js.native
  @JSName("location")
  def location_search(key: search_, options: PartialLoggableTimeoutabl): Chainable[String] = js.native
  
  /**
    * Print a message to the Cypress Command Log.
    *
    * @see https://on.cypress.io/log
    */
  def log(message: String, args: Any*): Chainable[Null] = js.native
  
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    * @example
    *    cy.get('nav a:first').next()
    */
  def next[E /* <: Node */](): Chainable[JQuery[E]] = js.native
  def next[E /* <: Node */](options: PartialLoggableTimeoutabl): Chainable[JQuery[E]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements that match selector
    *
    * @see https://on.cypress.io/next
    * @example
    *    cy.get('nav a:first').next('.menu-item)
    */
  def next[E /* <: Node */](selector: String): Chainable[JQuery[E]] = js.native
  def next[E /* <: Node */](selector: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[E]] = js.native
  
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  def nextAll[E /* <: HTMLElement */](): Chainable[JQuery[E]] = js.native
  def nextAll[E /* <: HTMLElement */](options: PartialLoggableTimeoutabl): Chainable[JQuery[E]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  def nextAll[E /* <: HTMLElement */](selector: String): Chainable[JQuery[E]] = js.native
  def nextAll[E /* <: HTMLElement */](selector: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[E]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_a(selector: a): Chainable[JQuery[HTMLAnchorElement]] = js.native
  @JSName("nextAll")
  def nextAll_a(selector: a, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLAnchorElement]] = js.native
  @JSName("nextAll")
  def nextAll_abbr(selector: abbr): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_abbr(selector: abbr, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_address(selector: address): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_address(selector: address, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_area(selector: area): Chainable[JQuery[HTMLAreaElement]] = js.native
  @JSName("nextAll")
  def nextAll_area(selector: area, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLAreaElement]] = js.native
  @JSName("nextAll")
  def nextAll_article(selector: article): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_article(selector: article, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_aside(selector: aside): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_aside(selector: aside, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_audio(selector: audio): Chainable[JQuery[HTMLAudioElement]] = js.native
  @JSName("nextAll")
  def nextAll_audio(selector: audio, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLAudioElement]] = js.native
  @JSName("nextAll")
  def nextAll_b(selector: b): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_b(selector: b, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_base(selector: base_): Chainable[JQuery[HTMLBaseElement]] = js.native
  @JSName("nextAll")
  def nextAll_base(selector: base_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLBaseElement]] = js.native
  @JSName("nextAll")
  def nextAll_bdi(selector: bdi): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_bdi(selector: bdi, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_bdo(selector: bdo): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_bdo(selector: bdo, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_blockquote(selector: blockquote): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("nextAll")
  def nextAll_blockquote(selector: blockquote, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("nextAll")
  def nextAll_body(selector: body): Chainable[JQuery[HTMLBodyElement]] = js.native
  @JSName("nextAll")
  def nextAll_body(selector: body, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLBodyElement]] = js.native
  @JSName("nextAll")
  def nextAll_br(selector: br): Chainable[JQuery[HTMLBRElement]] = js.native
  @JSName("nextAll")
  def nextAll_br(selector: br, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLBRElement]] = js.native
  @JSName("nextAll")
  def nextAll_button(selector: button): Chainable[JQuery[HTMLButtonElement]] = js.native
  @JSName("nextAll")
  def nextAll_button(selector: button, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLButtonElement]] = js.native
  @JSName("nextAll")
  def nextAll_canvas(selector: canvas): Chainable[JQuery[HTMLCanvasElement]] = js.native
  @JSName("nextAll")
  def nextAll_canvas(selector: canvas, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLCanvasElement]] = js.native
  @JSName("nextAll")
  def nextAll_caption(selector: caption): Chainable[JQuery[HTMLTableCaptionElement]] = js.native
  @JSName("nextAll")
  def nextAll_caption(selector: caption, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableCaptionElement]] = js.native
  @JSName("nextAll")
  def nextAll_cite(selector: cite): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_cite(selector: cite, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_code(selector: code): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_code(selector: code, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_col(selector: col): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("nextAll")
  def nextAll_col(selector: col, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("nextAll")
  def nextAll_colgroup(selector: colgroup): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("nextAll")
  def nextAll_colgroup(selector: colgroup, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("nextAll")
  def nextAll_data(selector: data): Chainable[JQuery[HTMLDataElement]] = js.native
  @JSName("nextAll")
  def nextAll_data(selector: data, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDataElement]] = js.native
  @JSName("nextAll")
  def nextAll_datalist(selector: datalist): Chainable[JQuery[HTMLDataListElement]] = js.native
  @JSName("nextAll")
  def nextAll_datalist(selector: datalist, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDataListElement]] = js.native
  @JSName("nextAll")
  def nextAll_dd(selector: dd): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_dd(selector: dd, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_del(selector: del): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("nextAll")
  def nextAll_del(selector: del, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("nextAll")
  def nextAll_details(selector: details): Chainable[JQuery[HTMLDetailsElement]] = js.native
  @JSName("nextAll")
  def nextAll_details(selector: details, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDetailsElement]] = js.native
  @JSName("nextAll")
  def nextAll_dfn(selector: dfn): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_dfn(selector: dfn, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_dialog(selector: dialog): Chainable[JQuery[HTMLDialogElement]] = js.native
  @JSName("nextAll")
  def nextAll_dialog(selector: dialog, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDialogElement]] = js.native
  @JSName("nextAll")
  def nextAll_div(selector: div): Chainable[JQuery[HTMLDivElement]] = js.native
  @JSName("nextAll")
  def nextAll_div(selector: div, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDivElement]] = js.native
  @JSName("nextAll")
  def nextAll_dl(selector: dl): Chainable[JQuery[HTMLDListElement]] = js.native
  @JSName("nextAll")
  def nextAll_dl(selector: dl, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDListElement]] = js.native
  @JSName("nextAll")
  def nextAll_dt(selector: dt): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_dt(selector: dt, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_em(selector: em): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_em(selector: em, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_embed(selector: embed): Chainable[JQuery[HTMLEmbedElement]] = js.native
  @JSName("nextAll")
  def nextAll_embed(selector: embed, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLEmbedElement]] = js.native
  @JSName("nextAll")
  def nextAll_fieldset(selector: fieldset): Chainable[JQuery[HTMLFieldSetElement]] = js.native
  @JSName("nextAll")
  def nextAll_fieldset(selector: fieldset, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLFieldSetElement]] = js.native
  @JSName("nextAll")
  def nextAll_figcaption(selector: figcaption): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_figcaption(selector: figcaption, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_figure(selector: figure): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_figure(selector: figure, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_footer(selector: footer): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_footer(selector: footer, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_form(selector: form): Chainable[JQuery[HTMLFormElement]] = js.native
  @JSName("nextAll")
  def nextAll_form(selector: form, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLFormElement]] = js.native
  @JSName("nextAll")
  def nextAll_h1(selector: h1): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("nextAll")
  def nextAll_h1(selector: h1, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("nextAll")
  def nextAll_h2(selector: h2): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("nextAll")
  def nextAll_h2(selector: h2, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("nextAll")
  def nextAll_h3(selector: h3): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("nextAll")
  def nextAll_h3(selector: h3, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("nextAll")
  def nextAll_h4(selector: h4): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("nextAll")
  def nextAll_h4(selector: h4, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("nextAll")
  def nextAll_h5(selector: h5): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("nextAll")
  def nextAll_h5(selector: h5, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("nextAll")
  def nextAll_h6(selector: h6): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("nextAll")
  def nextAll_h6(selector: h6, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("nextAll")
  def nextAll_head(selector: head_): Chainable[JQuery[HTMLHeadElement]] = js.native
  @JSName("nextAll")
  def nextAll_head(selector: head_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadElement]] = js.native
  @JSName("nextAll")
  def nextAll_header(selector: header): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_header(selector: header, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_hgroup(selector: hgroup): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_hgroup(selector: hgroup, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_hr(selector: hr): Chainable[JQuery[HTMLHRElement]] = js.native
  @JSName("nextAll")
  def nextAll_hr(selector: hr, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHRElement]] = js.native
  @JSName("nextAll")
  def nextAll_html(selector: html_): Chainable[JQuery[HTMLHtmlElement]] = js.native
  @JSName("nextAll")
  def nextAll_html(selector: html_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHtmlElement]] = js.native
  @JSName("nextAll")
  def nextAll_i(selector: i): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_i(selector: i, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_iframe(selector: iframe): Chainable[JQuery[HTMLIFrameElement]] = js.native
  @JSName("nextAll")
  def nextAll_iframe(selector: iframe, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLIFrameElement]] = js.native
  @JSName("nextAll")
  def nextAll_img(selector: img): Chainable[JQuery[HTMLImageElement]] = js.native
  @JSName("nextAll")
  def nextAll_img(selector: img, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLImageElement]] = js.native
  @JSName("nextAll")
  def nextAll_input(selector: input): Chainable[JQuery[HTMLInputElement]] = js.native
  @JSName("nextAll")
  def nextAll_input(selector: input, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLInputElement]] = js.native
  @JSName("nextAll")
  def nextAll_ins(selector: ins): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("nextAll")
  def nextAll_ins(selector: ins, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("nextAll")
  def nextAll_kbd(selector: kbd): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_kbd(selector: kbd, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_label(selector: label): Chainable[JQuery[HTMLLabelElement]] = js.native
  @JSName("nextAll")
  def nextAll_label(selector: label, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLabelElement]] = js.native
  @JSName("nextAll")
  def nextAll_legend(selector: legend): Chainable[JQuery[HTMLLegendElement]] = js.native
  @JSName("nextAll")
  def nextAll_legend(selector: legend, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLegendElement]] = js.native
  @JSName("nextAll")
  def nextAll_li(selector: li): Chainable[JQuery[HTMLLIElement]] = js.native
  @JSName("nextAll")
  def nextAll_li(selector: li, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLIElement]] = js.native
  @JSName("nextAll")
  def nextAll_link(selector: link_): Chainable[JQuery[HTMLLinkElement]] = js.native
  @JSName("nextAll")
  def nextAll_link(selector: link_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLinkElement]] = js.native
  @JSName("nextAll")
  def nextAll_main(selector: main): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_main(selector: main, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_map(selector: map): Chainable[JQuery[HTMLMapElement]] = js.native
  @JSName("nextAll")
  def nextAll_map(selector: map, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMapElement]] = js.native
  @JSName("nextAll")
  def nextAll_mark(selector: mark): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_mark(selector: mark, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_menu(selector: menu): Chainable[JQuery[HTMLMenuElement]] = js.native
  @JSName("nextAll")
  def nextAll_menu(selector: menu, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMenuElement]] = js.native
  @JSName("nextAll")
  def nextAll_meta(selector: meta): Chainable[JQuery[HTMLMetaElement]] = js.native
  @JSName("nextAll")
  def nextAll_meta(selector: meta, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMetaElement]] = js.native
  @JSName("nextAll")
  def nextAll_meter(selector: meter): Chainable[JQuery[HTMLMeterElement]] = js.native
  @JSName("nextAll")
  def nextAll_meter(selector: meter, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMeterElement]] = js.native
  @JSName("nextAll")
  def nextAll_nav(selector: nav): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_nav(selector: nav, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_noscript(selector: noscript): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_noscript(selector: noscript, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_object(selector: object_): Chainable[JQuery[HTMLObjectElement]] = js.native
  @JSName("nextAll")
  def nextAll_object(selector: object_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLObjectElement]] = js.native
  @JSName("nextAll")
  def nextAll_ol(selector: ol): Chainable[JQuery[HTMLOListElement]] = js.native
  @JSName("nextAll")
  def nextAll_ol(selector: ol, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOListElement]] = js.native
  @JSName("nextAll")
  def nextAll_optgroup(selector: optgroup): Chainable[JQuery[HTMLOptGroupElement]] = js.native
  @JSName("nextAll")
  def nextAll_optgroup(selector: optgroup, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOptGroupElement]] = js.native
  @JSName("nextAll")
  def nextAll_option(selector: option): Chainable[JQuery[HTMLOptionElement]] = js.native
  @JSName("nextAll")
  def nextAll_option(selector: option, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOptionElement]] = js.native
  @JSName("nextAll")
  def nextAll_output(selector: output): Chainable[JQuery[HTMLOutputElement]] = js.native
  @JSName("nextAll")
  def nextAll_output(selector: output, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOutputElement]] = js.native
  @JSName("nextAll")
  def nextAll_p(selector: p): Chainable[JQuery[HTMLParagraphElement]] = js.native
  @JSName("nextAll")
  def nextAll_p(selector: p, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLParagraphElement]] = js.native
  @JSName("nextAll")
  def nextAll_picture(selector: picture): Chainable[JQuery[HTMLPictureElement]] = js.native
  @JSName("nextAll")
  def nextAll_picture(selector: picture, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLPictureElement]] = js.native
  @JSName("nextAll")
  def nextAll_pre(selector: pre): Chainable[JQuery[HTMLPreElement]] = js.native
  @JSName("nextAll")
  def nextAll_pre(selector: pre, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLPreElement]] = js.native
  @JSName("nextAll")
  def nextAll_progress(selector: progress_): Chainable[JQuery[HTMLProgressElement]] = js.native
  @JSName("nextAll")
  def nextAll_progress(selector: progress_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLProgressElement]] = js.native
  @JSName("nextAll")
  def nextAll_q(selector: q): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("nextAll")
  def nextAll_q(selector: q, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("nextAll")
  def nextAll_rp(selector: rp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_rp(selector: rp, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_rt(selector: rt): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_rt(selector: rt, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_ruby(selector: ruby): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_ruby(selector: ruby, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_s(selector: s): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_s(selector: s, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_samp(selector: samp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_samp(selector: samp, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_script(selector: script): Chainable[JQuery[HTMLScriptElement]] = js.native
  @JSName("nextAll")
  def nextAll_script(selector: script, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLScriptElement]] = js.native
  @JSName("nextAll")
  def nextAll_section(selector: section): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_section(selector: section, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_select(selector: select): Chainable[JQuery[HTMLSelectElement]] = js.native
  @JSName("nextAll")
  def nextAll_select(selector: select, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSelectElement]] = js.native
  @JSName("nextAll")
  def nextAll_slot(selector: slot): Chainable[JQuery[HTMLSlotElement]] = js.native
  @JSName("nextAll")
  def nextAll_slot(selector: slot, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSlotElement]] = js.native
  @JSName("nextAll")
  def nextAll_small(selector: small): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_small(selector: small, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_source(selector: source_): Chainable[JQuery[HTMLSourceElement]] = js.native
  @JSName("nextAll")
  def nextAll_source(selector: source_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSourceElement]] = js.native
  @JSName("nextAll")
  def nextAll_span(selector: span): Chainable[JQuery[HTMLSpanElement]] = js.native
  @JSName("nextAll")
  def nextAll_span(selector: span, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSpanElement]] = js.native
  @JSName("nextAll")
  def nextAll_strong(selector: strong): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_strong(selector: strong, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_style(selector: style): Chainable[JQuery[HTMLStyleElement]] = js.native
  @JSName("nextAll")
  def nextAll_style(selector: style, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLStyleElement]] = js.native
  @JSName("nextAll")
  def nextAll_sub(selector: sub): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_sub(selector: sub, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_summary(selector: summary): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_summary(selector: summary, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_sup(selector: sup): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_sup(selector: sup, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_table(selector: table): Chainable[JQuery[HTMLTableElement]] = js.native
  @JSName("nextAll")
  def nextAll_table(selector: table, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableElement]] = js.native
  @JSName("nextAll")
  def nextAll_tbody(selector: tbody): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("nextAll")
  def nextAll_tbody(selector: tbody, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("nextAll")
  def nextAll_td(selector: td): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("nextAll")
  def nextAll_td(selector: td, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("nextAll")
  def nextAll_template(selector: template): Chainable[JQuery[HTMLTemplateElement]] = js.native
  @JSName("nextAll")
  def nextAll_template(selector: template, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTemplateElement]] = js.native
  @JSName("nextAll")
  def nextAll_textarea(selector: textarea): Chainable[JQuery[HTMLTextAreaElement]] = js.native
  @JSName("nextAll")
  def nextAll_textarea(selector: textarea, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTextAreaElement]] = js.native
  @JSName("nextAll")
  def nextAll_tfoot(selector: tfoot): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("nextAll")
  def nextAll_tfoot(selector: tfoot, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("nextAll")
  def nextAll_th(selector: th): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("nextAll")
  def nextAll_th(selector: th, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("nextAll")
  def nextAll_thead(selector: thead): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("nextAll")
  def nextAll_thead(selector: thead, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("nextAll")
  def nextAll_time(selector: time): Chainable[JQuery[HTMLTimeElement]] = js.native
  @JSName("nextAll")
  def nextAll_time(selector: time, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTimeElement]] = js.native
  @JSName("nextAll")
  def nextAll_title(selector: title): Chainable[JQuery[HTMLTitleElement]] = js.native
  @JSName("nextAll")
  def nextAll_title(selector: title, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTitleElement]] = js.native
  @JSName("nextAll")
  def nextAll_tr(selector: tr): Chainable[JQuery[HTMLTableRowElement]] = js.native
  @JSName("nextAll")
  def nextAll_tr(selector: tr, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableRowElement]] = js.native
  @JSName("nextAll")
  def nextAll_track(selector: track): Chainable[JQuery[HTMLTrackElement]] = js.native
  @JSName("nextAll")
  def nextAll_track(selector: track, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTrackElement]] = js.native
  @JSName("nextAll")
  def nextAll_u(selector: u): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_u(selector: u, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_ul(selector: ul): Chainable[JQuery[HTMLUListElement]] = js.native
  @JSName("nextAll")
  def nextAll_ul(selector: ul, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLUListElement]] = js.native
  @JSName("nextAll")
  def nextAll_var(selector: `var`): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_var(selector: `var`, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_video(selector: video): Chainable[JQuery[HTMLVideoElement]] = js.native
  @JSName("nextAll")
  def nextAll_video(selector: video, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLVideoElement]] = js.native
  @JSName("nextAll")
  def nextAll_wbr(selector: wbr): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_wbr(selector: wbr, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  def nextUntil[E /* <: HTMLElement */](): Chainable[JQuery[E]] = js.native
  def nextUntil[E /* <: HTMLElement */](options: PartialLoggableTimeoutabl): Chainable[JQuery[E]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  def nextUntil[E /* <: HTMLElement */](selector: String): Chainable[JQuery[E]] = js.native
  def nextUntil[E /* <: HTMLElement */](selector: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[E]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_a(selector: a): Chainable[JQuery[HTMLAnchorElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_a(selector: a, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLAnchorElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_abbr(selector: abbr): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_abbr(selector: abbr, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_address(selector: address): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_address(selector: address, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_area(selector: area): Chainable[JQuery[HTMLAreaElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_area(selector: area, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLAreaElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_article(selector: article): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_article(selector: article, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_aside(selector: aside): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_aside(selector: aside, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_audio(selector: audio): Chainable[JQuery[HTMLAudioElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_audio(selector: audio, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLAudioElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_b(selector: b): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_b(selector: b, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_base(selector: base_): Chainable[JQuery[HTMLBaseElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_base(selector: base_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLBaseElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_bdi(selector: bdi): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_bdi(selector: bdi, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_bdo(selector: bdo): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_bdo(selector: bdo, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_blockquote(selector: blockquote): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_blockquote(selector: blockquote, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_body(selector: body): Chainable[JQuery[HTMLBodyElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_body(selector: body, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLBodyElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_br(selector: br): Chainable[JQuery[HTMLBRElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_br(selector: br, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLBRElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_button(selector: button): Chainable[JQuery[HTMLButtonElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_button(selector: button, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLButtonElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_canvas(selector: canvas): Chainable[JQuery[HTMLCanvasElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_canvas(selector: canvas, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLCanvasElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_caption(selector: caption): Chainable[JQuery[HTMLTableCaptionElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_caption(selector: caption, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableCaptionElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_cite(selector: cite): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_cite(selector: cite, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_code(selector: code): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_code(selector: code, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_col(selector: col): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_col(selector: col, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_colgroup(selector: colgroup): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_colgroup(selector: colgroup, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_data(selector: data): Chainable[JQuery[HTMLDataElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_data(selector: data, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDataElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_datalist(selector: datalist): Chainable[JQuery[HTMLDataListElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_datalist(selector: datalist, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDataListElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_dd(selector: dd): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_dd(selector: dd, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_del(selector: del): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_del(selector: del, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_details(selector: details): Chainable[JQuery[HTMLDetailsElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_details(selector: details, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDetailsElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_dfn(selector: dfn): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_dfn(selector: dfn, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_dialog(selector: dialog): Chainable[JQuery[HTMLDialogElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_dialog(selector: dialog, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDialogElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_div(selector: div): Chainable[JQuery[HTMLDivElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_div(selector: div, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDivElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_dl(selector: dl): Chainable[JQuery[HTMLDListElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_dl(selector: dl, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDListElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_dt(selector: dt): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_dt(selector: dt, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_em(selector: em): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_em(selector: em, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_embed(selector: embed): Chainable[JQuery[HTMLEmbedElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_embed(selector: embed, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLEmbedElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_fieldset(selector: fieldset): Chainable[JQuery[HTMLFieldSetElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_fieldset(selector: fieldset, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLFieldSetElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_figcaption(selector: figcaption): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_figcaption(selector: figcaption, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_figure(selector: figure): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_figure(selector: figure, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_footer(selector: footer): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_footer(selector: footer, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_form(selector: form): Chainable[JQuery[HTMLFormElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_form(selector: form, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLFormElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_h1(selector: h1): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_h1(selector: h1, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_h2(selector: h2): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_h2(selector: h2, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_h3(selector: h3): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_h3(selector: h3, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_h4(selector: h4): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_h4(selector: h4, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_h5(selector: h5): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_h5(selector: h5, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_h6(selector: h6): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_h6(selector: h6, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_head(selector: head_): Chainable[JQuery[HTMLHeadElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_head(selector: head_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_header(selector: header): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_header(selector: header, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_hgroup(selector: hgroup): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_hgroup(selector: hgroup, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_hr(selector: hr): Chainable[JQuery[HTMLHRElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_hr(selector: hr, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHRElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_html(selector: html_): Chainable[JQuery[HTMLHtmlElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_html(selector: html_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHtmlElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_i(selector: i): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_i(selector: i, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_iframe(selector: iframe): Chainable[JQuery[HTMLIFrameElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_iframe(selector: iframe, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLIFrameElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_img(selector: img): Chainable[JQuery[HTMLImageElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_img(selector: img, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLImageElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_input(selector: input): Chainable[JQuery[HTMLInputElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_input(selector: input, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLInputElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_ins(selector: ins): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_ins(selector: ins, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_kbd(selector: kbd): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_kbd(selector: kbd, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_label(selector: label): Chainable[JQuery[HTMLLabelElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_label(selector: label, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLabelElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_legend(selector: legend): Chainable[JQuery[HTMLLegendElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_legend(selector: legend, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLegendElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_li(selector: li): Chainable[JQuery[HTMLLIElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_li(selector: li, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLIElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_link(selector: link_): Chainable[JQuery[HTMLLinkElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_link(selector: link_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLinkElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_main(selector: main): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_main(selector: main, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_map(selector: map): Chainable[JQuery[HTMLMapElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_map(selector: map, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMapElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_mark(selector: mark): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_mark(selector: mark, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_menu(selector: menu): Chainable[JQuery[HTMLMenuElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_menu(selector: menu, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMenuElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_meta(selector: meta): Chainable[JQuery[HTMLMetaElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_meta(selector: meta, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMetaElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_meter(selector: meter): Chainable[JQuery[HTMLMeterElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_meter(selector: meter, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMeterElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_nav(selector: nav): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_nav(selector: nav, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_noscript(selector: noscript): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_noscript(selector: noscript, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_object(selector: object_): Chainable[JQuery[HTMLObjectElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_object(selector: object_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLObjectElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_ol(selector: ol): Chainable[JQuery[HTMLOListElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_ol(selector: ol, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOListElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_optgroup(selector: optgroup): Chainable[JQuery[HTMLOptGroupElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_optgroup(selector: optgroup, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOptGroupElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_option(selector: option): Chainable[JQuery[HTMLOptionElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_option(selector: option, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOptionElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_output(selector: output): Chainable[JQuery[HTMLOutputElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_output(selector: output, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOutputElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_p(selector: p): Chainable[JQuery[HTMLParagraphElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_p(selector: p, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLParagraphElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_picture(selector: picture): Chainable[JQuery[HTMLPictureElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_picture(selector: picture, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLPictureElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_pre(selector: pre): Chainable[JQuery[HTMLPreElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_pre(selector: pre, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLPreElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_progress(selector: progress_): Chainable[JQuery[HTMLProgressElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_progress(selector: progress_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLProgressElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_q(selector: q): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_q(selector: q, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_rp(selector: rp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_rp(selector: rp, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_rt(selector: rt): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_rt(selector: rt, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_ruby(selector: ruby): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_ruby(selector: ruby, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_s(selector: s): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_s(selector: s, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_samp(selector: samp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_samp(selector: samp, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_script(selector: script): Chainable[JQuery[HTMLScriptElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_script(selector: script, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLScriptElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_section(selector: section): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_section(selector: section, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_select(selector: select): Chainable[JQuery[HTMLSelectElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_select(selector: select, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSelectElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_slot(selector: slot): Chainable[JQuery[HTMLSlotElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_slot(selector: slot, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSlotElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_small(selector: small): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_small(selector: small, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_source(selector: source_): Chainable[JQuery[HTMLSourceElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_source(selector: source_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSourceElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_span(selector: span): Chainable[JQuery[HTMLSpanElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_span(selector: span, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSpanElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_strong(selector: strong): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_strong(selector: strong, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_style(selector: style): Chainable[JQuery[HTMLStyleElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_style(selector: style, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLStyleElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_sub(selector: sub): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_sub(selector: sub, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_summary(selector: summary): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_summary(selector: summary, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_sup(selector: sup): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_sup(selector: sup, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_table(selector: table): Chainable[JQuery[HTMLTableElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_table(selector: table, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_tbody(selector: tbody): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_tbody(selector: tbody, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_td(selector: td): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_td(selector: td, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_template(selector: template): Chainable[JQuery[HTMLTemplateElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_template(selector: template, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTemplateElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_textarea(selector: textarea): Chainable[JQuery[HTMLTextAreaElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_textarea(selector: textarea, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTextAreaElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_tfoot(selector: tfoot): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_tfoot(selector: tfoot, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_th(selector: th): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_th(selector: th, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_thead(selector: thead): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_thead(selector: thead, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_time(selector: time): Chainable[JQuery[HTMLTimeElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_time(selector: time, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTimeElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_title(selector: title): Chainable[JQuery[HTMLTitleElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_title(selector: title, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTitleElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_tr(selector: tr): Chainable[JQuery[HTMLTableRowElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_tr(selector: tr, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableRowElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_track(selector: track): Chainable[JQuery[HTMLTrackElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_track(selector: track, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTrackElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_u(selector: u): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_u(selector: u, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_ul(selector: ul): Chainable[JQuery[HTMLUListElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_ul(selector: ul, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLUListElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_var(selector: `var`): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_var(selector: `var`, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_video(selector: video): Chainable[JQuery[HTMLVideoElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_video(selector: video, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLVideoElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_wbr(selector: wbr): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_wbr(selector: wbr, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_a(selector: a): Chainable[JQuery[HTMLAnchorElement]] = js.native
  @JSName("next")
  def next_a(selector: a, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLAnchorElement]] = js.native
  @JSName("next")
  def next_abbr(selector: abbr): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_abbr(selector: abbr, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_address(selector: address): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_address(selector: address, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_area(selector: area): Chainable[JQuery[HTMLAreaElement]] = js.native
  @JSName("next")
  def next_area(selector: area, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLAreaElement]] = js.native
  @JSName("next")
  def next_article(selector: article): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_article(selector: article, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_aside(selector: aside): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_aside(selector: aside, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_audio(selector: audio): Chainable[JQuery[HTMLAudioElement]] = js.native
  @JSName("next")
  def next_audio(selector: audio, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLAudioElement]] = js.native
  @JSName("next")
  def next_b(selector: b): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_b(selector: b, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_base(selector: base_): Chainable[JQuery[HTMLBaseElement]] = js.native
  @JSName("next")
  def next_base(selector: base_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLBaseElement]] = js.native
  @JSName("next")
  def next_bdi(selector: bdi): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_bdi(selector: bdi, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_bdo(selector: bdo): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_bdo(selector: bdo, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_blockquote(selector: blockquote): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("next")
  def next_blockquote(selector: blockquote, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("next")
  def next_body(selector: body): Chainable[JQuery[HTMLBodyElement]] = js.native
  @JSName("next")
  def next_body(selector: body, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLBodyElement]] = js.native
  @JSName("next")
  def next_br(selector: br): Chainable[JQuery[HTMLBRElement]] = js.native
  @JSName("next")
  def next_br(selector: br, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLBRElement]] = js.native
  @JSName("next")
  def next_button(selector: button): Chainable[JQuery[HTMLButtonElement]] = js.native
  @JSName("next")
  def next_button(selector: button, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLButtonElement]] = js.native
  @JSName("next")
  def next_canvas(selector: canvas): Chainable[JQuery[HTMLCanvasElement]] = js.native
  @JSName("next")
  def next_canvas(selector: canvas, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLCanvasElement]] = js.native
  @JSName("next")
  def next_caption(selector: caption): Chainable[JQuery[HTMLTableCaptionElement]] = js.native
  @JSName("next")
  def next_caption(selector: caption, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableCaptionElement]] = js.native
  @JSName("next")
  def next_cite(selector: cite): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_cite(selector: cite, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_code(selector: code): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_code(selector: code, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_col(selector: col): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("next")
  def next_col(selector: col, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("next")
  def next_colgroup(selector: colgroup): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("next")
  def next_colgroup(selector: colgroup, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("next")
  def next_data(selector: data): Chainable[JQuery[HTMLDataElement]] = js.native
  @JSName("next")
  def next_data(selector: data, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDataElement]] = js.native
  @JSName("next")
  def next_datalist(selector: datalist): Chainable[JQuery[HTMLDataListElement]] = js.native
  @JSName("next")
  def next_datalist(selector: datalist, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDataListElement]] = js.native
  @JSName("next")
  def next_dd(selector: dd): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_dd(selector: dd, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_del(selector: del): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("next")
  def next_del(selector: del, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("next")
  def next_details(selector: details): Chainable[JQuery[HTMLDetailsElement]] = js.native
  @JSName("next")
  def next_details(selector: details, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDetailsElement]] = js.native
  @JSName("next")
  def next_dfn(selector: dfn): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_dfn(selector: dfn, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_dialog(selector: dialog): Chainable[JQuery[HTMLDialogElement]] = js.native
  @JSName("next")
  def next_dialog(selector: dialog, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDialogElement]] = js.native
  @JSName("next")
  def next_div(selector: div): Chainable[JQuery[HTMLDivElement]] = js.native
  @JSName("next")
  def next_div(selector: div, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDivElement]] = js.native
  @JSName("next")
  def next_dl(selector: dl): Chainable[JQuery[HTMLDListElement]] = js.native
  @JSName("next")
  def next_dl(selector: dl, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDListElement]] = js.native
  @JSName("next")
  def next_dt(selector: dt): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_dt(selector: dt, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_em(selector: em): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_em(selector: em, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_embed(selector: embed): Chainable[JQuery[HTMLEmbedElement]] = js.native
  @JSName("next")
  def next_embed(selector: embed, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLEmbedElement]] = js.native
  @JSName("next")
  def next_fieldset(selector: fieldset): Chainable[JQuery[HTMLFieldSetElement]] = js.native
  @JSName("next")
  def next_fieldset(selector: fieldset, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLFieldSetElement]] = js.native
  @JSName("next")
  def next_figcaption(selector: figcaption): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_figcaption(selector: figcaption, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_figure(selector: figure): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_figure(selector: figure, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_footer(selector: footer): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_footer(selector: footer, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_form(selector: form): Chainable[JQuery[HTMLFormElement]] = js.native
  @JSName("next")
  def next_form(selector: form, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLFormElement]] = js.native
  @JSName("next")
  def next_h1(selector: h1): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("next")
  def next_h1(selector: h1, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("next")
  def next_h2(selector: h2): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("next")
  def next_h2(selector: h2, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("next")
  def next_h3(selector: h3): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("next")
  def next_h3(selector: h3, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("next")
  def next_h4(selector: h4): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("next")
  def next_h4(selector: h4, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("next")
  def next_h5(selector: h5): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("next")
  def next_h5(selector: h5, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("next")
  def next_h6(selector: h6): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("next")
  def next_h6(selector: h6, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("next")
  def next_head(selector: head_): Chainable[JQuery[HTMLHeadElement]] = js.native
  @JSName("next")
  def next_head(selector: head_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadElement]] = js.native
  @JSName("next")
  def next_header(selector: header): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_header(selector: header, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_hgroup(selector: hgroup): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_hgroup(selector: hgroup, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_hr(selector: hr): Chainable[JQuery[HTMLHRElement]] = js.native
  @JSName("next")
  def next_hr(selector: hr, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHRElement]] = js.native
  @JSName("next")
  def next_html(selector: html_): Chainable[JQuery[HTMLHtmlElement]] = js.native
  @JSName("next")
  def next_html(selector: html_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHtmlElement]] = js.native
  @JSName("next")
  def next_i(selector: i): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_i(selector: i, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_iframe(selector: iframe): Chainable[JQuery[HTMLIFrameElement]] = js.native
  @JSName("next")
  def next_iframe(selector: iframe, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLIFrameElement]] = js.native
  @JSName("next")
  def next_img(selector: img): Chainable[JQuery[HTMLImageElement]] = js.native
  @JSName("next")
  def next_img(selector: img, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLImageElement]] = js.native
  @JSName("next")
  def next_input(selector: input): Chainable[JQuery[HTMLInputElement]] = js.native
  @JSName("next")
  def next_input(selector: input, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLInputElement]] = js.native
  @JSName("next")
  def next_ins(selector: ins): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("next")
  def next_ins(selector: ins, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("next")
  def next_kbd(selector: kbd): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_kbd(selector: kbd, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_label(selector: label): Chainable[JQuery[HTMLLabelElement]] = js.native
  @JSName("next")
  def next_label(selector: label, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLabelElement]] = js.native
  @JSName("next")
  def next_legend(selector: legend): Chainable[JQuery[HTMLLegendElement]] = js.native
  @JSName("next")
  def next_legend(selector: legend, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLegendElement]] = js.native
  @JSName("next")
  def next_li(selector: li): Chainable[JQuery[HTMLLIElement]] = js.native
  @JSName("next")
  def next_li(selector: li, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLIElement]] = js.native
  @JSName("next")
  def next_link(selector: link_): Chainable[JQuery[HTMLLinkElement]] = js.native
  @JSName("next")
  def next_link(selector: link_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLinkElement]] = js.native
  @JSName("next")
  def next_main(selector: main): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_main(selector: main, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_map(selector: map): Chainable[JQuery[HTMLMapElement]] = js.native
  @JSName("next")
  def next_map(selector: map, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMapElement]] = js.native
  @JSName("next")
  def next_mark(selector: mark): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_mark(selector: mark, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_menu(selector: menu): Chainable[JQuery[HTMLMenuElement]] = js.native
  @JSName("next")
  def next_menu(selector: menu, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMenuElement]] = js.native
  @JSName("next")
  def next_meta(selector: meta): Chainable[JQuery[HTMLMetaElement]] = js.native
  @JSName("next")
  def next_meta(selector: meta, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMetaElement]] = js.native
  @JSName("next")
  def next_meter(selector: meter): Chainable[JQuery[HTMLMeterElement]] = js.native
  @JSName("next")
  def next_meter(selector: meter, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMeterElement]] = js.native
  @JSName("next")
  def next_nav(selector: nav): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_nav(selector: nav, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_noscript(selector: noscript): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_noscript(selector: noscript, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_object(selector: object_): Chainable[JQuery[HTMLObjectElement]] = js.native
  @JSName("next")
  def next_object(selector: object_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLObjectElement]] = js.native
  @JSName("next")
  def next_ol(selector: ol): Chainable[JQuery[HTMLOListElement]] = js.native
  @JSName("next")
  def next_ol(selector: ol, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOListElement]] = js.native
  @JSName("next")
  def next_optgroup(selector: optgroup): Chainable[JQuery[HTMLOptGroupElement]] = js.native
  @JSName("next")
  def next_optgroup(selector: optgroup, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOptGroupElement]] = js.native
  @JSName("next")
  def next_option(selector: option): Chainable[JQuery[HTMLOptionElement]] = js.native
  @JSName("next")
  def next_option(selector: option, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOptionElement]] = js.native
  @JSName("next")
  def next_output(selector: output): Chainable[JQuery[HTMLOutputElement]] = js.native
  @JSName("next")
  def next_output(selector: output, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOutputElement]] = js.native
  @JSName("next")
  def next_p(selector: p): Chainable[JQuery[HTMLParagraphElement]] = js.native
  @JSName("next")
  def next_p(selector: p, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLParagraphElement]] = js.native
  @JSName("next")
  def next_picture(selector: picture): Chainable[JQuery[HTMLPictureElement]] = js.native
  @JSName("next")
  def next_picture(selector: picture, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLPictureElement]] = js.native
  @JSName("next")
  def next_pre(selector: pre): Chainable[JQuery[HTMLPreElement]] = js.native
  @JSName("next")
  def next_pre(selector: pre, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLPreElement]] = js.native
  @JSName("next")
  def next_progress(selector: progress_): Chainable[JQuery[HTMLProgressElement]] = js.native
  @JSName("next")
  def next_progress(selector: progress_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLProgressElement]] = js.native
  @JSName("next")
  def next_q(selector: q): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("next")
  def next_q(selector: q, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("next")
  def next_rp(selector: rp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_rp(selector: rp, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_rt(selector: rt): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_rt(selector: rt, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_ruby(selector: ruby): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_ruby(selector: ruby, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_s(selector: s): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_s(selector: s, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_samp(selector: samp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_samp(selector: samp, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_script(selector: script): Chainable[JQuery[HTMLScriptElement]] = js.native
  @JSName("next")
  def next_script(selector: script, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLScriptElement]] = js.native
  @JSName("next")
  def next_section(selector: section): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_section(selector: section, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_select(selector: select): Chainable[JQuery[HTMLSelectElement]] = js.native
  @JSName("next")
  def next_select(selector: select, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSelectElement]] = js.native
  @JSName("next")
  def next_slot(selector: slot): Chainable[JQuery[HTMLSlotElement]] = js.native
  @JSName("next")
  def next_slot(selector: slot, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSlotElement]] = js.native
  @JSName("next")
  def next_small(selector: small): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_small(selector: small, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_source(selector: source_): Chainable[JQuery[HTMLSourceElement]] = js.native
  @JSName("next")
  def next_source(selector: source_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSourceElement]] = js.native
  @JSName("next")
  def next_span(selector: span): Chainable[JQuery[HTMLSpanElement]] = js.native
  @JSName("next")
  def next_span(selector: span, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSpanElement]] = js.native
  @JSName("next")
  def next_strong(selector: strong): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_strong(selector: strong, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_style(selector: style): Chainable[JQuery[HTMLStyleElement]] = js.native
  @JSName("next")
  def next_style(selector: style, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLStyleElement]] = js.native
  @JSName("next")
  def next_sub(selector: sub): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_sub(selector: sub, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_summary(selector: summary): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_summary(selector: summary, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_sup(selector: sup): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_sup(selector: sup, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_table(selector: table): Chainable[JQuery[HTMLTableElement]] = js.native
  @JSName("next")
  def next_table(selector: table, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableElement]] = js.native
  @JSName("next")
  def next_tbody(selector: tbody): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("next")
  def next_tbody(selector: tbody, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("next")
  def next_td(selector: td): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("next")
  def next_td(selector: td, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("next")
  def next_template(selector: template): Chainable[JQuery[HTMLTemplateElement]] = js.native
  @JSName("next")
  def next_template(selector: template, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTemplateElement]] = js.native
  @JSName("next")
  def next_textarea(selector: textarea): Chainable[JQuery[HTMLTextAreaElement]] = js.native
  @JSName("next")
  def next_textarea(selector: textarea, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTextAreaElement]] = js.native
  @JSName("next")
  def next_tfoot(selector: tfoot): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("next")
  def next_tfoot(selector: tfoot, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("next")
  def next_th(selector: th): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("next")
  def next_th(selector: th, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("next")
  def next_thead(selector: thead): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("next")
  def next_thead(selector: thead, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("next")
  def next_time(selector: time): Chainable[JQuery[HTMLTimeElement]] = js.native
  @JSName("next")
  def next_time(selector: time, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTimeElement]] = js.native
  @JSName("next")
  def next_title(selector: title): Chainable[JQuery[HTMLTitleElement]] = js.native
  @JSName("next")
  def next_title(selector: title, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTitleElement]] = js.native
  @JSName("next")
  def next_tr(selector: tr): Chainable[JQuery[HTMLTableRowElement]] = js.native
  @JSName("next")
  def next_tr(selector: tr, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableRowElement]] = js.native
  @JSName("next")
  def next_track(selector: track): Chainable[JQuery[HTMLTrackElement]] = js.native
  @JSName("next")
  def next_track(selector: track, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTrackElement]] = js.native
  @JSName("next")
  def next_u(selector: u): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_u(selector: u, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_ul(selector: ul): Chainable[JQuery[HTMLUListElement]] = js.native
  @JSName("next")
  def next_ul(selector: ul, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLUListElement]] = js.native
  @JSName("next")
  def next_var(selector: `var`): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_var(selector: `var`, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_video(selector: video): Chainable[JQuery[HTMLVideoElement]] = js.native
  @JSName("next")
  def next_video(selector: video, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLVideoElement]] = js.native
  @JSName("next")
  def next_wbr(selector: wbr): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("next")
  def next_wbr(selector: wbr, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  
  /**
    * Filter DOM element(s) from a set of DOM elements. Opposite of `.filter()`
    *
    * @see https://on.cypress.io/not
    */
  def not(selector: String): Chainable[JQuery[HTMLElement]] = js.native
  def not(selector: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  
  /**
    * Fires when an uncaught exception or unhandled rejection occurs in your application. If it's an unhandled rejection, the rejected promise will be the 3rd argument.
    * Cypress will fail the test when this fires.
    * Return `false` from this event and Cypress will not fail the test. Also useful for debugging purposes because the actual `error` instance is provided to you.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    * @example
    ```
    // likely want to do this in a support file
    // so it's applied to all spec files
    // cypress/support/{e2e|component}.js
    Cypress.on('uncaught:exception', (err, runnable) => {
    // returning false here prevents Cypress from
    // failing the test
    return false
    })
    // stub "window.alert" in a single test
    it('shows alert', () => {
    const stub = cy.stub()
    cy.on('window:alert', stub)
    // trigger application code that calls alert(...)
    .then(() => {
    expect(stub).to.have.been.calledOnce
    })
    })
    ```
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  def off(
    action: uncaughtColonexception,
    fn: js.Function3[
      /* error */ js.Error, 
      /* runnable */ Runnable, 
      /* promise */ js.UndefOr[js.Promise[Any]], 
      `false` | Unit
    ]
  ): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires when your app calls the global `window.confirm()` method.
    * Cypress will auto accept confirmations. Return `false` from this event and the confirmation will be canceled.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    * @example
    ```
    cy.on('window:confirm', (str) => {
    console.log(str)
    return false // simulate "Cancel"
    })
    ```
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  def off(action: windowColonconfirm, fn: js.Function1[/* text */ String, `false` | Unit]): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("off")
  var off_Original: Actions = js.native
  /**
    * Fires when cy finishes running and executing your command.
    * Useful for debugging and understanding how commands are handled.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("off")
  def off_commandend(action: commandColonend, fn: js.Function1[/* command */ CommandQueue, Unit]): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires when a cy command is first invoked and enqueued to be run later.
    * Useful for debugging purposes if you're confused about the order in which commands will execute.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("off")
  def off_commandenqueued(action: commandColonenqueued, fn: js.Function1[/* command */ EnqueuedCommand, Unit]): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires whenever a command begins its retrying routines.
    * This is called on the trailing edge after Cypress has internally
    * waited for the retry interval. Useful to understand **why** a command is retrying,
    * and generally includes the actual error causing the retry to happen.
    * When commands fail the final error is the one that actually bubbles up to fail the test.
    * This event is essentially to debug why Cypress is failing.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("off")
  def off_commandretry(action: commandColonretry, fn: js.Function1[/* command */ CommandQueue, Unit]): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires when cy begins actually running and executing your command.
    * Useful for debugging and understanding how the command queue is async.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("off")
  def off_commandstart(action: commandColonstart, fn: js.Function1[/* command */ CommandQueue, Unit]): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires when the test has failed. It is technically possible to prevent the test
    * from actually failing by binding to this event and invoking an async `done` callback.
    * However this is **strongly discouraged**. Tests should never legitimately fail.
    *  This event exists because it's extremely useful for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("off")
  def off_fail(action: fail, fn: js.Function2[/* error */ CypressError, /* mocha */ Runnable, Unit]): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires whenever a command emits this event so it can be displayed in the Command Log.
    * Useful to see how internal cypress commands utilize the {% url 'Cypress.log()' cypress-log %} API.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("off")
  def off_logadded(action: logColonadded, fn: js.Function2[/* log */ Any, /* interactive */ Boolean, Unit]): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires whenever a command's attributes changes.
    * This event is debounced to prevent it from firing too quickly and too often.
    * Useful to see how internal cypress commands utilize the {% url 'Cypress.log()' cypress-log %} API.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("off")
  def off_logchanged(action: logColonchanged, fn: js.Function2[/* log */ Any, /* interactive */ Boolean, Unit]): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires whenever **Cypress** is scrolling your application.
    * This event is fired when Cypress is {% url 'waiting for and calculating
    * actionability' interacting-with-elements %}. It will scroll to 'uncover'
    * elements currently being covered. This event is extremely useful to debug why
    * Cypress may think an element is not interactive.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("off")
  def off_scrolled(action: scrolled, fn: js.Function1[/* $el */ JQuery[HTMLElement], Unit]): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires when a command is skipped, namely the `should` command.
    * Useful for debugging and understanding how commands are handled.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("off")
  def off_skippedcommandend(action: skippedColoncommandColonend, fn: js.Function1[/* command */ CommandQueue, Unit]): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires after the test and all **afterEach** and **after** hooks run.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("off")
  def off_testafterrun(
    action: testColonafterColonrun,
    fn: js.Function2[/* attributes */ ObjectLike, /* test */ Test, Unit]
  ): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires before the test and all **before** and **beforeEach** hooks run.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("off")
  def off_testbeforerun(
    action: testColonbeforeColonrun,
    fn: js.Function2[/* attributes */ ObjectLike, /* test */ Test, Unit]
  ): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires before the test and all **before** and **beforeEach** hooks run.
    * If a `Promise` is returned, it will be awaited before proceeding.
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("off")
  def off_testbeforerunasync(
    action: testColonbeforeColonrunColonasync,
    fn: js.Function2[/* attributes */ ObjectLike, /* test */ Test, Unit | js.Promise[Any]]
  ): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires whenever Cypress detects that your application's URL has changed.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("off")
  def off_urlchanged(action: urlColonchanged, fn: js.Function1[/* url */ String, Unit]): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires whenever the viewport changes via a `cy.viewport()` or naturally when
    * Cypress resets the viewport to the default between tests. Useful for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("off")
  def off_viewportchanged(action: viewportColonchanged, fn: js.Function1[/* viewport */ Viewport, Unit]): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires when your app calls the global `window.alert()` method.
    * Cypress will auto accept alerts. You cannot change this behavior.
    * @example
    ```
    const stub = cy.stub()
    cy.on('window:alert', stub)
    // assume the button calls window.alert()
    cy.get('.my-button')
    .click()
    .then(() => {
    expect(stub).to.have.been.calledOnce
    })
    ```
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("off")
  def off_windowalert(action: windowColonalert, fn: js.Function1[/* text */ String, Unit]): typingsJapgolly.cypress.Cypress.Cypress = js.native
  @JSName("off")
  def off_windowalert(
    action: windowColonalert,
    fn: SinonSpyAgent[(SinonSpy[js.Array[Any], Any]) | (SinonStub[js.Array[Any], Any])]
  ): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires as the page begins to load, but before any of your applications JavaScript has executed.
    * This fires at the exact same time as `cy.visit()` `onBeforeLoad` callback.
    * Useful to modify the window on a page transition.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("off")
  def off_windowbeforeload(action: windowColonbeforeColonload, fn: js.Function1[/* win */ AUTWindow, Unit]): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires when your application is about to navigate away.
    * The real event object is provided to you.
    * Your app may have set a `returnValue` on the event, which is useful to assert on.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("off")
  def off_windowbeforeunload(action: windowColonbeforeColonunload, fn: js.Function1[/* event */ BeforeUnloadEvent, Unit]): typingsJapgolly.cypress.Cypress.Cypress = js.native
  @JSName("off")
  def off_windowconfirm(
    action: windowColonconfirm,
    fn: SinonSpyAgent[(SinonSpy[js.Array[Any], Any]) | (SinonStub[js.Array[Any], Any])]
  ): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires after all your resources have finished loading after a page transition.
    * This fires at the exact same time as a `cy.visit()` `onLoad` callback.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("off")
  def off_windowload(action: windowColonload, fn: js.Function1[/* win */ AUTWindow, Unit]): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires when your application is has unloaded and is navigating away.
    * The real event object is provided to you. This event is not cancelable.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("off")
  def off_windowunload(action: windowColonunload, fn: js.Function1[/* event */ Event, Unit]): typingsJapgolly.cypress.Cypress.Cypress = js.native
  
  /**
    * Fires when an uncaught exception or unhandled rejection occurs in your application. If it's an unhandled rejection, the rejected promise will be the 3rd argument.
    * Cypress will fail the test when this fires.
    * Return `false` from this event and Cypress will not fail the test. Also useful for debugging purposes because the actual `error` instance is provided to you.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    * @example
    ```
    // likely want to do this in a support file
    // so it's applied to all spec files
    // cypress/support/{e2e|component}.js
    Cypress.on('uncaught:exception', (err, runnable) => {
    // returning false here prevents Cypress from
    // failing the test
    return false
    })
    // stub "window.alert" in a single test
    it('shows alert', () => {
    const stub = cy.stub()
    cy.on('window:alert', stub)
    // trigger application code that calls alert(...)
    .then(() => {
    expect(stub).to.have.been.calledOnce
    })
    })
    ```
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  def on(
    action: uncaughtColonexception,
    fn: js.Function3[
      /* error */ js.Error, 
      /* runnable */ Runnable, 
      /* promise */ js.UndefOr[js.Promise[Any]], 
      `false` | Unit
    ]
  ): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires when your app calls the global `window.confirm()` method.
    * Cypress will auto accept confirmations. Return `false` from this event and the confirmation will be canceled.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    * @example
    ```
    cy.on('window:confirm', (str) => {
    console.log(str)
    return false // simulate "Cancel"
    })
    ```
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  def on(action: windowColonconfirm, fn: js.Function1[/* text */ String, `false` | Unit]): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("on")
  var on_Original: Actions = js.native
  /**
    * Fires when cy finishes running and executing your command.
    * Useful for debugging and understanding how commands are handled.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("on")
  def on_commandend(action: commandColonend, fn: js.Function1[/* command */ CommandQueue, Unit]): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires when a cy command is first invoked and enqueued to be run later.
    * Useful for debugging purposes if you're confused about the order in which commands will execute.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("on")
  def on_commandenqueued(action: commandColonenqueued, fn: js.Function1[/* command */ EnqueuedCommand, Unit]): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires whenever a command begins its retrying routines.
    * This is called on the trailing edge after Cypress has internally
    * waited for the retry interval. Useful to understand **why** a command is retrying,
    * and generally includes the actual error causing the retry to happen.
    * When commands fail the final error is the one that actually bubbles up to fail the test.
    * This event is essentially to debug why Cypress is failing.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("on")
  def on_commandretry(action: commandColonretry, fn: js.Function1[/* command */ CommandQueue, Unit]): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires when cy begins actually running and executing your command.
    * Useful for debugging and understanding how the command queue is async.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("on")
  def on_commandstart(action: commandColonstart, fn: js.Function1[/* command */ CommandQueue, Unit]): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires when the test has failed. It is technically possible to prevent the test
    * from actually failing by binding to this event and invoking an async `done` callback.
    * However this is **strongly discouraged**. Tests should never legitimately fail.
    *  This event exists because it's extremely useful for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("on")
  def on_fail(action: fail, fn: js.Function2[/* error */ CypressError, /* mocha */ Runnable, Unit]): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires whenever a command emits this event so it can be displayed in the Command Log.
    * Useful to see how internal cypress commands utilize the {% url 'Cypress.log()' cypress-log %} API.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("on")
  def on_logadded(action: logColonadded, fn: js.Function2[/* log */ Any, /* interactive */ Boolean, Unit]): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires whenever a command's attributes changes.
    * This event is debounced to prevent it from firing too quickly and too often.
    * Useful to see how internal cypress commands utilize the {% url 'Cypress.log()' cypress-log %} API.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("on")
  def on_logchanged(action: logColonchanged, fn: js.Function2[/* log */ Any, /* interactive */ Boolean, Unit]): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires whenever **Cypress** is scrolling your application.
    * This event is fired when Cypress is {% url 'waiting for and calculating
    * actionability' interacting-with-elements %}. It will scroll to 'uncover'
    * elements currently being covered. This event is extremely useful to debug why
    * Cypress may think an element is not interactive.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("on")
  def on_scrolled(action: scrolled, fn: js.Function1[/* $el */ JQuery[HTMLElement], Unit]): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires when a command is skipped, namely the `should` command.
    * Useful for debugging and understanding how commands are handled.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("on")
  def on_skippedcommandend(action: skippedColoncommandColonend, fn: js.Function1[/* command */ CommandQueue, Unit]): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires after the test and all **afterEach** and **after** hooks run.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("on")
  def on_testafterrun(
    action: testColonafterColonrun,
    fn: js.Function2[/* attributes */ ObjectLike, /* test */ Test, Unit]
  ): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires before the test and all **before** and **beforeEach** hooks run.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("on")
  def on_testbeforerun(
    action: testColonbeforeColonrun,
    fn: js.Function2[/* attributes */ ObjectLike, /* test */ Test, Unit]
  ): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires before the test and all **before** and **beforeEach** hooks run.
    * If a `Promise` is returned, it will be awaited before proceeding.
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("on")
  def on_testbeforerunasync(
    action: testColonbeforeColonrunColonasync,
    fn: js.Function2[/* attributes */ ObjectLike, /* test */ Test, Unit | js.Promise[Any]]
  ): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires whenever Cypress detects that your application's URL has changed.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("on")
  def on_urlchanged(action: urlColonchanged, fn: js.Function1[/* url */ String, Unit]): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires whenever the viewport changes via a `cy.viewport()` or naturally when
    * Cypress resets the viewport to the default between tests. Useful for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("on")
  def on_viewportchanged(action: viewportColonchanged, fn: js.Function1[/* viewport */ Viewport, Unit]): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires when your app calls the global `window.alert()` method.
    * Cypress will auto accept alerts. You cannot change this behavior.
    * @example
    ```
    const stub = cy.stub()
    cy.on('window:alert', stub)
    // assume the button calls window.alert()
    cy.get('.my-button')
    .click()
    .then(() => {
    expect(stub).to.have.been.calledOnce
    })
    ```
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("on")
  def on_windowalert(action: windowColonalert, fn: js.Function1[/* text */ String, Unit]): typingsJapgolly.cypress.Cypress.Cypress = js.native
  @JSName("on")
  def on_windowalert(
    action: windowColonalert,
    fn: SinonSpyAgent[(SinonSpy[js.Array[Any], Any]) | (SinonStub[js.Array[Any], Any])]
  ): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires as the page begins to load, but before any of your applications JavaScript has executed.
    * This fires at the exact same time as `cy.visit()` `onBeforeLoad` callback.
    * Useful to modify the window on a page transition.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("on")
  def on_windowbeforeload(action: windowColonbeforeColonload, fn: js.Function1[/* win */ AUTWindow, Unit]): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires when your application is about to navigate away.
    * The real event object is provided to you.
    * Your app may have set a `returnValue` on the event, which is useful to assert on.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("on")
  def on_windowbeforeunload(action: windowColonbeforeColonunload, fn: js.Function1[/* event */ BeforeUnloadEvent, Unit]): typingsJapgolly.cypress.Cypress.Cypress = js.native
  @JSName("on")
  def on_windowconfirm(
    action: windowColonconfirm,
    fn: SinonSpyAgent[(SinonSpy[js.Array[Any], Any]) | (SinonStub[js.Array[Any], Any])]
  ): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires after all your resources have finished loading after a page transition.
    * This fires at the exact same time as a `cy.visit()` `onLoad` callback.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("on")
  def on_windowload(action: windowColonload, fn: js.Function1[/* win */ AUTWindow, Unit]): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires when your application is has unloaded and is navigating away.
    * The real event object is provided to you. This event is not cancelable.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("on")
  def on_windowunload(action: windowColonunload, fn: js.Function1[/* event */ Event, Unit]): typingsJapgolly.cypress.Cypress.Cypress = js.native
  
  /**
    * Fires when an uncaught exception or unhandled rejection occurs in your application. If it's an unhandled rejection, the rejected promise will be the 3rd argument.
    * Cypress will fail the test when this fires.
    * Return `false` from this event and Cypress will not fail the test. Also useful for debugging purposes because the actual `error` instance is provided to you.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    * @example
    ```
    // likely want to do this in a support file
    // so it's applied to all spec files
    // cypress/support/{e2e|component}.js
    Cypress.on('uncaught:exception', (err, runnable) => {
    // returning false here prevents Cypress from
    // failing the test
    return false
    })
    // stub "window.alert" in a single test
    it('shows alert', () => {
    const stub = cy.stub()
    cy.on('window:alert', stub)
    // trigger application code that calls alert(...)
    .then(() => {
    expect(stub).to.have.been.calledOnce
    })
    })
    ```
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  def once(
    action: uncaughtColonexception,
    fn: js.Function3[
      /* error */ js.Error, 
      /* runnable */ Runnable, 
      /* promise */ js.UndefOr[js.Promise[Any]], 
      `false` | Unit
    ]
  ): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires when your app calls the global `window.confirm()` method.
    * Cypress will auto accept confirmations. Return `false` from this event and the confirmation will be canceled.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    * @example
    ```
    cy.on('window:confirm', (str) => {
    console.log(str)
    return false // simulate "Cancel"
    })
    ```
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  def once(action: windowColonconfirm, fn: js.Function1[/* text */ String, `false` | Unit]): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("once")
  var once_Original: Actions = js.native
  /**
    * Fires when cy finishes running and executing your command.
    * Useful for debugging and understanding how commands are handled.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("once")
  def once_commandend(action: commandColonend, fn: js.Function1[/* command */ CommandQueue, Unit]): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires when a cy command is first invoked and enqueued to be run later.
    * Useful for debugging purposes if you're confused about the order in which commands will execute.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("once")
  def once_commandenqueued(action: commandColonenqueued, fn: js.Function1[/* command */ EnqueuedCommand, Unit]): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires whenever a command begins its retrying routines.
    * This is called on the trailing edge after Cypress has internally
    * waited for the retry interval. Useful to understand **why** a command is retrying,
    * and generally includes the actual error causing the retry to happen.
    * When commands fail the final error is the one that actually bubbles up to fail the test.
    * This event is essentially to debug why Cypress is failing.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("once")
  def once_commandretry(action: commandColonretry, fn: js.Function1[/* command */ CommandQueue, Unit]): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires when cy begins actually running and executing your command.
    * Useful for debugging and understanding how the command queue is async.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("once")
  def once_commandstart(action: commandColonstart, fn: js.Function1[/* command */ CommandQueue, Unit]): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires when the test has failed. It is technically possible to prevent the test
    * from actually failing by binding to this event and invoking an async `done` callback.
    * However this is **strongly discouraged**. Tests should never legitimately fail.
    *  This event exists because it's extremely useful for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("once")
  def once_fail(action: fail, fn: js.Function2[/* error */ CypressError, /* mocha */ Runnable, Unit]): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires whenever a command emits this event so it can be displayed in the Command Log.
    * Useful to see how internal cypress commands utilize the {% url 'Cypress.log()' cypress-log %} API.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("once")
  def once_logadded(action: logColonadded, fn: js.Function2[/* log */ Any, /* interactive */ Boolean, Unit]): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires whenever a command's attributes changes.
    * This event is debounced to prevent it from firing too quickly and too often.
    * Useful to see how internal cypress commands utilize the {% url 'Cypress.log()' cypress-log %} API.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("once")
  def once_logchanged(action: logColonchanged, fn: js.Function2[/* log */ Any, /* interactive */ Boolean, Unit]): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires whenever **Cypress** is scrolling your application.
    * This event is fired when Cypress is {% url 'waiting for and calculating
    * actionability' interacting-with-elements %}. It will scroll to 'uncover'
    * elements currently being covered. This event is extremely useful to debug why
    * Cypress may think an element is not interactive.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("once")
  def once_scrolled(action: scrolled, fn: js.Function1[/* $el */ JQuery[HTMLElement], Unit]): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires when a command is skipped, namely the `should` command.
    * Useful for debugging and understanding how commands are handled.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("once")
  def once_skippedcommandend(action: skippedColoncommandColonend, fn: js.Function1[/* command */ CommandQueue, Unit]): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires after the test and all **afterEach** and **after** hooks run.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("once")
  def once_testafterrun(
    action: testColonafterColonrun,
    fn: js.Function2[/* attributes */ ObjectLike, /* test */ Test, Unit]
  ): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires before the test and all **before** and **beforeEach** hooks run.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("once")
  def once_testbeforerun(
    action: testColonbeforeColonrun,
    fn: js.Function2[/* attributes */ ObjectLike, /* test */ Test, Unit]
  ): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires before the test and all **before** and **beforeEach** hooks run.
    * If a `Promise` is returned, it will be awaited before proceeding.
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("once")
  def once_testbeforerunasync(
    action: testColonbeforeColonrunColonasync,
    fn: js.Function2[/* attributes */ ObjectLike, /* test */ Test, Unit | js.Promise[Any]]
  ): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires whenever Cypress detects that your application's URL has changed.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("once")
  def once_urlchanged(action: urlColonchanged, fn: js.Function1[/* url */ String, Unit]): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires whenever the viewport changes via a `cy.viewport()` or naturally when
    * Cypress resets the viewport to the default between tests. Useful for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("once")
  def once_viewportchanged(action: viewportColonchanged, fn: js.Function1[/* viewport */ Viewport, Unit]): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires when your app calls the global `window.alert()` method.
    * Cypress will auto accept alerts. You cannot change this behavior.
    * @example
    ```
    const stub = cy.stub()
    cy.on('window:alert', stub)
    // assume the button calls window.alert()
    cy.get('.my-button')
    .click()
    .then(() => {
    expect(stub).to.have.been.calledOnce
    })
    ```
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("once")
  def once_windowalert(action: windowColonalert, fn: js.Function1[/* text */ String, Unit]): typingsJapgolly.cypress.Cypress.Cypress = js.native
  @JSName("once")
  def once_windowalert(
    action: windowColonalert,
    fn: SinonSpyAgent[(SinonSpy[js.Array[Any], Any]) | (SinonStub[js.Array[Any], Any])]
  ): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires as the page begins to load, but before any of your applications JavaScript has executed.
    * This fires at the exact same time as `cy.visit()` `onBeforeLoad` callback.
    * Useful to modify the window on a page transition.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("once")
  def once_windowbeforeload(action: windowColonbeforeColonload, fn: js.Function1[/* win */ AUTWindow, Unit]): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires when your application is about to navigate away.
    * The real event object is provided to you.
    * Your app may have set a `returnValue` on the event, which is useful to assert on.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("once")
  def once_windowbeforeunload(action: windowColonbeforeColonunload, fn: js.Function1[/* event */ BeforeUnloadEvent, Unit]): typingsJapgolly.cypress.Cypress.Cypress = js.native
  @JSName("once")
  def once_windowconfirm(
    action: windowColonconfirm,
    fn: SinonSpyAgent[(SinonSpy[js.Array[Any], Any]) | (SinonStub[js.Array[Any], Any])]
  ): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires after all your resources have finished loading after a page transition.
    * This fires at the exact same time as a `cy.visit()` `onLoad` callback.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("once")
  def once_windowload(action: windowColonload, fn: js.Function1[/* win */ AUTWindow, Unit]): typingsJapgolly.cypress.Cypress.Cypress = js.native
  /**
    * Fires when your application is has unloaded and is navigating away.
    * The real event object is provided to you. This event is not cancelable.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("once")
  def once_windowunload(action: windowColonunload, fn: js.Function1[/* event */ Event, Unit]): typingsJapgolly.cypress.Cypress.Cypress = js.native
  
  /**
    * Enables running Cypress commands in a secondary origin.
    * @see https://on.cypress.io/origin
    * @example
    *    cy.origin('example.com', () => {
    *      cy.get('h1').should('equal', 'Example Domain')
    *    })
    */
  def origin[T /* <: Any */](urlOrDomain: String, fn: js.Function0[Unit]): Chainable[T] = js.native
  /**
    * Enables running Cypress commands in a secondary origin.
    * @see https://on.cypress.io/origin
    * @example
    *    cy.origin('example.com', { args: { key: 'value', foo: 'foo' } }, ({ key, foo }) => {
    *      expect(key).to.equal('value')
    *      expect(foo).to.equal('foo')
    *    })
    */
  def origin[T, S /* <: Any */](urlOrDomain: String, options: Args[T], fn: js.Function1[/* args */ T, Unit]): Chainable[S] = js.native
  
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  def parent[E /* <: Node */](): Chainable[JQuery[E]] = js.native
  def parent[E /* <: Node */](options: PartialLoggableTimeoutabl): Chainable[JQuery[E]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  def parent[E /* <: Node */](selector: String): Chainable[JQuery[E]] = js.native
  def parent[E /* <: Node */](selector: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[E]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_a(selector: a): Chainable[JQuery[HTMLAnchorElement]] = js.native
  @JSName("parent")
  def parent_a(selector: a, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLAnchorElement]] = js.native
  @JSName("parent")
  def parent_abbr(selector: abbr): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_abbr(selector: abbr, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_address(selector: address): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_address(selector: address, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_area(selector: area): Chainable[JQuery[HTMLAreaElement]] = js.native
  @JSName("parent")
  def parent_area(selector: area, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLAreaElement]] = js.native
  @JSName("parent")
  def parent_article(selector: article): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_article(selector: article, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_aside(selector: aside): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_aside(selector: aside, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_audio(selector: audio): Chainable[JQuery[HTMLAudioElement]] = js.native
  @JSName("parent")
  def parent_audio(selector: audio, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLAudioElement]] = js.native
  @JSName("parent")
  def parent_b(selector: b): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_b(selector: b, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_base(selector: base_): Chainable[JQuery[HTMLBaseElement]] = js.native
  @JSName("parent")
  def parent_base(selector: base_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLBaseElement]] = js.native
  @JSName("parent")
  def parent_bdi(selector: bdi): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_bdi(selector: bdi, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_bdo(selector: bdo): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_bdo(selector: bdo, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_blockquote(selector: blockquote): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("parent")
  def parent_blockquote(selector: blockquote, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("parent")
  def parent_body(selector: body): Chainable[JQuery[HTMLBodyElement]] = js.native
  @JSName("parent")
  def parent_body(selector: body, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLBodyElement]] = js.native
  @JSName("parent")
  def parent_br(selector: br): Chainable[JQuery[HTMLBRElement]] = js.native
  @JSName("parent")
  def parent_br(selector: br, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLBRElement]] = js.native
  @JSName("parent")
  def parent_button(selector: button): Chainable[JQuery[HTMLButtonElement]] = js.native
  @JSName("parent")
  def parent_button(selector: button, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLButtonElement]] = js.native
  @JSName("parent")
  def parent_canvas(selector: canvas): Chainable[JQuery[HTMLCanvasElement]] = js.native
  @JSName("parent")
  def parent_canvas(selector: canvas, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLCanvasElement]] = js.native
  @JSName("parent")
  def parent_caption(selector: caption): Chainable[JQuery[HTMLTableCaptionElement]] = js.native
  @JSName("parent")
  def parent_caption(selector: caption, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableCaptionElement]] = js.native
  @JSName("parent")
  def parent_cite(selector: cite): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_cite(selector: cite, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_code(selector: code): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_code(selector: code, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_col(selector: col): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("parent")
  def parent_col(selector: col, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("parent")
  def parent_colgroup(selector: colgroup): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("parent")
  def parent_colgroup(selector: colgroup, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("parent")
  def parent_data(selector: data): Chainable[JQuery[HTMLDataElement]] = js.native
  @JSName("parent")
  def parent_data(selector: data, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDataElement]] = js.native
  @JSName("parent")
  def parent_datalist(selector: datalist): Chainable[JQuery[HTMLDataListElement]] = js.native
  @JSName("parent")
  def parent_datalist(selector: datalist, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDataListElement]] = js.native
  @JSName("parent")
  def parent_dd(selector: dd): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_dd(selector: dd, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_del(selector: del): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("parent")
  def parent_del(selector: del, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("parent")
  def parent_details(selector: details): Chainable[JQuery[HTMLDetailsElement]] = js.native
  @JSName("parent")
  def parent_details(selector: details, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDetailsElement]] = js.native
  @JSName("parent")
  def parent_dfn(selector: dfn): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_dfn(selector: dfn, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_dialog(selector: dialog): Chainable[JQuery[HTMLDialogElement]] = js.native
  @JSName("parent")
  def parent_dialog(selector: dialog, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDialogElement]] = js.native
  @JSName("parent")
  def parent_div(selector: div): Chainable[JQuery[HTMLDivElement]] = js.native
  @JSName("parent")
  def parent_div(selector: div, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDivElement]] = js.native
  @JSName("parent")
  def parent_dl(selector: dl): Chainable[JQuery[HTMLDListElement]] = js.native
  @JSName("parent")
  def parent_dl(selector: dl, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDListElement]] = js.native
  @JSName("parent")
  def parent_dt(selector: dt): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_dt(selector: dt, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_em(selector: em): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_em(selector: em, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_embed(selector: embed): Chainable[JQuery[HTMLEmbedElement]] = js.native
  @JSName("parent")
  def parent_embed(selector: embed, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLEmbedElement]] = js.native
  @JSName("parent")
  def parent_fieldset(selector: fieldset): Chainable[JQuery[HTMLFieldSetElement]] = js.native
  @JSName("parent")
  def parent_fieldset(selector: fieldset, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLFieldSetElement]] = js.native
  @JSName("parent")
  def parent_figcaption(selector: figcaption): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_figcaption(selector: figcaption, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_figure(selector: figure): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_figure(selector: figure, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_footer(selector: footer): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_footer(selector: footer, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_form(selector: form): Chainable[JQuery[HTMLFormElement]] = js.native
  @JSName("parent")
  def parent_form(selector: form, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLFormElement]] = js.native
  @JSName("parent")
  def parent_h1(selector: h1): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("parent")
  def parent_h1(selector: h1, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("parent")
  def parent_h2(selector: h2): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("parent")
  def parent_h2(selector: h2, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("parent")
  def parent_h3(selector: h3): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("parent")
  def parent_h3(selector: h3, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("parent")
  def parent_h4(selector: h4): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("parent")
  def parent_h4(selector: h4, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("parent")
  def parent_h5(selector: h5): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("parent")
  def parent_h5(selector: h5, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("parent")
  def parent_h6(selector: h6): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("parent")
  def parent_h6(selector: h6, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("parent")
  def parent_head(selector: head_): Chainable[JQuery[HTMLHeadElement]] = js.native
  @JSName("parent")
  def parent_head(selector: head_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadElement]] = js.native
  @JSName("parent")
  def parent_header(selector: header): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_header(selector: header, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_hgroup(selector: hgroup): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_hgroup(selector: hgroup, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_hr(selector: hr): Chainable[JQuery[HTMLHRElement]] = js.native
  @JSName("parent")
  def parent_hr(selector: hr, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHRElement]] = js.native
  @JSName("parent")
  def parent_html(selector: html_): Chainable[JQuery[HTMLHtmlElement]] = js.native
  @JSName("parent")
  def parent_html(selector: html_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHtmlElement]] = js.native
  @JSName("parent")
  def parent_i(selector: i): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_i(selector: i, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_iframe(selector: iframe): Chainable[JQuery[HTMLIFrameElement]] = js.native
  @JSName("parent")
  def parent_iframe(selector: iframe, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLIFrameElement]] = js.native
  @JSName("parent")
  def parent_img(selector: img): Chainable[JQuery[HTMLImageElement]] = js.native
  @JSName("parent")
  def parent_img(selector: img, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLImageElement]] = js.native
  @JSName("parent")
  def parent_input(selector: input): Chainable[JQuery[HTMLInputElement]] = js.native
  @JSName("parent")
  def parent_input(selector: input, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLInputElement]] = js.native
  @JSName("parent")
  def parent_ins(selector: ins): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("parent")
  def parent_ins(selector: ins, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("parent")
  def parent_kbd(selector: kbd): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_kbd(selector: kbd, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_label(selector: label): Chainable[JQuery[HTMLLabelElement]] = js.native
  @JSName("parent")
  def parent_label(selector: label, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLabelElement]] = js.native
  @JSName("parent")
  def parent_legend(selector: legend): Chainable[JQuery[HTMLLegendElement]] = js.native
  @JSName("parent")
  def parent_legend(selector: legend, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLegendElement]] = js.native
  @JSName("parent")
  def parent_li(selector: li): Chainable[JQuery[HTMLLIElement]] = js.native
  @JSName("parent")
  def parent_li(selector: li, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLIElement]] = js.native
  @JSName("parent")
  def parent_link(selector: link_): Chainable[JQuery[HTMLLinkElement]] = js.native
  @JSName("parent")
  def parent_link(selector: link_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLinkElement]] = js.native
  @JSName("parent")
  def parent_main(selector: main): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_main(selector: main, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_map(selector: map): Chainable[JQuery[HTMLMapElement]] = js.native
  @JSName("parent")
  def parent_map(selector: map, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMapElement]] = js.native
  @JSName("parent")
  def parent_mark(selector: mark): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_mark(selector: mark, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_menu(selector: menu): Chainable[JQuery[HTMLMenuElement]] = js.native
  @JSName("parent")
  def parent_menu(selector: menu, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMenuElement]] = js.native
  @JSName("parent")
  def parent_meta(selector: meta): Chainable[JQuery[HTMLMetaElement]] = js.native
  @JSName("parent")
  def parent_meta(selector: meta, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMetaElement]] = js.native
  @JSName("parent")
  def parent_meter(selector: meter): Chainable[JQuery[HTMLMeterElement]] = js.native
  @JSName("parent")
  def parent_meter(selector: meter, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMeterElement]] = js.native
  @JSName("parent")
  def parent_nav(selector: nav): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_nav(selector: nav, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_noscript(selector: noscript): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_noscript(selector: noscript, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_object(selector: object_): Chainable[JQuery[HTMLObjectElement]] = js.native
  @JSName("parent")
  def parent_object(selector: object_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLObjectElement]] = js.native
  @JSName("parent")
  def parent_ol(selector: ol): Chainable[JQuery[HTMLOListElement]] = js.native
  @JSName("parent")
  def parent_ol(selector: ol, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOListElement]] = js.native
  @JSName("parent")
  def parent_optgroup(selector: optgroup): Chainable[JQuery[HTMLOptGroupElement]] = js.native
  @JSName("parent")
  def parent_optgroup(selector: optgroup, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOptGroupElement]] = js.native
  @JSName("parent")
  def parent_option(selector: option): Chainable[JQuery[HTMLOptionElement]] = js.native
  @JSName("parent")
  def parent_option(selector: option, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOptionElement]] = js.native
  @JSName("parent")
  def parent_output(selector: output): Chainable[JQuery[HTMLOutputElement]] = js.native
  @JSName("parent")
  def parent_output(selector: output, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOutputElement]] = js.native
  @JSName("parent")
  def parent_p(selector: p): Chainable[JQuery[HTMLParagraphElement]] = js.native
  @JSName("parent")
  def parent_p(selector: p, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLParagraphElement]] = js.native
  @JSName("parent")
  def parent_picture(selector: picture): Chainable[JQuery[HTMLPictureElement]] = js.native
  @JSName("parent")
  def parent_picture(selector: picture, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLPictureElement]] = js.native
  @JSName("parent")
  def parent_pre(selector: pre): Chainable[JQuery[HTMLPreElement]] = js.native
  @JSName("parent")
  def parent_pre(selector: pre, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLPreElement]] = js.native
  @JSName("parent")
  def parent_progress(selector: progress_): Chainable[JQuery[HTMLProgressElement]] = js.native
  @JSName("parent")
  def parent_progress(selector: progress_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLProgressElement]] = js.native
  @JSName("parent")
  def parent_q(selector: q): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("parent")
  def parent_q(selector: q, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("parent")
  def parent_rp(selector: rp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_rp(selector: rp, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_rt(selector: rt): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_rt(selector: rt, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_ruby(selector: ruby): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_ruby(selector: ruby, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_s(selector: s): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_s(selector: s, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_samp(selector: samp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_samp(selector: samp, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_script(selector: script): Chainable[JQuery[HTMLScriptElement]] = js.native
  @JSName("parent")
  def parent_script(selector: script, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLScriptElement]] = js.native
  @JSName("parent")
  def parent_section(selector: section): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_section(selector: section, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_select(selector: select): Chainable[JQuery[HTMLSelectElement]] = js.native
  @JSName("parent")
  def parent_select(selector: select, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSelectElement]] = js.native
  @JSName("parent")
  def parent_slot(selector: slot): Chainable[JQuery[HTMLSlotElement]] = js.native
  @JSName("parent")
  def parent_slot(selector: slot, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSlotElement]] = js.native
  @JSName("parent")
  def parent_small(selector: small): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_small(selector: small, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_source(selector: source_): Chainable[JQuery[HTMLSourceElement]] = js.native
  @JSName("parent")
  def parent_source(selector: source_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSourceElement]] = js.native
  @JSName("parent")
  def parent_span(selector: span): Chainable[JQuery[HTMLSpanElement]] = js.native
  @JSName("parent")
  def parent_span(selector: span, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSpanElement]] = js.native
  @JSName("parent")
  def parent_strong(selector: strong): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_strong(selector: strong, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_style(selector: style): Chainable[JQuery[HTMLStyleElement]] = js.native
  @JSName("parent")
  def parent_style(selector: style, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLStyleElement]] = js.native
  @JSName("parent")
  def parent_sub(selector: sub): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_sub(selector: sub, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_summary(selector: summary): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_summary(selector: summary, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_sup(selector: sup): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_sup(selector: sup, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_table(selector: table): Chainable[JQuery[HTMLTableElement]] = js.native
  @JSName("parent")
  def parent_table(selector: table, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableElement]] = js.native
  @JSName("parent")
  def parent_tbody(selector: tbody): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("parent")
  def parent_tbody(selector: tbody, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("parent")
  def parent_td(selector: td): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("parent")
  def parent_td(selector: td, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("parent")
  def parent_template(selector: template): Chainable[JQuery[HTMLTemplateElement]] = js.native
  @JSName("parent")
  def parent_template(selector: template, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTemplateElement]] = js.native
  @JSName("parent")
  def parent_textarea(selector: textarea): Chainable[JQuery[HTMLTextAreaElement]] = js.native
  @JSName("parent")
  def parent_textarea(selector: textarea, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTextAreaElement]] = js.native
  @JSName("parent")
  def parent_tfoot(selector: tfoot): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("parent")
  def parent_tfoot(selector: tfoot, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("parent")
  def parent_th(selector: th): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("parent")
  def parent_th(selector: th, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("parent")
  def parent_thead(selector: thead): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("parent")
  def parent_thead(selector: thead, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("parent")
  def parent_time(selector: time): Chainable[JQuery[HTMLTimeElement]] = js.native
  @JSName("parent")
  def parent_time(selector: time, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTimeElement]] = js.native
  @JSName("parent")
  def parent_title(selector: title): Chainable[JQuery[HTMLTitleElement]] = js.native
  @JSName("parent")
  def parent_title(selector: title, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTitleElement]] = js.native
  @JSName("parent")
  def parent_tr(selector: tr): Chainable[JQuery[HTMLTableRowElement]] = js.native
  @JSName("parent")
  def parent_tr(selector: tr, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableRowElement]] = js.native
  @JSName("parent")
  def parent_track(selector: track): Chainable[JQuery[HTMLTrackElement]] = js.native
  @JSName("parent")
  def parent_track(selector: track, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTrackElement]] = js.native
  @JSName("parent")
  def parent_u(selector: u): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_u(selector: u, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_ul(selector: ul): Chainable[JQuery[HTMLUListElement]] = js.native
  @JSName("parent")
  def parent_ul(selector: ul, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLUListElement]] = js.native
  @JSName("parent")
  def parent_var(selector: `var`): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_var(selector: `var`, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_video(selector: video): Chainable[JQuery[HTMLVideoElement]] = js.native
  @JSName("parent")
  def parent_video(selector: video, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLVideoElement]] = js.native
  @JSName("parent")
  def parent_wbr(selector: wbr): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parent")
  def parent_wbr(selector: wbr, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  def parents[E /* <: Node */](): Chainable[JQuery[E]] = js.native
  def parents[E /* <: Node */](options: PartialLoggableTimeoutabl): Chainable[JQuery[E]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  def parents[E /* <: Node */](selector: String): Chainable[JQuery[E]] = js.native
  def parents[E /* <: Node */](selector: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[E]] = js.native
  
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  def parentsUntil[E /* <: Node */](element: E): Chainable[JQuery[E]] = js.native
  def parentsUntil[E /* <: Node */](element: E, filter: String): Chainable[JQuery[E]] = js.native
  def parentsUntil[E /* <: Node */](element: E, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[E]] = js.native
  def parentsUntil[E /* <: Node */](element: E, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[E]] = js.native
  def parentsUntil[E /* <: Node */](element: JQuery[E]): Chainable[JQuery[E]] = js.native
  def parentsUntil[E /* <: Node */](element: JQuery[E], filter: String): Chainable[JQuery[E]] = js.native
  def parentsUntil[E /* <: Node */](element: JQuery[E], filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[E]] = js.native
  def parentsUntil[E /* <: Node */](element: JQuery[E], filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[E]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  def parentsUntil[E /* <: Node */](selector: String): Chainable[JQuery[E]] = js.native
  def parentsUntil[E /* <: Node */](selector: String, filter: String): Chainable[JQuery[E]] = js.native
  def parentsUntil[E /* <: Node */](selector: String, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[E]] = js.native
  def parentsUntil[E /* <: Node */](selector: String, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[E]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_a(selector: a): Chainable[JQuery[HTMLAnchorElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_a(selector: a, filter: String): Chainable[JQuery[HTMLAnchorElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_a(selector: a, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLAnchorElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_a(selector: a, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLAnchorElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_abbr(selector: abbr): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_abbr(selector: abbr, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_abbr(selector: abbr, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_abbr(selector: abbr, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_address(selector: address): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_address(selector: address, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_address(selector: address, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_address(selector: address, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_area(selector: area): Chainable[JQuery[HTMLAreaElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_area(selector: area, filter: String): Chainable[JQuery[HTMLAreaElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_area(selector: area, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLAreaElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_area(selector: area, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLAreaElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_article(selector: article): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_article(selector: article, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_article(selector: article, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_article(selector: article, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_aside(selector: aside): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_aside(selector: aside, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_aside(selector: aside, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_aside(selector: aside, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_audio(selector: audio): Chainable[JQuery[HTMLAudioElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_audio(selector: audio, filter: String): Chainable[JQuery[HTMLAudioElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_audio(selector: audio, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLAudioElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_audio(selector: audio, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLAudioElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_b(selector: b): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_b(selector: b, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_b(selector: b, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_b(selector: b, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_base(selector: base_): Chainable[JQuery[HTMLBaseElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_base(selector: base_, filter: String): Chainable[JQuery[HTMLBaseElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_base(selector: base_, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLBaseElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_base(selector: base_, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLBaseElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_bdi(selector: bdi): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_bdi(selector: bdi, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_bdi(selector: bdi, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_bdi(selector: bdi, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_bdo(selector: bdo): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_bdo(selector: bdo, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_bdo(selector: bdo, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_bdo(selector: bdo, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_blockquote(selector: blockquote): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_blockquote(selector: blockquote, filter: String): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_blockquote(selector: blockquote, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_blockquote(selector: blockquote, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_body(selector: body): Chainable[JQuery[HTMLBodyElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_body(selector: body, filter: String): Chainable[JQuery[HTMLBodyElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_body(selector: body, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLBodyElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_body(selector: body, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLBodyElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_br(selector: br): Chainable[JQuery[HTMLBRElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_br(selector: br, filter: String): Chainable[JQuery[HTMLBRElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_br(selector: br, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLBRElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_br(selector: br, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLBRElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_button(selector: button): Chainable[JQuery[HTMLButtonElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_button(selector: button, filter: String): Chainable[JQuery[HTMLButtonElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_button(selector: button, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLButtonElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_button(selector: button, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLButtonElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_canvas(selector: canvas): Chainable[JQuery[HTMLCanvasElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_canvas(selector: canvas, filter: String): Chainable[JQuery[HTMLCanvasElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_canvas(selector: canvas, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLCanvasElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_canvas(selector: canvas, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLCanvasElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_caption(selector: caption): Chainable[JQuery[HTMLTableCaptionElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_caption(selector: caption, filter: String): Chainable[JQuery[HTMLTableCaptionElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_caption(selector: caption, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableCaptionElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_caption(selector: caption, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableCaptionElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_cite(selector: cite): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_cite(selector: cite, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_cite(selector: cite, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_cite(selector: cite, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_code(selector: code): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_code(selector: code, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_code(selector: code, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_code(selector: code, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_col(selector: col): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_col(selector: col, filter: String): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_col(selector: col, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_col(selector: col, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_colgroup(selector: colgroup): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_colgroup(selector: colgroup, filter: String): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_colgroup(selector: colgroup, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_colgroup(selector: colgroup, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_data(selector: data): Chainable[JQuery[HTMLDataElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_data(selector: data, filter: String): Chainable[JQuery[HTMLDataElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_data(selector: data, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDataElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_data(selector: data, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDataElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_datalist(selector: datalist): Chainable[JQuery[HTMLDataListElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_datalist(selector: datalist, filter: String): Chainable[JQuery[HTMLDataListElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_datalist(selector: datalist, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDataListElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_datalist(selector: datalist, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDataListElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_dd(selector: dd): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_dd(selector: dd, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_dd(selector: dd, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_dd(selector: dd, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_del(selector: del): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_del(selector: del, filter: String): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_del(selector: del, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_del(selector: del, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_details(selector: details): Chainable[JQuery[HTMLDetailsElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_details(selector: details, filter: String): Chainable[JQuery[HTMLDetailsElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_details(selector: details, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDetailsElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_details(selector: details, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDetailsElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_dfn(selector: dfn): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_dfn(selector: dfn, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_dfn(selector: dfn, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_dfn(selector: dfn, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_dialog(selector: dialog): Chainable[JQuery[HTMLDialogElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_dialog(selector: dialog, filter: String): Chainable[JQuery[HTMLDialogElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_dialog(selector: dialog, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDialogElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_dialog(selector: dialog, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDialogElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_div(selector: div): Chainable[JQuery[HTMLDivElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_div(selector: div, filter: String): Chainable[JQuery[HTMLDivElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_div(selector: div, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDivElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_div(selector: div, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDivElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_dl(selector: dl): Chainable[JQuery[HTMLDListElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_dl(selector: dl, filter: String): Chainable[JQuery[HTMLDListElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_dl(selector: dl, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDListElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_dl(selector: dl, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDListElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_dt(selector: dt): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_dt(selector: dt, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_dt(selector: dt, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_dt(selector: dt, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_em(selector: em): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_em(selector: em, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_em(selector: em, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_em(selector: em, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_embed(selector: embed): Chainable[JQuery[HTMLEmbedElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_embed(selector: embed, filter: String): Chainable[JQuery[HTMLEmbedElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_embed(selector: embed, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLEmbedElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_embed(selector: embed, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLEmbedElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_fieldset(selector: fieldset): Chainable[JQuery[HTMLFieldSetElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_fieldset(selector: fieldset, filter: String): Chainable[JQuery[HTMLFieldSetElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_fieldset(selector: fieldset, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLFieldSetElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_fieldset(selector: fieldset, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLFieldSetElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_figcaption(selector: figcaption): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_figcaption(selector: figcaption, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_figcaption(selector: figcaption, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_figcaption(selector: figcaption, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_figure(selector: figure): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_figure(selector: figure, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_figure(selector: figure, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_figure(selector: figure, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_footer(selector: footer): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_footer(selector: footer, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_footer(selector: footer, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_footer(selector: footer, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_form(selector: form): Chainable[JQuery[HTMLFormElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_form(selector: form, filter: String): Chainable[JQuery[HTMLFormElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_form(selector: form, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLFormElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_form(selector: form, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLFormElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_h1(selector: h1): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_h1(selector: h1, filter: String): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_h1(selector: h1, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_h1(selector: h1, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_h2(selector: h2): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_h2(selector: h2, filter: String): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_h2(selector: h2, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_h2(selector: h2, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_h3(selector: h3): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_h3(selector: h3, filter: String): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_h3(selector: h3, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_h3(selector: h3, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_h4(selector: h4): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_h4(selector: h4, filter: String): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_h4(selector: h4, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_h4(selector: h4, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_h5(selector: h5): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_h5(selector: h5, filter: String): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_h5(selector: h5, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_h5(selector: h5, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_h6(selector: h6): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_h6(selector: h6, filter: String): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_h6(selector: h6, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_h6(selector: h6, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_head(selector: head_): Chainable[JQuery[HTMLHeadElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_head(selector: head_, filter: String): Chainable[JQuery[HTMLHeadElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_head(selector: head_, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_head(selector: head_, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_header(selector: header): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_header(selector: header, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_header(selector: header, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_header(selector: header, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_hgroup(selector: hgroup): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_hgroup(selector: hgroup, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_hgroup(selector: hgroup, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_hgroup(selector: hgroup, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_hr(selector: hr): Chainable[JQuery[HTMLHRElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_hr(selector: hr, filter: String): Chainable[JQuery[HTMLHRElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_hr(selector: hr, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHRElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_hr(selector: hr, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHRElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_html(selector: html_): Chainable[JQuery[HTMLHtmlElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_html(selector: html_, filter: String): Chainable[JQuery[HTMLHtmlElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_html(selector: html_, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHtmlElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_html(selector: html_, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHtmlElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_i(selector: i): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_i(selector: i, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_i(selector: i, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_i(selector: i, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_iframe(selector: iframe): Chainable[JQuery[HTMLIFrameElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_iframe(selector: iframe, filter: String): Chainable[JQuery[HTMLIFrameElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_iframe(selector: iframe, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLIFrameElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_iframe(selector: iframe, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLIFrameElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_img(selector: img): Chainable[JQuery[HTMLImageElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_img(selector: img, filter: String): Chainable[JQuery[HTMLImageElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_img(selector: img, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLImageElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_img(selector: img, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLImageElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_input(selector: input): Chainable[JQuery[HTMLInputElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_input(selector: input, filter: String): Chainable[JQuery[HTMLInputElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_input(selector: input, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLInputElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_input(selector: input, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLInputElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_ins(selector: ins): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_ins(selector: ins, filter: String): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_ins(selector: ins, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_ins(selector: ins, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_kbd(selector: kbd): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_kbd(selector: kbd, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_kbd(selector: kbd, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_kbd(selector: kbd, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_label(selector: label): Chainable[JQuery[HTMLLabelElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_label(selector: label, filter: String): Chainable[JQuery[HTMLLabelElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_label(selector: label, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLabelElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_label(selector: label, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLabelElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_legend(selector: legend): Chainable[JQuery[HTMLLegendElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_legend(selector: legend, filter: String): Chainable[JQuery[HTMLLegendElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_legend(selector: legend, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLegendElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_legend(selector: legend, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLegendElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_li(selector: li): Chainable[JQuery[HTMLLIElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_li(selector: li, filter: String): Chainable[JQuery[HTMLLIElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_li(selector: li, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLIElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_li(selector: li, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLIElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_link(selector: link_): Chainable[JQuery[HTMLLinkElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_link(selector: link_, filter: String): Chainable[JQuery[HTMLLinkElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_link(selector: link_, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLinkElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_link(selector: link_, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLinkElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_main(selector: main): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_main(selector: main, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_main(selector: main, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_main(selector: main, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_map(selector: map): Chainable[JQuery[HTMLMapElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_map(selector: map, filter: String): Chainable[JQuery[HTMLMapElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_map(selector: map, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMapElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_map(selector: map, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMapElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_mark(selector: mark): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_mark(selector: mark, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_mark(selector: mark, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_mark(selector: mark, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_menu(selector: menu): Chainable[JQuery[HTMLMenuElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_menu(selector: menu, filter: String): Chainable[JQuery[HTMLMenuElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_menu(selector: menu, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMenuElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_menu(selector: menu, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMenuElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_meta(selector: meta): Chainable[JQuery[HTMLMetaElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_meta(selector: meta, filter: String): Chainable[JQuery[HTMLMetaElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_meta(selector: meta, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMetaElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_meta(selector: meta, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMetaElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_meter(selector: meter): Chainable[JQuery[HTMLMeterElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_meter(selector: meter, filter: String): Chainable[JQuery[HTMLMeterElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_meter(selector: meter, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMeterElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_meter(selector: meter, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMeterElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_nav(selector: nav): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_nav(selector: nav, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_nav(selector: nav, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_nav(selector: nav, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_noscript(selector: noscript): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_noscript(selector: noscript, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_noscript(selector: noscript, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_noscript(selector: noscript, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_object(selector: object_): Chainable[JQuery[HTMLObjectElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_object(selector: object_, filter: String): Chainable[JQuery[HTMLObjectElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_object(selector: object_, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLObjectElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_object(selector: object_, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLObjectElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_ol(selector: ol): Chainable[JQuery[HTMLOListElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_ol(selector: ol, filter: String): Chainable[JQuery[HTMLOListElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_ol(selector: ol, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOListElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_ol(selector: ol, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOListElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_optgroup(selector: optgroup): Chainable[JQuery[HTMLOptGroupElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_optgroup(selector: optgroup, filter: String): Chainable[JQuery[HTMLOptGroupElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_optgroup(selector: optgroup, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOptGroupElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_optgroup(selector: optgroup, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOptGroupElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_option(selector: option): Chainable[JQuery[HTMLOptionElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_option(selector: option, filter: String): Chainable[JQuery[HTMLOptionElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_option(selector: option, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOptionElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_option(selector: option, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOptionElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_output(selector: output): Chainable[JQuery[HTMLOutputElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_output(selector: output, filter: String): Chainable[JQuery[HTMLOutputElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_output(selector: output, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOutputElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_output(selector: output, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOutputElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_p(selector: p): Chainable[JQuery[HTMLParagraphElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_p(selector: p, filter: String): Chainable[JQuery[HTMLParagraphElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_p(selector: p, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLParagraphElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_p(selector: p, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLParagraphElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_picture(selector: picture): Chainable[JQuery[HTMLPictureElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_picture(selector: picture, filter: String): Chainable[JQuery[HTMLPictureElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_picture(selector: picture, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLPictureElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_picture(selector: picture, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLPictureElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_pre(selector: pre): Chainable[JQuery[HTMLPreElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_pre(selector: pre, filter: String): Chainable[JQuery[HTMLPreElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_pre(selector: pre, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLPreElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_pre(selector: pre, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLPreElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_progress(selector: progress_): Chainable[JQuery[HTMLProgressElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_progress(selector: progress_, filter: String): Chainable[JQuery[HTMLProgressElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_progress(selector: progress_, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLProgressElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_progress(selector: progress_, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLProgressElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_q(selector: q): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_q(selector: q, filter: String): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_q(selector: q, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_q(selector: q, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_rp(selector: rp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_rp(selector: rp, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_rp(selector: rp, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_rp(selector: rp, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_rt(selector: rt): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_rt(selector: rt, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_rt(selector: rt, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_rt(selector: rt, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_ruby(selector: ruby): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_ruby(selector: ruby, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_ruby(selector: ruby, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_ruby(selector: ruby, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_s(selector: s): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_s(selector: s, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_s(selector: s, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_s(selector: s, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_samp(selector: samp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_samp(selector: samp, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_samp(selector: samp, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_samp(selector: samp, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_script(selector: script): Chainable[JQuery[HTMLScriptElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_script(selector: script, filter: String): Chainable[JQuery[HTMLScriptElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_script(selector: script, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLScriptElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_script(selector: script, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLScriptElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_section(selector: section): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_section(selector: section, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_section(selector: section, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_section(selector: section, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_select(selector: select): Chainable[JQuery[HTMLSelectElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_select(selector: select, filter: String): Chainable[JQuery[HTMLSelectElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_select(selector: select, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSelectElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_select(selector: select, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSelectElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_slot(selector: slot): Chainable[JQuery[HTMLSlotElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_slot(selector: slot, filter: String): Chainable[JQuery[HTMLSlotElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_slot(selector: slot, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSlotElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_slot(selector: slot, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSlotElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_small(selector: small): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_small(selector: small, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_small(selector: small, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_small(selector: small, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_source(selector: source_): Chainable[JQuery[HTMLSourceElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_source(selector: source_, filter: String): Chainable[JQuery[HTMLSourceElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_source(selector: source_, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSourceElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_source(selector: source_, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSourceElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_span(selector: span): Chainable[JQuery[HTMLSpanElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_span(selector: span, filter: String): Chainable[JQuery[HTMLSpanElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_span(selector: span, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSpanElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_span(selector: span, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSpanElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_strong(selector: strong): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_strong(selector: strong, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_strong(selector: strong, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_strong(selector: strong, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_style(selector: style): Chainable[JQuery[HTMLStyleElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_style(selector: style, filter: String): Chainable[JQuery[HTMLStyleElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_style(selector: style, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLStyleElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_style(selector: style, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLStyleElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_sub(selector: sub): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_sub(selector: sub, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_sub(selector: sub, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_sub(selector: sub, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_summary(selector: summary): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_summary(selector: summary, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_summary(selector: summary, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_summary(selector: summary, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_sup(selector: sup): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_sup(selector: sup, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_sup(selector: sup, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_sup(selector: sup, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_table(selector: table): Chainable[JQuery[HTMLTableElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_table(selector: table, filter: String): Chainable[JQuery[HTMLTableElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_table(selector: table, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_table(selector: table, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_tbody(selector: tbody): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_tbody(selector: tbody, filter: String): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_tbody(selector: tbody, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_tbody(selector: tbody, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_td(selector: td): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_td(selector: td, filter: String): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_td(selector: td, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_td(selector: td, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_template(selector: template): Chainable[JQuery[HTMLTemplateElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_template(selector: template, filter: String): Chainable[JQuery[HTMLTemplateElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_template(selector: template, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTemplateElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_template(selector: template, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTemplateElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_textarea(selector: textarea): Chainable[JQuery[HTMLTextAreaElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_textarea(selector: textarea, filter: String): Chainable[JQuery[HTMLTextAreaElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_textarea(selector: textarea, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTextAreaElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_textarea(selector: textarea, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTextAreaElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_tfoot(selector: tfoot): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_tfoot(selector: tfoot, filter: String): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_tfoot(selector: tfoot, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_tfoot(selector: tfoot, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_th(selector: th): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_th(selector: th, filter: String): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_th(selector: th, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_th(selector: th, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_thead(selector: thead): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_thead(selector: thead, filter: String): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_thead(selector: thead, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_thead(selector: thead, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_time(selector: time): Chainable[JQuery[HTMLTimeElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_time(selector: time, filter: String): Chainable[JQuery[HTMLTimeElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_time(selector: time, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTimeElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_time(selector: time, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTimeElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_title(selector: title): Chainable[JQuery[HTMLTitleElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_title(selector: title, filter: String): Chainable[JQuery[HTMLTitleElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_title(selector: title, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTitleElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_title(selector: title, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTitleElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_tr(selector: tr): Chainable[JQuery[HTMLTableRowElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_tr(selector: tr, filter: String): Chainable[JQuery[HTMLTableRowElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_tr(selector: tr, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableRowElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_tr(selector: tr, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableRowElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_track(selector: track): Chainable[JQuery[HTMLTrackElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_track(selector: track, filter: String): Chainable[JQuery[HTMLTrackElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_track(selector: track, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTrackElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_track(selector: track, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTrackElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_u(selector: u): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_u(selector: u, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_u(selector: u, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_u(selector: u, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_ul(selector: ul): Chainable[JQuery[HTMLUListElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_ul(selector: ul, filter: String): Chainable[JQuery[HTMLUListElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_ul(selector: ul, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLUListElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_ul(selector: ul, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLUListElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_var(selector: `var`): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_var(selector: `var`, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_var(selector: `var`, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_var(selector: `var`, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_video(selector: video): Chainable[JQuery[HTMLVideoElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_video(selector: video, filter: String): Chainable[JQuery[HTMLVideoElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_video(selector: video, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLVideoElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_video(selector: video, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLVideoElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_wbr(selector: wbr): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_wbr(selector: wbr, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_wbr(selector: wbr, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_wbr(selector: wbr, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_a(selector: a): Chainable[JQuery[HTMLAnchorElement]] = js.native
  @JSName("parents")
  def parents_a(selector: a, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLAnchorElement]] = js.native
  @JSName("parents")
  def parents_abbr(selector: abbr): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_abbr(selector: abbr, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_address(selector: address): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_address(selector: address, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_area(selector: area): Chainable[JQuery[HTMLAreaElement]] = js.native
  @JSName("parents")
  def parents_area(selector: area, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLAreaElement]] = js.native
  @JSName("parents")
  def parents_article(selector: article): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_article(selector: article, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_aside(selector: aside): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_aside(selector: aside, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_audio(selector: audio): Chainable[JQuery[HTMLAudioElement]] = js.native
  @JSName("parents")
  def parents_audio(selector: audio, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLAudioElement]] = js.native
  @JSName("parents")
  def parents_b(selector: b): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_b(selector: b, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_base(selector: base_): Chainable[JQuery[HTMLBaseElement]] = js.native
  @JSName("parents")
  def parents_base(selector: base_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLBaseElement]] = js.native
  @JSName("parents")
  def parents_bdi(selector: bdi): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_bdi(selector: bdi, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_bdo(selector: bdo): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_bdo(selector: bdo, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_blockquote(selector: blockquote): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("parents")
  def parents_blockquote(selector: blockquote, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("parents")
  def parents_body(selector: body): Chainable[JQuery[HTMLBodyElement]] = js.native
  @JSName("parents")
  def parents_body(selector: body, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLBodyElement]] = js.native
  @JSName("parents")
  def parents_br(selector: br): Chainable[JQuery[HTMLBRElement]] = js.native
  @JSName("parents")
  def parents_br(selector: br, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLBRElement]] = js.native
  @JSName("parents")
  def parents_button(selector: button): Chainable[JQuery[HTMLButtonElement]] = js.native
  @JSName("parents")
  def parents_button(selector: button, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLButtonElement]] = js.native
  @JSName("parents")
  def parents_canvas(selector: canvas): Chainable[JQuery[HTMLCanvasElement]] = js.native
  @JSName("parents")
  def parents_canvas(selector: canvas, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLCanvasElement]] = js.native
  @JSName("parents")
  def parents_caption(selector: caption): Chainable[JQuery[HTMLTableCaptionElement]] = js.native
  @JSName("parents")
  def parents_caption(selector: caption, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableCaptionElement]] = js.native
  @JSName("parents")
  def parents_cite(selector: cite): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_cite(selector: cite, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_code(selector: code): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_code(selector: code, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_col(selector: col): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("parents")
  def parents_col(selector: col, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("parents")
  def parents_colgroup(selector: colgroup): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("parents")
  def parents_colgroup(selector: colgroup, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("parents")
  def parents_data(selector: data): Chainable[JQuery[HTMLDataElement]] = js.native
  @JSName("parents")
  def parents_data(selector: data, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDataElement]] = js.native
  @JSName("parents")
  def parents_datalist(selector: datalist): Chainable[JQuery[HTMLDataListElement]] = js.native
  @JSName("parents")
  def parents_datalist(selector: datalist, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDataListElement]] = js.native
  @JSName("parents")
  def parents_dd(selector: dd): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_dd(selector: dd, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_del(selector: del): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("parents")
  def parents_del(selector: del, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("parents")
  def parents_details(selector: details): Chainable[JQuery[HTMLDetailsElement]] = js.native
  @JSName("parents")
  def parents_details(selector: details, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDetailsElement]] = js.native
  @JSName("parents")
  def parents_dfn(selector: dfn): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_dfn(selector: dfn, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_dialog(selector: dialog): Chainable[JQuery[HTMLDialogElement]] = js.native
  @JSName("parents")
  def parents_dialog(selector: dialog, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDialogElement]] = js.native
  @JSName("parents")
  def parents_div(selector: div): Chainable[JQuery[HTMLDivElement]] = js.native
  @JSName("parents")
  def parents_div(selector: div, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDivElement]] = js.native
  @JSName("parents")
  def parents_dl(selector: dl): Chainable[JQuery[HTMLDListElement]] = js.native
  @JSName("parents")
  def parents_dl(selector: dl, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDListElement]] = js.native
  @JSName("parents")
  def parents_dt(selector: dt): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_dt(selector: dt, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_em(selector: em): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_em(selector: em, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_embed(selector: embed): Chainable[JQuery[HTMLEmbedElement]] = js.native
  @JSName("parents")
  def parents_embed(selector: embed, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLEmbedElement]] = js.native
  @JSName("parents")
  def parents_fieldset(selector: fieldset): Chainable[JQuery[HTMLFieldSetElement]] = js.native
  @JSName("parents")
  def parents_fieldset(selector: fieldset, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLFieldSetElement]] = js.native
  @JSName("parents")
  def parents_figcaption(selector: figcaption): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_figcaption(selector: figcaption, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_figure(selector: figure): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_figure(selector: figure, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_footer(selector: footer): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_footer(selector: footer, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_form(selector: form): Chainable[JQuery[HTMLFormElement]] = js.native
  @JSName("parents")
  def parents_form(selector: form, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLFormElement]] = js.native
  @JSName("parents")
  def parents_h1(selector: h1): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("parents")
  def parents_h1(selector: h1, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("parents")
  def parents_h2(selector: h2): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("parents")
  def parents_h2(selector: h2, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("parents")
  def parents_h3(selector: h3): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("parents")
  def parents_h3(selector: h3, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("parents")
  def parents_h4(selector: h4): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("parents")
  def parents_h4(selector: h4, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("parents")
  def parents_h5(selector: h5): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("parents")
  def parents_h5(selector: h5, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("parents")
  def parents_h6(selector: h6): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("parents")
  def parents_h6(selector: h6, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("parents")
  def parents_head(selector: head_): Chainable[JQuery[HTMLHeadElement]] = js.native
  @JSName("parents")
  def parents_head(selector: head_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadElement]] = js.native
  @JSName("parents")
  def parents_header(selector: header): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_header(selector: header, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_hgroup(selector: hgroup): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_hgroup(selector: hgroup, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_hr(selector: hr): Chainable[JQuery[HTMLHRElement]] = js.native
  @JSName("parents")
  def parents_hr(selector: hr, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHRElement]] = js.native
  @JSName("parents")
  def parents_html(selector: html_): Chainable[JQuery[HTMLHtmlElement]] = js.native
  @JSName("parents")
  def parents_html(selector: html_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHtmlElement]] = js.native
  @JSName("parents")
  def parents_i(selector: i): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_i(selector: i, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_iframe(selector: iframe): Chainable[JQuery[HTMLIFrameElement]] = js.native
  @JSName("parents")
  def parents_iframe(selector: iframe, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLIFrameElement]] = js.native
  @JSName("parents")
  def parents_img(selector: img): Chainable[JQuery[HTMLImageElement]] = js.native
  @JSName("parents")
  def parents_img(selector: img, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLImageElement]] = js.native
  @JSName("parents")
  def parents_input(selector: input): Chainable[JQuery[HTMLInputElement]] = js.native
  @JSName("parents")
  def parents_input(selector: input, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLInputElement]] = js.native
  @JSName("parents")
  def parents_ins(selector: ins): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("parents")
  def parents_ins(selector: ins, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("parents")
  def parents_kbd(selector: kbd): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_kbd(selector: kbd, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_label(selector: label): Chainable[JQuery[HTMLLabelElement]] = js.native
  @JSName("parents")
  def parents_label(selector: label, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLabelElement]] = js.native
  @JSName("parents")
  def parents_legend(selector: legend): Chainable[JQuery[HTMLLegendElement]] = js.native
  @JSName("parents")
  def parents_legend(selector: legend, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLegendElement]] = js.native
  @JSName("parents")
  def parents_li(selector: li): Chainable[JQuery[HTMLLIElement]] = js.native
  @JSName("parents")
  def parents_li(selector: li, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLIElement]] = js.native
  @JSName("parents")
  def parents_link(selector: link_): Chainable[JQuery[HTMLLinkElement]] = js.native
  @JSName("parents")
  def parents_link(selector: link_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLinkElement]] = js.native
  @JSName("parents")
  def parents_main(selector: main): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_main(selector: main, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_map(selector: map): Chainable[JQuery[HTMLMapElement]] = js.native
  @JSName("parents")
  def parents_map(selector: map, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMapElement]] = js.native
  @JSName("parents")
  def parents_mark(selector: mark): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_mark(selector: mark, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_menu(selector: menu): Chainable[JQuery[HTMLMenuElement]] = js.native
  @JSName("parents")
  def parents_menu(selector: menu, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMenuElement]] = js.native
  @JSName("parents")
  def parents_meta(selector: meta): Chainable[JQuery[HTMLMetaElement]] = js.native
  @JSName("parents")
  def parents_meta(selector: meta, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMetaElement]] = js.native
  @JSName("parents")
  def parents_meter(selector: meter): Chainable[JQuery[HTMLMeterElement]] = js.native
  @JSName("parents")
  def parents_meter(selector: meter, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMeterElement]] = js.native
  @JSName("parents")
  def parents_nav(selector: nav): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_nav(selector: nav, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_noscript(selector: noscript): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_noscript(selector: noscript, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_object(selector: object_): Chainable[JQuery[HTMLObjectElement]] = js.native
  @JSName("parents")
  def parents_object(selector: object_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLObjectElement]] = js.native
  @JSName("parents")
  def parents_ol(selector: ol): Chainable[JQuery[HTMLOListElement]] = js.native
  @JSName("parents")
  def parents_ol(selector: ol, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOListElement]] = js.native
  @JSName("parents")
  def parents_optgroup(selector: optgroup): Chainable[JQuery[HTMLOptGroupElement]] = js.native
  @JSName("parents")
  def parents_optgroup(selector: optgroup, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOptGroupElement]] = js.native
  @JSName("parents")
  def parents_option(selector: option): Chainable[JQuery[HTMLOptionElement]] = js.native
  @JSName("parents")
  def parents_option(selector: option, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOptionElement]] = js.native
  @JSName("parents")
  def parents_output(selector: output): Chainable[JQuery[HTMLOutputElement]] = js.native
  @JSName("parents")
  def parents_output(selector: output, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOutputElement]] = js.native
  @JSName("parents")
  def parents_p(selector: p): Chainable[JQuery[HTMLParagraphElement]] = js.native
  @JSName("parents")
  def parents_p(selector: p, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLParagraphElement]] = js.native
  @JSName("parents")
  def parents_picture(selector: picture): Chainable[JQuery[HTMLPictureElement]] = js.native
  @JSName("parents")
  def parents_picture(selector: picture, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLPictureElement]] = js.native
  @JSName("parents")
  def parents_pre(selector: pre): Chainable[JQuery[HTMLPreElement]] = js.native
  @JSName("parents")
  def parents_pre(selector: pre, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLPreElement]] = js.native
  @JSName("parents")
  def parents_progress(selector: progress_): Chainable[JQuery[HTMLProgressElement]] = js.native
  @JSName("parents")
  def parents_progress(selector: progress_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLProgressElement]] = js.native
  @JSName("parents")
  def parents_q(selector: q): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("parents")
  def parents_q(selector: q, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("parents")
  def parents_rp(selector: rp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_rp(selector: rp, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_rt(selector: rt): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_rt(selector: rt, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_ruby(selector: ruby): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_ruby(selector: ruby, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_s(selector: s): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_s(selector: s, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_samp(selector: samp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_samp(selector: samp, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_script(selector: script): Chainable[JQuery[HTMLScriptElement]] = js.native
  @JSName("parents")
  def parents_script(selector: script, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLScriptElement]] = js.native
  @JSName("parents")
  def parents_section(selector: section): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_section(selector: section, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_select(selector: select): Chainable[JQuery[HTMLSelectElement]] = js.native
  @JSName("parents")
  def parents_select(selector: select, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSelectElement]] = js.native
  @JSName("parents")
  def parents_slot(selector: slot): Chainable[JQuery[HTMLSlotElement]] = js.native
  @JSName("parents")
  def parents_slot(selector: slot, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSlotElement]] = js.native
  @JSName("parents")
  def parents_small(selector: small): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_small(selector: small, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_source(selector: source_): Chainable[JQuery[HTMLSourceElement]] = js.native
  @JSName("parents")
  def parents_source(selector: source_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSourceElement]] = js.native
  @JSName("parents")
  def parents_span(selector: span): Chainable[JQuery[HTMLSpanElement]] = js.native
  @JSName("parents")
  def parents_span(selector: span, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSpanElement]] = js.native
  @JSName("parents")
  def parents_strong(selector: strong): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_strong(selector: strong, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_style(selector: style): Chainable[JQuery[HTMLStyleElement]] = js.native
  @JSName("parents")
  def parents_style(selector: style, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLStyleElement]] = js.native
  @JSName("parents")
  def parents_sub(selector: sub): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_sub(selector: sub, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_summary(selector: summary): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_summary(selector: summary, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_sup(selector: sup): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_sup(selector: sup, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_table(selector: table): Chainable[JQuery[HTMLTableElement]] = js.native
  @JSName("parents")
  def parents_table(selector: table, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableElement]] = js.native
  @JSName("parents")
  def parents_tbody(selector: tbody): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("parents")
  def parents_tbody(selector: tbody, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("parents")
  def parents_td(selector: td): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("parents")
  def parents_td(selector: td, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("parents")
  def parents_template(selector: template): Chainable[JQuery[HTMLTemplateElement]] = js.native
  @JSName("parents")
  def parents_template(selector: template, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTemplateElement]] = js.native
  @JSName("parents")
  def parents_textarea(selector: textarea): Chainable[JQuery[HTMLTextAreaElement]] = js.native
  @JSName("parents")
  def parents_textarea(selector: textarea, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTextAreaElement]] = js.native
  @JSName("parents")
  def parents_tfoot(selector: tfoot): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("parents")
  def parents_tfoot(selector: tfoot, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("parents")
  def parents_th(selector: th): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("parents")
  def parents_th(selector: th, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("parents")
  def parents_thead(selector: thead): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("parents")
  def parents_thead(selector: thead, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("parents")
  def parents_time(selector: time): Chainable[JQuery[HTMLTimeElement]] = js.native
  @JSName("parents")
  def parents_time(selector: time, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTimeElement]] = js.native
  @JSName("parents")
  def parents_title(selector: title): Chainable[JQuery[HTMLTitleElement]] = js.native
  @JSName("parents")
  def parents_title(selector: title, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTitleElement]] = js.native
  @JSName("parents")
  def parents_tr(selector: tr): Chainable[JQuery[HTMLTableRowElement]] = js.native
  @JSName("parents")
  def parents_tr(selector: tr, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableRowElement]] = js.native
  @JSName("parents")
  def parents_track(selector: track): Chainable[JQuery[HTMLTrackElement]] = js.native
  @JSName("parents")
  def parents_track(selector: track, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTrackElement]] = js.native
  @JSName("parents")
  def parents_u(selector: u): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_u(selector: u, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_ul(selector: ul): Chainable[JQuery[HTMLUListElement]] = js.native
  @JSName("parents")
  def parents_ul(selector: ul, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLUListElement]] = js.native
  @JSName("parents")
  def parents_var(selector: `var`): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_var(selector: `var`, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_video(selector: video): Chainable[JQuery[HTMLVideoElement]] = js.native
  @JSName("parents")
  def parents_video(selector: video, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLVideoElement]] = js.native
  @JSName("parents")
  def parents_wbr(selector: wbr): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("parents")
  def parents_wbr(selector: wbr, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  
  /**
    * Stop cy commands from running and allow interaction with the application under test. You can then "resume" running all commands or choose to step through the "next" commands from the Command Log.
    * This does not set a `debugger` in your code, unlike `.debug()`
    *
    * @see https://on.cypress.io/pause
    */
  def pause(): Chainable[Subject] = js.native
  def pause(options: PartialLoggable): Chainable[Subject] = js.native
  
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('li').prev() // Yield previous 'li'
    * @see https://on.cypress.io/prev
    */
  def prev[E /* <: Node */](): Chainable[JQuery[E]] = js.native
  def prev[E /* <: Node */](options: PartialLoggableTimeoutabl): Chainable[JQuery[E]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements that match selector.
    *
    * @example
    *    cy.get('nav').prev('.menu-item') // Yield previous '.menu-item'
    * @see https://on.cypress.io/prev
    */
  def prev[E /* <: Node */](selector: String): Chainable[JQuery[E]] = js.native
  def prev[E /* <: Node */](selector: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[E]] = js.native
  
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  def prevAll[E /* <: Node */](): Chainable[JQuery[E]] = js.native
  def prevAll[E /* <: Node */](options: PartialLoggableTimeoutabl): Chainable[JQuery[E]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  def prevAll[E /* <: Node */](selector: String): Chainable[JQuery[E]] = js.native
  def prevAll[E /* <: Node */](selector: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[E]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_a(selector: a): Chainable[JQuery[HTMLAnchorElement]] = js.native
  @JSName("prevAll")
  def prevAll_a(selector: a, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLAnchorElement]] = js.native
  @JSName("prevAll")
  def prevAll_abbr(selector: abbr): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_abbr(selector: abbr, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_address(selector: address): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_address(selector: address, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_area(selector: area): Chainable[JQuery[HTMLAreaElement]] = js.native
  @JSName("prevAll")
  def prevAll_area(selector: area, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLAreaElement]] = js.native
  @JSName("prevAll")
  def prevAll_article(selector: article): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_article(selector: article, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_aside(selector: aside): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_aside(selector: aside, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_audio(selector: audio): Chainable[JQuery[HTMLAudioElement]] = js.native
  @JSName("prevAll")
  def prevAll_audio(selector: audio, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLAudioElement]] = js.native
  @JSName("prevAll")
  def prevAll_b(selector: b): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_b(selector: b, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_base(selector: base_): Chainable[JQuery[HTMLBaseElement]] = js.native
  @JSName("prevAll")
  def prevAll_base(selector: base_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLBaseElement]] = js.native
  @JSName("prevAll")
  def prevAll_bdi(selector: bdi): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_bdi(selector: bdi, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_bdo(selector: bdo): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_bdo(selector: bdo, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_blockquote(selector: blockquote): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("prevAll")
  def prevAll_blockquote(selector: blockquote, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("prevAll")
  def prevAll_body(selector: body): Chainable[JQuery[HTMLBodyElement]] = js.native
  @JSName("prevAll")
  def prevAll_body(selector: body, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLBodyElement]] = js.native
  @JSName("prevAll")
  def prevAll_br(selector: br): Chainable[JQuery[HTMLBRElement]] = js.native
  @JSName("prevAll")
  def prevAll_br(selector: br, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLBRElement]] = js.native
  @JSName("prevAll")
  def prevAll_button(selector: button): Chainable[JQuery[HTMLButtonElement]] = js.native
  @JSName("prevAll")
  def prevAll_button(selector: button, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLButtonElement]] = js.native
  @JSName("prevAll")
  def prevAll_canvas(selector: canvas): Chainable[JQuery[HTMLCanvasElement]] = js.native
  @JSName("prevAll")
  def prevAll_canvas(selector: canvas, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLCanvasElement]] = js.native
  @JSName("prevAll")
  def prevAll_caption(selector: caption): Chainable[JQuery[HTMLTableCaptionElement]] = js.native
  @JSName("prevAll")
  def prevAll_caption(selector: caption, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableCaptionElement]] = js.native
  @JSName("prevAll")
  def prevAll_cite(selector: cite): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_cite(selector: cite, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_code(selector: code): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_code(selector: code, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_col(selector: col): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("prevAll")
  def prevAll_col(selector: col, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("prevAll")
  def prevAll_colgroup(selector: colgroup): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("prevAll")
  def prevAll_colgroup(selector: colgroup, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("prevAll")
  def prevAll_data(selector: data): Chainable[JQuery[HTMLDataElement]] = js.native
  @JSName("prevAll")
  def prevAll_data(selector: data, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDataElement]] = js.native
  @JSName("prevAll")
  def prevAll_datalist(selector: datalist): Chainable[JQuery[HTMLDataListElement]] = js.native
  @JSName("prevAll")
  def prevAll_datalist(selector: datalist, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDataListElement]] = js.native
  @JSName("prevAll")
  def prevAll_dd(selector: dd): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_dd(selector: dd, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_del(selector: del): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("prevAll")
  def prevAll_del(selector: del, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("prevAll")
  def prevAll_details(selector: details): Chainable[JQuery[HTMLDetailsElement]] = js.native
  @JSName("prevAll")
  def prevAll_details(selector: details, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDetailsElement]] = js.native
  @JSName("prevAll")
  def prevAll_dfn(selector: dfn): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_dfn(selector: dfn, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_dialog(selector: dialog): Chainable[JQuery[HTMLDialogElement]] = js.native
  @JSName("prevAll")
  def prevAll_dialog(selector: dialog, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDialogElement]] = js.native
  @JSName("prevAll")
  def prevAll_div(selector: div): Chainable[JQuery[HTMLDivElement]] = js.native
  @JSName("prevAll")
  def prevAll_div(selector: div, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDivElement]] = js.native
  @JSName("prevAll")
  def prevAll_dl(selector: dl): Chainable[JQuery[HTMLDListElement]] = js.native
  @JSName("prevAll")
  def prevAll_dl(selector: dl, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDListElement]] = js.native
  @JSName("prevAll")
  def prevAll_dt(selector: dt): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_dt(selector: dt, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_em(selector: em): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_em(selector: em, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_embed(selector: embed): Chainable[JQuery[HTMLEmbedElement]] = js.native
  @JSName("prevAll")
  def prevAll_embed(selector: embed, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLEmbedElement]] = js.native
  @JSName("prevAll")
  def prevAll_fieldset(selector: fieldset): Chainable[JQuery[HTMLFieldSetElement]] = js.native
  @JSName("prevAll")
  def prevAll_fieldset(selector: fieldset, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLFieldSetElement]] = js.native
  @JSName("prevAll")
  def prevAll_figcaption(selector: figcaption): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_figcaption(selector: figcaption, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_figure(selector: figure): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_figure(selector: figure, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_footer(selector: footer): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_footer(selector: footer, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_form(selector: form): Chainable[JQuery[HTMLFormElement]] = js.native
  @JSName("prevAll")
  def prevAll_form(selector: form, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLFormElement]] = js.native
  @JSName("prevAll")
  def prevAll_h1(selector: h1): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("prevAll")
  def prevAll_h1(selector: h1, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("prevAll")
  def prevAll_h2(selector: h2): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("prevAll")
  def prevAll_h2(selector: h2, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("prevAll")
  def prevAll_h3(selector: h3): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("prevAll")
  def prevAll_h3(selector: h3, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("prevAll")
  def prevAll_h4(selector: h4): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("prevAll")
  def prevAll_h4(selector: h4, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("prevAll")
  def prevAll_h5(selector: h5): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("prevAll")
  def prevAll_h5(selector: h5, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("prevAll")
  def prevAll_h6(selector: h6): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("prevAll")
  def prevAll_h6(selector: h6, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("prevAll")
  def prevAll_head(selector: head_): Chainable[JQuery[HTMLHeadElement]] = js.native
  @JSName("prevAll")
  def prevAll_head(selector: head_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadElement]] = js.native
  @JSName("prevAll")
  def prevAll_header(selector: header): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_header(selector: header, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_hgroup(selector: hgroup): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_hgroup(selector: hgroup, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_hr(selector: hr): Chainable[JQuery[HTMLHRElement]] = js.native
  @JSName("prevAll")
  def prevAll_hr(selector: hr, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHRElement]] = js.native
  @JSName("prevAll")
  def prevAll_html(selector: html_): Chainable[JQuery[HTMLHtmlElement]] = js.native
  @JSName("prevAll")
  def prevAll_html(selector: html_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHtmlElement]] = js.native
  @JSName("prevAll")
  def prevAll_i(selector: i): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_i(selector: i, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_iframe(selector: iframe): Chainable[JQuery[HTMLIFrameElement]] = js.native
  @JSName("prevAll")
  def prevAll_iframe(selector: iframe, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLIFrameElement]] = js.native
  @JSName("prevAll")
  def prevAll_img(selector: img): Chainable[JQuery[HTMLImageElement]] = js.native
  @JSName("prevAll")
  def prevAll_img(selector: img, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLImageElement]] = js.native
  @JSName("prevAll")
  def prevAll_input(selector: input): Chainable[JQuery[HTMLInputElement]] = js.native
  @JSName("prevAll")
  def prevAll_input(selector: input, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLInputElement]] = js.native
  @JSName("prevAll")
  def prevAll_ins(selector: ins): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("prevAll")
  def prevAll_ins(selector: ins, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("prevAll")
  def prevAll_kbd(selector: kbd): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_kbd(selector: kbd, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_label(selector: label): Chainable[JQuery[HTMLLabelElement]] = js.native
  @JSName("prevAll")
  def prevAll_label(selector: label, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLabelElement]] = js.native
  @JSName("prevAll")
  def prevAll_legend(selector: legend): Chainable[JQuery[HTMLLegendElement]] = js.native
  @JSName("prevAll")
  def prevAll_legend(selector: legend, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLegendElement]] = js.native
  @JSName("prevAll")
  def prevAll_li(selector: li): Chainable[JQuery[HTMLLIElement]] = js.native
  @JSName("prevAll")
  def prevAll_li(selector: li, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLIElement]] = js.native
  @JSName("prevAll")
  def prevAll_link(selector: link_): Chainable[JQuery[HTMLLinkElement]] = js.native
  @JSName("prevAll")
  def prevAll_link(selector: link_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLinkElement]] = js.native
  @JSName("prevAll")
  def prevAll_main(selector: main): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_main(selector: main, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_map(selector: map): Chainable[JQuery[HTMLMapElement]] = js.native
  @JSName("prevAll")
  def prevAll_map(selector: map, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMapElement]] = js.native
  @JSName("prevAll")
  def prevAll_mark(selector: mark): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_mark(selector: mark, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_menu(selector: menu): Chainable[JQuery[HTMLMenuElement]] = js.native
  @JSName("prevAll")
  def prevAll_menu(selector: menu, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMenuElement]] = js.native
  @JSName("prevAll")
  def prevAll_meta(selector: meta): Chainable[JQuery[HTMLMetaElement]] = js.native
  @JSName("prevAll")
  def prevAll_meta(selector: meta, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMetaElement]] = js.native
  @JSName("prevAll")
  def prevAll_meter(selector: meter): Chainable[JQuery[HTMLMeterElement]] = js.native
  @JSName("prevAll")
  def prevAll_meter(selector: meter, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMeterElement]] = js.native
  @JSName("prevAll")
  def prevAll_nav(selector: nav): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_nav(selector: nav, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_noscript(selector: noscript): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_noscript(selector: noscript, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_object(selector: object_): Chainable[JQuery[HTMLObjectElement]] = js.native
  @JSName("prevAll")
  def prevAll_object(selector: object_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLObjectElement]] = js.native
  @JSName("prevAll")
  def prevAll_ol(selector: ol): Chainable[JQuery[HTMLOListElement]] = js.native
  @JSName("prevAll")
  def prevAll_ol(selector: ol, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOListElement]] = js.native
  @JSName("prevAll")
  def prevAll_optgroup(selector: optgroup): Chainable[JQuery[HTMLOptGroupElement]] = js.native
  @JSName("prevAll")
  def prevAll_optgroup(selector: optgroup, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOptGroupElement]] = js.native
  @JSName("prevAll")
  def prevAll_option(selector: option): Chainable[JQuery[HTMLOptionElement]] = js.native
  @JSName("prevAll")
  def prevAll_option(selector: option, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOptionElement]] = js.native
  @JSName("prevAll")
  def prevAll_output(selector: output): Chainable[JQuery[HTMLOutputElement]] = js.native
  @JSName("prevAll")
  def prevAll_output(selector: output, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOutputElement]] = js.native
  @JSName("prevAll")
  def prevAll_p(selector: p): Chainable[JQuery[HTMLParagraphElement]] = js.native
  @JSName("prevAll")
  def prevAll_p(selector: p, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLParagraphElement]] = js.native
  @JSName("prevAll")
  def prevAll_picture(selector: picture): Chainable[JQuery[HTMLPictureElement]] = js.native
  @JSName("prevAll")
  def prevAll_picture(selector: picture, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLPictureElement]] = js.native
  @JSName("prevAll")
  def prevAll_pre(selector: pre): Chainable[JQuery[HTMLPreElement]] = js.native
  @JSName("prevAll")
  def prevAll_pre(selector: pre, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLPreElement]] = js.native
  @JSName("prevAll")
  def prevAll_progress(selector: progress_): Chainable[JQuery[HTMLProgressElement]] = js.native
  @JSName("prevAll")
  def prevAll_progress(selector: progress_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLProgressElement]] = js.native
  @JSName("prevAll")
  def prevAll_q(selector: q): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("prevAll")
  def prevAll_q(selector: q, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("prevAll")
  def prevAll_rp(selector: rp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_rp(selector: rp, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_rt(selector: rt): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_rt(selector: rt, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_ruby(selector: ruby): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_ruby(selector: ruby, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_s(selector: s): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_s(selector: s, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_samp(selector: samp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_samp(selector: samp, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_script(selector: script): Chainable[JQuery[HTMLScriptElement]] = js.native
  @JSName("prevAll")
  def prevAll_script(selector: script, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLScriptElement]] = js.native
  @JSName("prevAll")
  def prevAll_section(selector: section): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_section(selector: section, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_select(selector: select): Chainable[JQuery[HTMLSelectElement]] = js.native
  @JSName("prevAll")
  def prevAll_select(selector: select, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSelectElement]] = js.native
  @JSName("prevAll")
  def prevAll_slot(selector: slot): Chainable[JQuery[HTMLSlotElement]] = js.native
  @JSName("prevAll")
  def prevAll_slot(selector: slot, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSlotElement]] = js.native
  @JSName("prevAll")
  def prevAll_small(selector: small): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_small(selector: small, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_source(selector: source_): Chainable[JQuery[HTMLSourceElement]] = js.native
  @JSName("prevAll")
  def prevAll_source(selector: source_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSourceElement]] = js.native
  @JSName("prevAll")
  def prevAll_span(selector: span): Chainable[JQuery[HTMLSpanElement]] = js.native
  @JSName("prevAll")
  def prevAll_span(selector: span, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSpanElement]] = js.native
  @JSName("prevAll")
  def prevAll_strong(selector: strong): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_strong(selector: strong, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_style(selector: style): Chainable[JQuery[HTMLStyleElement]] = js.native
  @JSName("prevAll")
  def prevAll_style(selector: style, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLStyleElement]] = js.native
  @JSName("prevAll")
  def prevAll_sub(selector: sub): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_sub(selector: sub, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_summary(selector: summary): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_summary(selector: summary, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_sup(selector: sup): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_sup(selector: sup, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_table(selector: table): Chainable[JQuery[HTMLTableElement]] = js.native
  @JSName("prevAll")
  def prevAll_table(selector: table, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableElement]] = js.native
  @JSName("prevAll")
  def prevAll_tbody(selector: tbody): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("prevAll")
  def prevAll_tbody(selector: tbody, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("prevAll")
  def prevAll_td(selector: td): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("prevAll")
  def prevAll_td(selector: td, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("prevAll")
  def prevAll_template(selector: template): Chainable[JQuery[HTMLTemplateElement]] = js.native
  @JSName("prevAll")
  def prevAll_template(selector: template, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTemplateElement]] = js.native
  @JSName("prevAll")
  def prevAll_textarea(selector: textarea): Chainable[JQuery[HTMLTextAreaElement]] = js.native
  @JSName("prevAll")
  def prevAll_textarea(selector: textarea, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTextAreaElement]] = js.native
  @JSName("prevAll")
  def prevAll_tfoot(selector: tfoot): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("prevAll")
  def prevAll_tfoot(selector: tfoot, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("prevAll")
  def prevAll_th(selector: th): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("prevAll")
  def prevAll_th(selector: th, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("prevAll")
  def prevAll_thead(selector: thead): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("prevAll")
  def prevAll_thead(selector: thead, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("prevAll")
  def prevAll_time(selector: time): Chainable[JQuery[HTMLTimeElement]] = js.native
  @JSName("prevAll")
  def prevAll_time(selector: time, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTimeElement]] = js.native
  @JSName("prevAll")
  def prevAll_title(selector: title): Chainable[JQuery[HTMLTitleElement]] = js.native
  @JSName("prevAll")
  def prevAll_title(selector: title, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTitleElement]] = js.native
  @JSName("prevAll")
  def prevAll_tr(selector: tr): Chainable[JQuery[HTMLTableRowElement]] = js.native
  @JSName("prevAll")
  def prevAll_tr(selector: tr, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableRowElement]] = js.native
  @JSName("prevAll")
  def prevAll_track(selector: track): Chainable[JQuery[HTMLTrackElement]] = js.native
  @JSName("prevAll")
  def prevAll_track(selector: track, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTrackElement]] = js.native
  @JSName("prevAll")
  def prevAll_u(selector: u): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_u(selector: u, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_ul(selector: ul): Chainable[JQuery[HTMLUListElement]] = js.native
  @JSName("prevAll")
  def prevAll_ul(selector: ul, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLUListElement]] = js.native
  @JSName("prevAll")
  def prevAll_var(selector: `var`): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_var(selector: `var`, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_video(selector: video): Chainable[JQuery[HTMLVideoElement]] = js.native
  @JSName("prevAll")
  def prevAll_video(selector: video, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLVideoElement]] = js.native
  @JSName("prevAll")
  def prevAll_wbr(selector: wbr): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_wbr(selector: wbr, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  def prevUntil[E /* <: Node */](element: E): Chainable[JQuery[E]] = js.native
  def prevUntil[E /* <: Node */](element: E, filter: String): Chainable[JQuery[E]] = js.native
  def prevUntil[E /* <: Node */](element: E, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[E]] = js.native
  def prevUntil[E /* <: Node */](element: E, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[E]] = js.native
  def prevUntil[E /* <: Node */](element: JQuery[E]): Chainable[JQuery[E]] = js.native
  def prevUntil[E /* <: Node */](element: JQuery[E], filter: String): Chainable[JQuery[E]] = js.native
  def prevUntil[E /* <: Node */](element: JQuery[E], filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[E]] = js.native
  def prevUntil[E /* <: Node */](element: JQuery[E], filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[E]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  def prevUntil[E /* <: Node */](selector: String): Chainable[JQuery[E]] = js.native
  def prevUntil[E /* <: Node */](selector: String, filter: String): Chainable[JQuery[E]] = js.native
  def prevUntil[E /* <: Node */](selector: String, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[E]] = js.native
  def prevUntil[E /* <: Node */](selector: String, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[E]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_a(selector: a): Chainable[JQuery[HTMLAnchorElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_a(selector: a, filter: String): Chainable[JQuery[HTMLAnchorElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_a(selector: a, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLAnchorElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_a(selector: a, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLAnchorElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_abbr(selector: abbr): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_abbr(selector: abbr, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_abbr(selector: abbr, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_abbr(selector: abbr, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_address(selector: address): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_address(selector: address, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_address(selector: address, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_address(selector: address, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_area(selector: area): Chainable[JQuery[HTMLAreaElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_area(selector: area, filter: String): Chainable[JQuery[HTMLAreaElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_area(selector: area, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLAreaElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_area(selector: area, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLAreaElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_article(selector: article): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_article(selector: article, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_article(selector: article, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_article(selector: article, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_aside(selector: aside): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_aside(selector: aside, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_aside(selector: aside, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_aside(selector: aside, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_audio(selector: audio): Chainable[JQuery[HTMLAudioElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_audio(selector: audio, filter: String): Chainable[JQuery[HTMLAudioElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_audio(selector: audio, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLAudioElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_audio(selector: audio, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLAudioElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_b(selector: b): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_b(selector: b, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_b(selector: b, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_b(selector: b, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_base(selector: base_): Chainable[JQuery[HTMLBaseElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_base(selector: base_, filter: String): Chainable[JQuery[HTMLBaseElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_base(selector: base_, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLBaseElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_base(selector: base_, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLBaseElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_bdi(selector: bdi): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_bdi(selector: bdi, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_bdi(selector: bdi, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_bdi(selector: bdi, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_bdo(selector: bdo): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_bdo(selector: bdo, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_bdo(selector: bdo, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_bdo(selector: bdo, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_blockquote(selector: blockquote): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_blockquote(selector: blockquote, filter: String): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_blockquote(selector: blockquote, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_blockquote(selector: blockquote, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_body(selector: body): Chainable[JQuery[HTMLBodyElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_body(selector: body, filter: String): Chainable[JQuery[HTMLBodyElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_body(selector: body, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLBodyElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_body(selector: body, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLBodyElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_br(selector: br): Chainable[JQuery[HTMLBRElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_br(selector: br, filter: String): Chainable[JQuery[HTMLBRElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_br(selector: br, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLBRElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_br(selector: br, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLBRElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_button(selector: button): Chainable[JQuery[HTMLButtonElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_button(selector: button, filter: String): Chainable[JQuery[HTMLButtonElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_button(selector: button, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLButtonElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_button(selector: button, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLButtonElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_canvas(selector: canvas): Chainable[JQuery[HTMLCanvasElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_canvas(selector: canvas, filter: String): Chainable[JQuery[HTMLCanvasElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_canvas(selector: canvas, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLCanvasElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_canvas(selector: canvas, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLCanvasElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_caption(selector: caption): Chainable[JQuery[HTMLTableCaptionElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_caption(selector: caption, filter: String): Chainable[JQuery[HTMLTableCaptionElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_caption(selector: caption, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableCaptionElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_caption(selector: caption, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableCaptionElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_cite(selector: cite): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_cite(selector: cite, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_cite(selector: cite, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_cite(selector: cite, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_code(selector: code): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_code(selector: code, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_code(selector: code, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_code(selector: code, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_col(selector: col): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_col(selector: col, filter: String): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_col(selector: col, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_col(selector: col, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_colgroup(selector: colgroup): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_colgroup(selector: colgroup, filter: String): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_colgroup(selector: colgroup, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_colgroup(selector: colgroup, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_data(selector: data): Chainable[JQuery[HTMLDataElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_data(selector: data, filter: String): Chainable[JQuery[HTMLDataElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_data(selector: data, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDataElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_data(selector: data, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDataElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_datalist(selector: datalist): Chainable[JQuery[HTMLDataListElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_datalist(selector: datalist, filter: String): Chainable[JQuery[HTMLDataListElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_datalist(selector: datalist, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDataListElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_datalist(selector: datalist, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDataListElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_dd(selector: dd): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_dd(selector: dd, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_dd(selector: dd, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_dd(selector: dd, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_del(selector: del): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_del(selector: del, filter: String): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_del(selector: del, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_del(selector: del, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_details(selector: details): Chainable[JQuery[HTMLDetailsElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_details(selector: details, filter: String): Chainable[JQuery[HTMLDetailsElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_details(selector: details, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDetailsElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_details(selector: details, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDetailsElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_dfn(selector: dfn): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_dfn(selector: dfn, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_dfn(selector: dfn, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_dfn(selector: dfn, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_dialog(selector: dialog): Chainable[JQuery[HTMLDialogElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_dialog(selector: dialog, filter: String): Chainable[JQuery[HTMLDialogElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_dialog(selector: dialog, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDialogElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_dialog(selector: dialog, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDialogElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_div(selector: div): Chainable[JQuery[HTMLDivElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_div(selector: div, filter: String): Chainable[JQuery[HTMLDivElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_div(selector: div, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDivElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_div(selector: div, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDivElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_dl(selector: dl): Chainable[JQuery[HTMLDListElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_dl(selector: dl, filter: String): Chainable[JQuery[HTMLDListElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_dl(selector: dl, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDListElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_dl(selector: dl, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDListElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_dt(selector: dt): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_dt(selector: dt, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_dt(selector: dt, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_dt(selector: dt, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_em(selector: em): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_em(selector: em, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_em(selector: em, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_em(selector: em, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_embed(selector: embed): Chainable[JQuery[HTMLEmbedElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_embed(selector: embed, filter: String): Chainable[JQuery[HTMLEmbedElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_embed(selector: embed, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLEmbedElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_embed(selector: embed, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLEmbedElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_fieldset(selector: fieldset): Chainable[JQuery[HTMLFieldSetElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_fieldset(selector: fieldset, filter: String): Chainable[JQuery[HTMLFieldSetElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_fieldset(selector: fieldset, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLFieldSetElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_fieldset(selector: fieldset, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLFieldSetElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_figcaption(selector: figcaption): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_figcaption(selector: figcaption, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_figcaption(selector: figcaption, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_figcaption(selector: figcaption, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_figure(selector: figure): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_figure(selector: figure, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_figure(selector: figure, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_figure(selector: figure, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_footer(selector: footer): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_footer(selector: footer, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_footer(selector: footer, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_footer(selector: footer, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_form(selector: form): Chainable[JQuery[HTMLFormElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_form(selector: form, filter: String): Chainable[JQuery[HTMLFormElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_form(selector: form, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLFormElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_form(selector: form, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLFormElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_h1(selector: h1): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_h1(selector: h1, filter: String): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_h1(selector: h1, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_h1(selector: h1, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_h2(selector: h2): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_h2(selector: h2, filter: String): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_h2(selector: h2, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_h2(selector: h2, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_h3(selector: h3): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_h3(selector: h3, filter: String): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_h3(selector: h3, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_h3(selector: h3, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_h4(selector: h4): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_h4(selector: h4, filter: String): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_h4(selector: h4, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_h4(selector: h4, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_h5(selector: h5): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_h5(selector: h5, filter: String): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_h5(selector: h5, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_h5(selector: h5, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_h6(selector: h6): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_h6(selector: h6, filter: String): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_h6(selector: h6, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_h6(selector: h6, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_head(selector: head_): Chainable[JQuery[HTMLHeadElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_head(selector: head_, filter: String): Chainable[JQuery[HTMLHeadElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_head(selector: head_, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_head(selector: head_, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_header(selector: header): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_header(selector: header, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_header(selector: header, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_header(selector: header, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_hgroup(selector: hgroup): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_hgroup(selector: hgroup, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_hgroup(selector: hgroup, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_hgroup(selector: hgroup, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_hr(selector: hr): Chainable[JQuery[HTMLHRElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_hr(selector: hr, filter: String): Chainable[JQuery[HTMLHRElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_hr(selector: hr, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHRElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_hr(selector: hr, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHRElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_html(selector: html_): Chainable[JQuery[HTMLHtmlElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_html(selector: html_, filter: String): Chainable[JQuery[HTMLHtmlElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_html(selector: html_, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHtmlElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_html(selector: html_, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHtmlElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_i(selector: i): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_i(selector: i, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_i(selector: i, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_i(selector: i, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_iframe(selector: iframe): Chainable[JQuery[HTMLIFrameElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_iframe(selector: iframe, filter: String): Chainable[JQuery[HTMLIFrameElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_iframe(selector: iframe, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLIFrameElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_iframe(selector: iframe, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLIFrameElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_img(selector: img): Chainable[JQuery[HTMLImageElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_img(selector: img, filter: String): Chainable[JQuery[HTMLImageElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_img(selector: img, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLImageElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_img(selector: img, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLImageElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_input(selector: input): Chainable[JQuery[HTMLInputElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_input(selector: input, filter: String): Chainable[JQuery[HTMLInputElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_input(selector: input, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLInputElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_input(selector: input, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLInputElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_ins(selector: ins): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_ins(selector: ins, filter: String): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_ins(selector: ins, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_ins(selector: ins, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_kbd(selector: kbd): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_kbd(selector: kbd, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_kbd(selector: kbd, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_kbd(selector: kbd, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_label(selector: label): Chainable[JQuery[HTMLLabelElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_label(selector: label, filter: String): Chainable[JQuery[HTMLLabelElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_label(selector: label, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLabelElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_label(selector: label, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLabelElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_legend(selector: legend): Chainable[JQuery[HTMLLegendElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_legend(selector: legend, filter: String): Chainable[JQuery[HTMLLegendElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_legend(selector: legend, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLegendElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_legend(selector: legend, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLegendElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_li(selector: li): Chainable[JQuery[HTMLLIElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_li(selector: li, filter: String): Chainable[JQuery[HTMLLIElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_li(selector: li, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLIElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_li(selector: li, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLIElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_link(selector: link_): Chainable[JQuery[HTMLLinkElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_link(selector: link_, filter: String): Chainable[JQuery[HTMLLinkElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_link(selector: link_, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLinkElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_link(selector: link_, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLinkElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_main(selector: main): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_main(selector: main, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_main(selector: main, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_main(selector: main, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_map(selector: map): Chainable[JQuery[HTMLMapElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_map(selector: map, filter: String): Chainable[JQuery[HTMLMapElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_map(selector: map, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMapElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_map(selector: map, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMapElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_mark(selector: mark): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_mark(selector: mark, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_mark(selector: mark, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_mark(selector: mark, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_menu(selector: menu): Chainable[JQuery[HTMLMenuElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_menu(selector: menu, filter: String): Chainable[JQuery[HTMLMenuElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_menu(selector: menu, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMenuElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_menu(selector: menu, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMenuElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_meta(selector: meta): Chainable[JQuery[HTMLMetaElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_meta(selector: meta, filter: String): Chainable[JQuery[HTMLMetaElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_meta(selector: meta, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMetaElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_meta(selector: meta, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMetaElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_meter(selector: meter): Chainable[JQuery[HTMLMeterElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_meter(selector: meter, filter: String): Chainable[JQuery[HTMLMeterElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_meter(selector: meter, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMeterElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_meter(selector: meter, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMeterElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_nav(selector: nav): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_nav(selector: nav, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_nav(selector: nav, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_nav(selector: nav, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_noscript(selector: noscript): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_noscript(selector: noscript, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_noscript(selector: noscript, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_noscript(selector: noscript, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_object(selector: object_): Chainable[JQuery[HTMLObjectElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_object(selector: object_, filter: String): Chainable[JQuery[HTMLObjectElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_object(selector: object_, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLObjectElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_object(selector: object_, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLObjectElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_ol(selector: ol): Chainable[JQuery[HTMLOListElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_ol(selector: ol, filter: String): Chainable[JQuery[HTMLOListElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_ol(selector: ol, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOListElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_ol(selector: ol, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOListElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_optgroup(selector: optgroup): Chainable[JQuery[HTMLOptGroupElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_optgroup(selector: optgroup, filter: String): Chainable[JQuery[HTMLOptGroupElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_optgroup(selector: optgroup, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOptGroupElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_optgroup(selector: optgroup, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOptGroupElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_option(selector: option): Chainable[JQuery[HTMLOptionElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_option(selector: option, filter: String): Chainable[JQuery[HTMLOptionElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_option(selector: option, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOptionElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_option(selector: option, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOptionElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_output(selector: output): Chainable[JQuery[HTMLOutputElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_output(selector: output, filter: String): Chainable[JQuery[HTMLOutputElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_output(selector: output, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOutputElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_output(selector: output, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOutputElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_p(selector: p): Chainable[JQuery[HTMLParagraphElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_p(selector: p, filter: String): Chainable[JQuery[HTMLParagraphElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_p(selector: p, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLParagraphElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_p(selector: p, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLParagraphElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_picture(selector: picture): Chainable[JQuery[HTMLPictureElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_picture(selector: picture, filter: String): Chainable[JQuery[HTMLPictureElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_picture(selector: picture, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLPictureElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_picture(selector: picture, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLPictureElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_pre(selector: pre): Chainable[JQuery[HTMLPreElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_pre(selector: pre, filter: String): Chainable[JQuery[HTMLPreElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_pre(selector: pre, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLPreElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_pre(selector: pre, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLPreElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_progress(selector: progress_): Chainable[JQuery[HTMLProgressElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_progress(selector: progress_, filter: String): Chainable[JQuery[HTMLProgressElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_progress(selector: progress_, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLProgressElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_progress(selector: progress_, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLProgressElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_q(selector: q): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_q(selector: q, filter: String): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_q(selector: q, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_q(selector: q, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_rp(selector: rp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_rp(selector: rp, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_rp(selector: rp, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_rp(selector: rp, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_rt(selector: rt): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_rt(selector: rt, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_rt(selector: rt, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_rt(selector: rt, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_ruby(selector: ruby): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_ruby(selector: ruby, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_ruby(selector: ruby, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_ruby(selector: ruby, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_s(selector: s): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_s(selector: s, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_s(selector: s, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_s(selector: s, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_samp(selector: samp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_samp(selector: samp, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_samp(selector: samp, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_samp(selector: samp, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_script(selector: script): Chainable[JQuery[HTMLScriptElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_script(selector: script, filter: String): Chainable[JQuery[HTMLScriptElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_script(selector: script, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLScriptElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_script(selector: script, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLScriptElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_section(selector: section): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_section(selector: section, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_section(selector: section, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_section(selector: section, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_select(selector: select): Chainable[JQuery[HTMLSelectElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_select(selector: select, filter: String): Chainable[JQuery[HTMLSelectElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_select(selector: select, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSelectElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_select(selector: select, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSelectElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_slot(selector: slot): Chainable[JQuery[HTMLSlotElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_slot(selector: slot, filter: String): Chainable[JQuery[HTMLSlotElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_slot(selector: slot, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSlotElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_slot(selector: slot, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSlotElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_small(selector: small): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_small(selector: small, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_small(selector: small, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_small(selector: small, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_source(selector: source_): Chainable[JQuery[HTMLSourceElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_source(selector: source_, filter: String): Chainable[JQuery[HTMLSourceElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_source(selector: source_, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSourceElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_source(selector: source_, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSourceElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_span(selector: span): Chainable[JQuery[HTMLSpanElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_span(selector: span, filter: String): Chainable[JQuery[HTMLSpanElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_span(selector: span, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSpanElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_span(selector: span, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSpanElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_strong(selector: strong): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_strong(selector: strong, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_strong(selector: strong, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_strong(selector: strong, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_style(selector: style): Chainable[JQuery[HTMLStyleElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_style(selector: style, filter: String): Chainable[JQuery[HTMLStyleElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_style(selector: style, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLStyleElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_style(selector: style, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLStyleElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_sub(selector: sub): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_sub(selector: sub, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_sub(selector: sub, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_sub(selector: sub, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_summary(selector: summary): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_summary(selector: summary, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_summary(selector: summary, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_summary(selector: summary, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_sup(selector: sup): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_sup(selector: sup, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_sup(selector: sup, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_sup(selector: sup, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_table(selector: table): Chainable[JQuery[HTMLTableElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_table(selector: table, filter: String): Chainable[JQuery[HTMLTableElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_table(selector: table, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_table(selector: table, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_tbody(selector: tbody): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_tbody(selector: tbody, filter: String): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_tbody(selector: tbody, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_tbody(selector: tbody, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_td(selector: td): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_td(selector: td, filter: String): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_td(selector: td, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_td(selector: td, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_template(selector: template): Chainable[JQuery[HTMLTemplateElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_template(selector: template, filter: String): Chainable[JQuery[HTMLTemplateElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_template(selector: template, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTemplateElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_template(selector: template, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTemplateElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_textarea(selector: textarea): Chainable[JQuery[HTMLTextAreaElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_textarea(selector: textarea, filter: String): Chainable[JQuery[HTMLTextAreaElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_textarea(selector: textarea, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTextAreaElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_textarea(selector: textarea, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTextAreaElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_tfoot(selector: tfoot): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_tfoot(selector: tfoot, filter: String): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_tfoot(selector: tfoot, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_tfoot(selector: tfoot, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_th(selector: th): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_th(selector: th, filter: String): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_th(selector: th, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_th(selector: th, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_thead(selector: thead): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_thead(selector: thead, filter: String): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_thead(selector: thead, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_thead(selector: thead, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_time(selector: time): Chainable[JQuery[HTMLTimeElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_time(selector: time, filter: String): Chainable[JQuery[HTMLTimeElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_time(selector: time, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTimeElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_time(selector: time, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTimeElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_title(selector: title): Chainable[JQuery[HTMLTitleElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_title(selector: title, filter: String): Chainable[JQuery[HTMLTitleElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_title(selector: title, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTitleElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_title(selector: title, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTitleElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_tr(selector: tr): Chainable[JQuery[HTMLTableRowElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_tr(selector: tr, filter: String): Chainable[JQuery[HTMLTableRowElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_tr(selector: tr, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableRowElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_tr(selector: tr, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableRowElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_track(selector: track): Chainable[JQuery[HTMLTrackElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_track(selector: track, filter: String): Chainable[JQuery[HTMLTrackElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_track(selector: track, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTrackElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_track(selector: track, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTrackElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_u(selector: u): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_u(selector: u, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_u(selector: u, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_u(selector: u, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_ul(selector: ul): Chainable[JQuery[HTMLUListElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_ul(selector: ul, filter: String): Chainable[JQuery[HTMLUListElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_ul(selector: ul, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLUListElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_ul(selector: ul, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLUListElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_var(selector: `var`): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_var(selector: `var`, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_var(selector: `var`, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_var(selector: `var`, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_video(selector: video): Chainable[JQuery[HTMLVideoElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_video(selector: video, filter: String): Chainable[JQuery[HTMLVideoElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_video(selector: video, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLVideoElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_video(selector: video, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLVideoElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_wbr(selector: wbr): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_wbr(selector: wbr, filter: String): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_wbr(selector: wbr, filter: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_wbr(selector: wbr, filter: Unit, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_a(selector: a): Chainable[JQuery[HTMLAnchorElement]] = js.native
  @JSName("prev")
  def prev_a(selector: a, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLAnchorElement]] = js.native
  @JSName("prev")
  def prev_abbr(selector: abbr): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_abbr(selector: abbr, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_address(selector: address): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_address(selector: address, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_area(selector: area): Chainable[JQuery[HTMLAreaElement]] = js.native
  @JSName("prev")
  def prev_area(selector: area, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLAreaElement]] = js.native
  @JSName("prev")
  def prev_article(selector: article): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_article(selector: article, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_aside(selector: aside): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_aside(selector: aside, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_audio(selector: audio): Chainable[JQuery[HTMLAudioElement]] = js.native
  @JSName("prev")
  def prev_audio(selector: audio, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLAudioElement]] = js.native
  @JSName("prev")
  def prev_b(selector: b): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_b(selector: b, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_base(selector: base_): Chainable[JQuery[HTMLBaseElement]] = js.native
  @JSName("prev")
  def prev_base(selector: base_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLBaseElement]] = js.native
  @JSName("prev")
  def prev_bdi(selector: bdi): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_bdi(selector: bdi, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_bdo(selector: bdo): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_bdo(selector: bdo, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_blockquote(selector: blockquote): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("prev")
  def prev_blockquote(selector: blockquote, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("prev")
  def prev_body(selector: body): Chainable[JQuery[HTMLBodyElement]] = js.native
  @JSName("prev")
  def prev_body(selector: body, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLBodyElement]] = js.native
  @JSName("prev")
  def prev_br(selector: br): Chainable[JQuery[HTMLBRElement]] = js.native
  @JSName("prev")
  def prev_br(selector: br, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLBRElement]] = js.native
  @JSName("prev")
  def prev_button(selector: button): Chainable[JQuery[HTMLButtonElement]] = js.native
  @JSName("prev")
  def prev_button(selector: button, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLButtonElement]] = js.native
  @JSName("prev")
  def prev_canvas(selector: canvas): Chainable[JQuery[HTMLCanvasElement]] = js.native
  @JSName("prev")
  def prev_canvas(selector: canvas, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLCanvasElement]] = js.native
  @JSName("prev")
  def prev_caption(selector: caption): Chainable[JQuery[HTMLTableCaptionElement]] = js.native
  @JSName("prev")
  def prev_caption(selector: caption, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableCaptionElement]] = js.native
  @JSName("prev")
  def prev_cite(selector: cite): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_cite(selector: cite, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_code(selector: code): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_code(selector: code, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_col(selector: col): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("prev")
  def prev_col(selector: col, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("prev")
  def prev_colgroup(selector: colgroup): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("prev")
  def prev_colgroup(selector: colgroup, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("prev")
  def prev_data(selector: data): Chainable[JQuery[HTMLDataElement]] = js.native
  @JSName("prev")
  def prev_data(selector: data, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDataElement]] = js.native
  @JSName("prev")
  def prev_datalist(selector: datalist): Chainable[JQuery[HTMLDataListElement]] = js.native
  @JSName("prev")
  def prev_datalist(selector: datalist, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDataListElement]] = js.native
  @JSName("prev")
  def prev_dd(selector: dd): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_dd(selector: dd, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_del(selector: del): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("prev")
  def prev_del(selector: del, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("prev")
  def prev_details(selector: details): Chainable[JQuery[HTMLDetailsElement]] = js.native
  @JSName("prev")
  def prev_details(selector: details, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDetailsElement]] = js.native
  @JSName("prev")
  def prev_dfn(selector: dfn): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_dfn(selector: dfn, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_dialog(selector: dialog): Chainable[JQuery[HTMLDialogElement]] = js.native
  @JSName("prev")
  def prev_dialog(selector: dialog, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDialogElement]] = js.native
  @JSName("prev")
  def prev_div(selector: div): Chainable[JQuery[HTMLDivElement]] = js.native
  @JSName("prev")
  def prev_div(selector: div, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDivElement]] = js.native
  @JSName("prev")
  def prev_dl(selector: dl): Chainable[JQuery[HTMLDListElement]] = js.native
  @JSName("prev")
  def prev_dl(selector: dl, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDListElement]] = js.native
  @JSName("prev")
  def prev_dt(selector: dt): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_dt(selector: dt, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_em(selector: em): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_em(selector: em, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_embed(selector: embed): Chainable[JQuery[HTMLEmbedElement]] = js.native
  @JSName("prev")
  def prev_embed(selector: embed, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLEmbedElement]] = js.native
  @JSName("prev")
  def prev_fieldset(selector: fieldset): Chainable[JQuery[HTMLFieldSetElement]] = js.native
  @JSName("prev")
  def prev_fieldset(selector: fieldset, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLFieldSetElement]] = js.native
  @JSName("prev")
  def prev_figcaption(selector: figcaption): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_figcaption(selector: figcaption, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_figure(selector: figure): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_figure(selector: figure, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_footer(selector: footer): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_footer(selector: footer, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_form(selector: form): Chainable[JQuery[HTMLFormElement]] = js.native
  @JSName("prev")
  def prev_form(selector: form, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLFormElement]] = js.native
  @JSName("prev")
  def prev_h1(selector: h1): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("prev")
  def prev_h1(selector: h1, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("prev")
  def prev_h2(selector: h2): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("prev")
  def prev_h2(selector: h2, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("prev")
  def prev_h3(selector: h3): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("prev")
  def prev_h3(selector: h3, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("prev")
  def prev_h4(selector: h4): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("prev")
  def prev_h4(selector: h4, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("prev")
  def prev_h5(selector: h5): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("prev")
  def prev_h5(selector: h5, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("prev")
  def prev_h6(selector: h6): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("prev")
  def prev_h6(selector: h6, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("prev")
  def prev_head(selector: head_): Chainable[JQuery[HTMLHeadElement]] = js.native
  @JSName("prev")
  def prev_head(selector: head_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadElement]] = js.native
  @JSName("prev")
  def prev_header(selector: header): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_header(selector: header, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_hgroup(selector: hgroup): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_hgroup(selector: hgroup, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_hr(selector: hr): Chainable[JQuery[HTMLHRElement]] = js.native
  @JSName("prev")
  def prev_hr(selector: hr, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHRElement]] = js.native
  @JSName("prev")
  def prev_html(selector: html_): Chainable[JQuery[HTMLHtmlElement]] = js.native
  @JSName("prev")
  def prev_html(selector: html_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHtmlElement]] = js.native
  @JSName("prev")
  def prev_i(selector: i): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_i(selector: i, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_iframe(selector: iframe): Chainable[JQuery[HTMLIFrameElement]] = js.native
  @JSName("prev")
  def prev_iframe(selector: iframe, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLIFrameElement]] = js.native
  @JSName("prev")
  def prev_img(selector: img): Chainable[JQuery[HTMLImageElement]] = js.native
  @JSName("prev")
  def prev_img(selector: img, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLImageElement]] = js.native
  @JSName("prev")
  def prev_input(selector: input): Chainable[JQuery[HTMLInputElement]] = js.native
  @JSName("prev")
  def prev_input(selector: input, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLInputElement]] = js.native
  @JSName("prev")
  def prev_ins(selector: ins): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("prev")
  def prev_ins(selector: ins, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("prev")
  def prev_kbd(selector: kbd): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_kbd(selector: kbd, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_label(selector: label): Chainable[JQuery[HTMLLabelElement]] = js.native
  @JSName("prev")
  def prev_label(selector: label, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLabelElement]] = js.native
  @JSName("prev")
  def prev_legend(selector: legend): Chainable[JQuery[HTMLLegendElement]] = js.native
  @JSName("prev")
  def prev_legend(selector: legend, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLegendElement]] = js.native
  @JSName("prev")
  def prev_li(selector: li): Chainable[JQuery[HTMLLIElement]] = js.native
  @JSName("prev")
  def prev_li(selector: li, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLIElement]] = js.native
  @JSName("prev")
  def prev_link(selector: link_): Chainable[JQuery[HTMLLinkElement]] = js.native
  @JSName("prev")
  def prev_link(selector: link_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLinkElement]] = js.native
  @JSName("prev")
  def prev_main(selector: main): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_main(selector: main, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_map(selector: map): Chainable[JQuery[HTMLMapElement]] = js.native
  @JSName("prev")
  def prev_map(selector: map, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMapElement]] = js.native
  @JSName("prev")
  def prev_mark(selector: mark): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_mark(selector: mark, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_menu(selector: menu): Chainable[JQuery[HTMLMenuElement]] = js.native
  @JSName("prev")
  def prev_menu(selector: menu, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMenuElement]] = js.native
  @JSName("prev")
  def prev_meta(selector: meta): Chainable[JQuery[HTMLMetaElement]] = js.native
  @JSName("prev")
  def prev_meta(selector: meta, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMetaElement]] = js.native
  @JSName("prev")
  def prev_meter(selector: meter): Chainable[JQuery[HTMLMeterElement]] = js.native
  @JSName("prev")
  def prev_meter(selector: meter, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMeterElement]] = js.native
  @JSName("prev")
  def prev_nav(selector: nav): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_nav(selector: nav, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_noscript(selector: noscript): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_noscript(selector: noscript, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_object(selector: object_): Chainable[JQuery[HTMLObjectElement]] = js.native
  @JSName("prev")
  def prev_object(selector: object_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLObjectElement]] = js.native
  @JSName("prev")
  def prev_ol(selector: ol): Chainable[JQuery[HTMLOListElement]] = js.native
  @JSName("prev")
  def prev_ol(selector: ol, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOListElement]] = js.native
  @JSName("prev")
  def prev_optgroup(selector: optgroup): Chainable[JQuery[HTMLOptGroupElement]] = js.native
  @JSName("prev")
  def prev_optgroup(selector: optgroup, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOptGroupElement]] = js.native
  @JSName("prev")
  def prev_option(selector: option): Chainable[JQuery[HTMLOptionElement]] = js.native
  @JSName("prev")
  def prev_option(selector: option, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOptionElement]] = js.native
  @JSName("prev")
  def prev_output(selector: output): Chainable[JQuery[HTMLOutputElement]] = js.native
  @JSName("prev")
  def prev_output(selector: output, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOutputElement]] = js.native
  @JSName("prev")
  def prev_p(selector: p): Chainable[JQuery[HTMLParagraphElement]] = js.native
  @JSName("prev")
  def prev_p(selector: p, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLParagraphElement]] = js.native
  @JSName("prev")
  def prev_picture(selector: picture): Chainable[JQuery[HTMLPictureElement]] = js.native
  @JSName("prev")
  def prev_picture(selector: picture, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLPictureElement]] = js.native
  @JSName("prev")
  def prev_pre(selector: pre): Chainable[JQuery[HTMLPreElement]] = js.native
  @JSName("prev")
  def prev_pre(selector: pre, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLPreElement]] = js.native
  @JSName("prev")
  def prev_progress(selector: progress_): Chainable[JQuery[HTMLProgressElement]] = js.native
  @JSName("prev")
  def prev_progress(selector: progress_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLProgressElement]] = js.native
  @JSName("prev")
  def prev_q(selector: q): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("prev")
  def prev_q(selector: q, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("prev")
  def prev_rp(selector: rp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_rp(selector: rp, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_rt(selector: rt): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_rt(selector: rt, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_ruby(selector: ruby): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_ruby(selector: ruby, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_s(selector: s): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_s(selector: s, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_samp(selector: samp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_samp(selector: samp, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_script(selector: script): Chainable[JQuery[HTMLScriptElement]] = js.native
  @JSName("prev")
  def prev_script(selector: script, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLScriptElement]] = js.native
  @JSName("prev")
  def prev_section(selector: section): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_section(selector: section, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_select(selector: select): Chainable[JQuery[HTMLSelectElement]] = js.native
  @JSName("prev")
  def prev_select(selector: select, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSelectElement]] = js.native
  @JSName("prev")
  def prev_slot(selector: slot): Chainable[JQuery[HTMLSlotElement]] = js.native
  @JSName("prev")
  def prev_slot(selector: slot, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSlotElement]] = js.native
  @JSName("prev")
  def prev_small(selector: small): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_small(selector: small, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_source(selector: source_): Chainable[JQuery[HTMLSourceElement]] = js.native
  @JSName("prev")
  def prev_source(selector: source_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSourceElement]] = js.native
  @JSName("prev")
  def prev_span(selector: span): Chainable[JQuery[HTMLSpanElement]] = js.native
  @JSName("prev")
  def prev_span(selector: span, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSpanElement]] = js.native
  @JSName("prev")
  def prev_strong(selector: strong): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_strong(selector: strong, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_style(selector: style): Chainable[JQuery[HTMLStyleElement]] = js.native
  @JSName("prev")
  def prev_style(selector: style, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLStyleElement]] = js.native
  @JSName("prev")
  def prev_sub(selector: sub): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_sub(selector: sub, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_summary(selector: summary): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_summary(selector: summary, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_sup(selector: sup): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_sup(selector: sup, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_table(selector: table): Chainable[JQuery[HTMLTableElement]] = js.native
  @JSName("prev")
  def prev_table(selector: table, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableElement]] = js.native
  @JSName("prev")
  def prev_tbody(selector: tbody): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("prev")
  def prev_tbody(selector: tbody, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("prev")
  def prev_td(selector: td): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("prev")
  def prev_td(selector: td, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("prev")
  def prev_template(selector: template): Chainable[JQuery[HTMLTemplateElement]] = js.native
  @JSName("prev")
  def prev_template(selector: template, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTemplateElement]] = js.native
  @JSName("prev")
  def prev_textarea(selector: textarea): Chainable[JQuery[HTMLTextAreaElement]] = js.native
  @JSName("prev")
  def prev_textarea(selector: textarea, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTextAreaElement]] = js.native
  @JSName("prev")
  def prev_tfoot(selector: tfoot): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("prev")
  def prev_tfoot(selector: tfoot, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("prev")
  def prev_th(selector: th): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("prev")
  def prev_th(selector: th, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("prev")
  def prev_thead(selector: thead): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("prev")
  def prev_thead(selector: thead, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("prev")
  def prev_time(selector: time): Chainable[JQuery[HTMLTimeElement]] = js.native
  @JSName("prev")
  def prev_time(selector: time, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTimeElement]] = js.native
  @JSName("prev")
  def prev_title(selector: title): Chainable[JQuery[HTMLTitleElement]] = js.native
  @JSName("prev")
  def prev_title(selector: title, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTitleElement]] = js.native
  @JSName("prev")
  def prev_tr(selector: tr): Chainable[JQuery[HTMLTableRowElement]] = js.native
  @JSName("prev")
  def prev_tr(selector: tr, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableRowElement]] = js.native
  @JSName("prev")
  def prev_track(selector: track): Chainable[JQuery[HTMLTrackElement]] = js.native
  @JSName("prev")
  def prev_track(selector: track, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTrackElement]] = js.native
  @JSName("prev")
  def prev_u(selector: u): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_u(selector: u, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_ul(selector: ul): Chainable[JQuery[HTMLUListElement]] = js.native
  @JSName("prev")
  def prev_ul(selector: ul, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLUListElement]] = js.native
  @JSName("prev")
  def prev_var(selector: `var`): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_var(selector: `var`, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_video(selector: video): Chainable[JQuery[HTMLVideoElement]] = js.native
  @JSName("prev")
  def prev_video(selector: video, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLVideoElement]] = js.native
  @JSName("prev")
  def prev_wbr(selector: wbr): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("prev")
  def prev_wbr(selector: wbr, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  
  /**
    * Read a file and yield its contents.
    *
    * @see https://on.cypress.io/readfile
    */
  def readFile[Contents](filePath: String): Chainable[Contents] = js.native
  /**
    * Read a file with given encoding and yield its contents.
    *
    * @see https://on.cypress.io/readfile
    * @example
    *    cy.readFile('foo.json', 'utf8')
    */
  def readFile[Contents](filePath: String, encoding: Encodings): Chainable[Contents] = js.native
  def readFile[Contents](filePath: String, encoding: Encodings, options: PartialLoggableTimeoutabl): Chainable[Contents] = js.native
  def readFile[Contents](filePath: String, options: PartialLoggableTimeoutabl): Chainable[Contents] = js.native
  
  /**
    * Reload the page.
    *
    * @see https://on.cypress.io/reload
    * @example
    *    cy.reload()
    */
  def reload(): Chainable[AUTWindow] = js.native
  /**
    * Reload the page without cache
    *
    * @see https://on.cypress.io/reload
    * @param {Boolean} forceReload Whether to reload the current page without using the cache. true forces the reload without cache.
    * @example
    *    // Reload the page without using the cache
    *    cy.visit('http://localhost:3000/admin')
    *    cy.reload(true)
    */
  def reload(forceReload: Boolean): Chainable[AUTWindow] = js.native
  def reload(options: PartialLoggableTimeoutabl): Chainable[AUTWindow] = js.native
  
  /**
    * Make an HTTP request with specific method.
    *
    * @see https://on.cypress.io/request
    * @example
    *    cy.request('POST', 'http://localhost:8888/users', {name: 'Jane'})
    */
  def request[T](method: HttpMethod, url: String): Chainable[Response[T]] = js.native
  def request[T](method: HttpMethod, url: String, body: RequestBody): Chainable[Response[T]] = js.native
  /**
    * Make an HTTP request with specific behavior.
    *
    * @see https://on.cypress.io/request
    * @example
    *    cy.request({
    *      url: '/dashboard',
    *      followRedirect: false // turn off following redirects
    *    })
    */
  def request[T](options: PartialRequestOptions): Chainable[Response[T]] = js.native
  /**
    * Make an HTTP GET request.
    *
    * @see https://on.cypress.io/request
    * @example
    *    cy.request('http://dev.local/seed')
    */
  def request[T](url: String): Chainable[Response[T]] = js.native
  def request[T](url: String, body: RequestBody): Chainable[Response[T]] = js.native
  
  /**
    * Right-click a DOM element.
    *
    * @see https://on.cypress.io/rightclick
    */
  def rightclick(): Chainable[Subject] = js.native
  def rightclick(options: PartialClickOptions): Chainable[Subject] = js.native
  /**
    * Right-click a DOM element at specific corner / side.
    *
    * @param {PositionType} position - The position where the click should be issued.
    * The `center` position is the default position.
    * @see https://on.cypress.io/click
    * @example
    *    cy.get('button').rightclick('topRight')
    */
  def rightclick(position: PositionType): Chainable[Subject] = js.native
  def rightclick(position: PositionType, options: PartialClickOptions): Chainable[Subject] = js.native
  /**
    * Right-click a DOM element at specific coordinates
    *
    * @param {number} x The distance in pixels from the element's left to issue the click.
    * @param {number} y The distance in pixels from the element's top to issue the click.
    * @see https://on.cypress.io/rightclick
    * @example
    ```
    // The click below will be issued inside of the element
    // (15px from the left and 40px from the top).
    cy.get('button').rightclick(15, 40)
    ```
    */
  def rightclick(x: Double, y: Double): Chainable[Subject] = js.native
  def rightclick(x: Double, y: Double, options: PartialClickOptions): Chainable[Subject] = js.native
  
  /**
    * Get the root DOM element.
    * The root element yielded is `<html>` by default.
    * However, when calling `.root()` from a `.within()` command,
    * the root element will point to the element you are "within".
    *
    * @see https://on.cypress.io/root
    */
  def root[E /* <: Node */](): Chainable[JQuery[E]] = js.native
  def root[E /* <: Node */](options: PartialLoggable): Chainable[JQuery[E]] = js.native
  
  /**
    * @deprecated Use `cy.intercept()` instead.
    *
    * Set a route by returning an object literal from a callback function.
    * Functions that return a Promise will automatically be awaited.
    *
    * @see https://on.cypress.io/route
    * @example
    *    cy.server()
    *    cy.route(() => {
    *      // your logic here
    *      // return an appropriate routing object here
    *      return {
    *        method: 'POST',
    *        url: '/comments',
    *        response: this.commentsFixture
    *      }
    *    })
    */
  def route(fn: js.Function0[RouteOptions]): Chainable[Null] = js.native
  def route(method: String, url: String, response: String): Chainable[Null] = js.native
  def route(method: String, url: String, response: js.Object): Chainable[Null] = js.native
  def route(method: String, url: js.RegExp): Chainable[Null] = js.native
  def route(method: String, url: js.RegExp, response: String): Chainable[Null] = js.native
  def route(method: String, url: js.RegExp, response: js.Object): Chainable[Null] = js.native
  /**
    * @deprecated Use `cy.intercept()` instead.
    *
    * Spy or stub a given route.
    *
    * @see https://on.cypress.io/route
    * @example
    *    cy.server()
    *    cy.route({
    *      method: 'DELETE',
    *      url: '/users',
    *      status: 412,
    *      delay: 1000
    *      // and other options, see documentation
    *    })
    */
  def route(options: PartialRouteOptions): Chainable[Null] = js.native
  // can't do better typing unless we ignore the `.within()` case
  /**
    * @deprecated Use `cy.intercept()` instead.
    *
    * Use `cy.route()` to manage the behavior of network requests.
    * @see https://on.cypress.io/route
    * @example
    *    cy.server()
    *    cy.route('https://localhost:7777/users', [{id: 1, name: 'Pat'}])
    */
  def route(url: String): Chainable[Null] = js.native
  /**
    * @deprecated Use `cy.intercept()` instead.
    *
    * Spy or stub request with specific method and url.
    *
    * @see https://on.cypress.io/route
    * @example
    *    cy.server()
    *    // spy on POST /todos requests
    *    cy.route('POST', '/todos').as('add-todo')
    */
  def route(url: String, response: String): Chainable[Null] = js.native
  def route(url: String, response: js.Object): Chainable[Null] = js.native
  def route(url: js.RegExp): Chainable[Null] = js.native
  def route(url: js.RegExp, response: String): Chainable[Null] = js.native
  def route(url: js.RegExp, response: js.Object): Chainable[Null] = js.native
  
  /**
    * Take a screenshot of the application under test and the Cypress Command Log.
    *
    * @see https://on.cypress.io/screenshot
    * @example
    *    cy.screenshot()
    *    cy.get(".post").screenshot()
    */
  def screenshot(): Chainable[Null] = js.native
  /**
    * Take a screenshot of the application under test and the Cypress Command Log and save under given filename.
    *
    * @see https://on.cypress.io/screenshot
    * @example
    *    cy.get(".post").screenshot("post-element")
    */
  def screenshot(fileName: String): Chainable[Null] = js.native
  def screenshot(fileName: String, options: PartialLoggableTimeoutablBlackout): Chainable[Null] = js.native
  def screenshot(options: PartialLoggableTimeoutablBlackout): Chainable[Null] = js.native
  
  /**
    * Scroll an element into view.
    *
    * @see https://on.cypress.io/scrollintoview
    */
  def scrollIntoView(): Chainable[Subject] = js.native
  def scrollIntoView(options: PartialScrollIntoViewOpti): Chainable[Subject] = js.native
  
  /**
    * Scroll to a specific position.
    *
    * @see https://on.cypress.io/scrollto
    */
  def scrollTo(position: PositionType): Chainable[Subject] = js.native
  def scrollTo(position: PositionType, options: PartialScrollToOptions): Chainable[Subject] = js.native
  def scrollTo(x: String, y: String): Chainable[Subject] = js.native
  def scrollTo(x: String, y: String, options: PartialScrollToOptions): Chainable[Subject] = js.native
  def scrollTo(x: String, y: Double): Chainable[Subject] = js.native
  def scrollTo(x: String, y: Double, options: PartialScrollToOptions): Chainable[Subject] = js.native
  def scrollTo(x: Double, y: String): Chainable[Subject] = js.native
  def scrollTo(x: Double, y: String, options: PartialScrollToOptions): Chainable[Subject] = js.native
  /**
    * Scroll to a specific X,Y position.
    *
    * @see https://on.cypress.io/scrollto
    */
  def scrollTo(x: Double, y: Double): Chainable[Subject] = js.native
  def scrollTo(x: Double, y: Double, options: PartialScrollToOptions): Chainable[Subject] = js.native
  
  /**
    * Select an `<option>` with specific text, value, or index within a `<select>`.
    *
    * @see https://on.cypress.io/select
    */
  def select(valueOrTextOrIndex: String): Chainable[Subject] = js.native
  def select(valueOrTextOrIndex: String, options: PartialSelectOptions): Chainable[Subject] = js.native
  def select(valueOrTextOrIndex: js.Array[String | Double]): Chainable[Subject] = js.native
  def select(valueOrTextOrIndex: js.Array[String | Double], options: PartialSelectOptions): Chainable[Subject] = js.native
  def select(valueOrTextOrIndex: Double): Chainable[Subject] = js.native
  def select(valueOrTextOrIndex: Double, options: PartialSelectOptions): Chainable[Subject] = js.native
  
  def selectFile(files: js.Array[FileReference]): Chainable[Subject] = js.native
  def selectFile(files: js.Array[FileReference], options: PartialSelectFileOptions): Chainable[Subject] = js.native
  /**
    * Select a file with the given <input> element, or drag and drop a file over any DOM subject.
    *
    * @param {FileReference} files - The file(s) to select or drag onto this element.
    * @see https://on.cypress.io/selectfile
    * @example
    *    cy.get('input[type=file]').selectFile(Cypress.Buffer.from('text'))
    *    cy.get('input[type=file]').selectFile({
    *      fileName: 'users.json',
    *      contents: [{name: 'John Doe'}]
    *    })
    */
  def selectFile(files: FileReference): Chainable[Subject] = js.native
  def selectFile(files: FileReference, options: PartialSelectFileOptions): Chainable[Subject] = js.native
  
  /**
    * @deprecated Use `cy.intercept()` instead.
    *
    * Start a server to begin routing responses to `cy.route()` and `cy.request()`.
    *
    * @example
    *    // start server
    *    cy.server()
    *    // get default server options
    *    cy.server().should((server) => {
    *      expect(server.delay).to.eq(0)
    *      expect(server.method).to.eq('GET')
    *      expect(server.status).to.eq(200)
    *      // and many others options
    *    })
    *
    * @see https://on.cypress.io/server
    */
  def server(): Chainable[ServerOptions] = js.native
  def server(options: PartialServerOptions): Chainable[ServerOptions] = js.native
  
  /**
    * Save/Restore browser Cookies, LocalStorage, and SessionStorage data resulting from the supplied `setup` function.
    *
    * Only available if the `experimentalSessionAndOrigin` config option is enabled.
    *
    * @see https://on.cypress.io/session
    */
  def session(id: String): Chainable[Null] = js.native
  def session(id: String, setup: js.Function0[Unit]): Chainable[Null] = js.native
  def session(id: String, setup: js.Function0[Unit], options: SessionOptions): Chainable[Null] = js.native
  def session(id: String, setup: Unit, options: SessionOptions): Chainable[Null] = js.native
  def session(id: js.Object): Chainable[Null] = js.native
  def session(id: js.Object, setup: js.Function0[Unit]): Chainable[Null] = js.native
  def session(id: js.Object, setup: js.Function0[Unit], options: SessionOptions): Chainable[Null] = js.native
  def session(id: js.Object, setup: Unit, options: SessionOptions): Chainable[Null] = js.native
  
  /**
    * Set a browser cookie.
    *
    * @see https://on.cypress.io/setcookie
    */
  def setCookie(name: String, value: String): Chainable[Cookie] = js.native
  def setCookie(name: String, value: String, options: PartialSetCookieOptions): Chainable[Cookie] = js.native
  
  /**
    * Traverse into an element's shadow root.
    *
    * @example
    *    cy.get('my-component')
    *    .shadow()
    *    .find('.my-button')
    *    .click()
    * @see https://on.cypress.io/shadow
    */
  def shadow(): Chainable[Subject] = js.native
  
  // sinon-chai
  /**
    * Assert spy/stub was called the `new` operator.
    * Beware that this is inferred based on the value of the this object and the spy function's prototype, so it may give false positives if you actively return the right kind of object.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledwithnew
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  /**
    * `true` if the spy was called at least once
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalled
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert spy was called exactly once
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledonce
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert spy was called exactly three times
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledthrice
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert spy was called exactly twice
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledtwice
    * @see https://on.cypress.io/assertions
    */
  // sinon-chai.not
  /**
    * Assert spy/stub was not called the `new` operator.
    * Beware that this is inferred based on the value of the this object and the spy function's prototype, so it may give false positives if you actively return the right kind of object.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledwithnew
    * @see https://on.cypress.io/assertions
    */
  /**
    * `true` if the spy was not called at least once
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalled
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert spy was not called exactly once
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledonce
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert spy was not called exactly three times
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledthrice
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert spy was not called exactly twice
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledtwice
    * @see https://on.cypress.io/assertions
    */
  def should(
    chainer: alwaysDothaveDotbeenDotcalledWithNew | beDotalwaysDotcalledWithNew | beDotcalled | beDotcalledOnce | beDotcalledThrice | beDotcalledTwice | beDotcalledWithNew | haveDotbeenDotcalled | haveDotbeenDotcalledOnce | haveDotbeenDotcalledThrice | haveDotbeenDotcalledTwice | haveDotbeenDotcalledWithNew | notDotalwaysDothaveDotbeenDotcalledWithNew | notDotbeDotalwaysDotcalledWithNew | notDotbeDotcalled | notDotbeDotcalledOnce | notDotbeDotcalledThrice | notDotbeDotcalledTwice | notDotbeDotcalledWithNew | notDothaveDotbeenDotcalled | notDothaveDotbeenDotcalledOnce | notDothaveDotbeenDotcalledThrice | notDothaveDotbeenDotcalledTwice | notDothaveDotbeenDotcalledWithNew
  ): Chainable[Subject] = js.native
  def should(
    chainer: haveDotownPropertyDescriptor | haveOwnPropertyDescriptor | notDothaveDotownPropertyDescriptor | notDothaveOwnPropertyDescriptor,
    name: String,
    descriptor: js.PropertyDescriptor
  ): Chainable[Subject] = js.native
  /**
    * Asserts that the target has a property with the given key `name`.
    * @example
    *    cy.wrap({ a: 1 }).should('have.property', 'a')
    *    cy.wrap({ a: 1 }).should('have.property', 'a', 1)
    * @see http://chaijs.com/api/bdd/#method_property
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  /**
    * Asserts that the target has its own property descriptor with the given key name.
    * @example
    *    cy.wrap({a: 1}).should('have.ownPropertyDescriptor', 'a', { value: 1 })
    * @see http://chaijs.com/api/bdd/#method_ownpropertydescriptor
    * @see https://on.cypress.io/assertions
    */
  /**
    * Asserts that the target has a property with the given key `name`.
    * @example
    *    cy.wrap({ a: 1 }).should('not.have.property', 'b')
    *    cy.wrap({ a: 1 }).should('not.have.property', 'b', 1)
    * @see http://chaijs.com/api/bdd/#method_property
    * @see https://on.cypress.io/assertions
    */
  /**
    * Asserts that the target has its own property descriptor with the given key name.
    * @example
    *    cy.wrap({a: 1}).should('not.have.ownPropertyDescriptor', 'a', { value: 2 })
    * @see http://chaijs.com/api/bdd/#method_ownpropertydescriptor
    * @see https://on.cypress.io/assertions
    */
  def should(
    chainer: haveDotaDotproperty | haveDotdeepDotnestedDotproperty | haveDotdeepDotownDotproperty | haveDotdeepDotproperty | haveDotnestedDotproperty | haveDotownDotproperty | haveDotownPropertyDescriptor | haveDotproperty | haveOwnPropertyDescriptor | notDothaveDotaDotproperty | notDothaveDotdeepDotnestedDotproperty | notDothaveDotdeepDotownDotproperty | notDothaveDotdeepDotproperty | notDothaveDotnestedDotproperty | notDothaveDotownDotproperty | notDothaveDotownPropertyDescriptor | notDothaveDotproperty | notDothaveOwnPropertyDescriptor,
    property: String
  ): Chainable[Subject] = js.native
  def should(
    chainer: haveDotaDotproperty | haveDotdeepDotnestedDotproperty | haveDotdeepDotownDotproperty | haveDotdeepDotproperty | haveDotnestedDotproperty | haveDotownDotproperty | haveDotproperty | notDothaveDotaDotproperty | notDothaveDotdeepDotnestedDotproperty | notDothaveDotdeepDotownDotproperty | notDothaveDotdeepDotproperty | notDothaveDotnestedDotproperty | notDothaveDotownDotproperty | notDothaveDotproperty,
    property: String,
    value: Any
  ): Chainable[Subject] = js.native
  /**
    * Assert spy was called after `anotherSpy`
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledafteranotherspy
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  /**
    * Assert spy was called before `anotherSpy`
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledbeforeanotherspy
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert spy was called before anotherSpy, and no spy calls occurred between spy and anotherSpy.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledimmediatelybeforeanotherspy
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert spy was called after anotherSpy, and no spy calls occurred between anotherSpy and spy.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledimmediatelyafteranotherspy
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert spy was not.called after `anotherSpy`
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledafteranotherspy
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert spy was not called before `anotherSpy`
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledbeforeanotherspy
    * @see https://on.cypress.io/assertions
    */
  def should(
    chainer: beDotcalledAfter | beDotcalledBefore | beDotcalledImmediatelyAfter | beDotcalledImmediatelyBefore | haveDotbeenDotcalledAfter | haveDotbeenDotcalledBefore | haveDotbeenDotcalledImmediatelyAfter | haveDotbeenDotcalledImmediatelyBefore | notDotbeDotcalledAfter | notDotbeDotcalledBefore | notDotbeDotcalledImmediatelyAfter | notDotbeDotcalledImmediatelyBefore | notDothaveDotbeenDotcalledAfter | notDothaveDotbeenDotcalledBefore | notDothaveDotbeenDotcalledImmediatelyAfter | notDothaveDotbeenDotcalledImmediatelyBefore,
    spy: SinonSpy[js.Array[Any], Any]
  ): Chainable[Subject] = js.native
  /**
    * Asserts that the target's `length` property is within `start` and `finish`.
    * @example
    *    cy.wrap([1, 2, 3]).should('have.length.within', 1, 5)
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  /**
    * Asserts that the target's `length` property is within `start` and `finish`.
    * @example
    *    cy.wrap([1, 2, 3]).should('not.have.length.within', 6, 12)
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  def should(
    chainer: haveDotlengthDotwithin | haveDotlengthOfDotwithin | notDothaveDotlengthDotwithin | notDothaveDotlengthOfDotwithin,
    start: Double,
    finish: Double
  ): Chainable[Subject] = js.native
  /**
    * Causes all `.keys` assertions that follow in the chain to require that the target have all of the given keys. This is the opposite of `.any`, which only requires that the target have at least one of the given keys.
    * @example
    *    cy.wrap({ a: 1, b: 2 }).should('have.all.keys', 'a', 'b')
    * @see http://chaijs.com/api/bdd/#method_all
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  /**
    * Causes all `.keys` assertions that follow in the chain to only require that the target have at least one of the given keys. This is the opposite of `.all`, which requires that the target have all of the given keys.
    * @example
    *    cy.wrap({ a: 1, b: 2 }).should('have.any.keys', 'a')
    * @see http://chaijs.com/api/bdd/#method_any
    * @see https://on.cypress.io/assertions
    */
  /**
    * Causes all `.keys` assertions that follow in the chain to not require that the target have all of the given keys. This is the opposite of `.any`, which only requires that the target have at least one of the given keys.
    * @example
    *    cy.wrap({ a: 1, b: 2 }).should('not.have.all.keys', 'c', 'd')
    * @see http://chaijs.com/api/bdd/#method_all
    * @see https://on.cypress.io/assertions
    */
  /**
    * Causes all `.keys` assertions that follow in the chain to only require that the target not have at least one of the given keys. This is the opposite of `.all`, which requires that the target have all of the given keys.
    * @example
    *    cy.wrap({ a: 1, b: 2 }).should('not.have.any.keys', 'c')
    * @see http://chaijs.com/api/bdd/#method_any
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert if spy was always called with matching arguments (and possibly others).
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spyalwayscalledwithmatcharg1-arg2-
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert spy was called at least once with the provided arguments and no others.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledwithexactlyarg1-arg2-
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert spy was called with matching arguments (and possibly others).
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledwithmatcharg1-arg2-
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert spy was called at least once with the provided arguments.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledwitharg1-arg2-
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert spy was always called with the provided arguments (and possibly others).
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spyalwayscalledwitharg1-arg2-
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert spy was called at exactly once with the provided arguments.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledwitharg1-arg2-
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert spy was always called with the exact provided arguments.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spyalwayscalledwithexactlyarg1-arg2-
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert spy was called at exactly once with the provided arguments.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert if spy was not always called with matching arguments (and possibly others).
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spyalwayscalledwithmatcharg1-arg2-
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert spy was not called at least once with the provided arguments and no others.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledwithexactlyarg1-arg2-
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert spy was not called with matching arguments (and possibly others).
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledwithmatcharg1-arg2-
    * @see https://on.cypress.io/assertions
    */
  def should(
    chainer: alwaysDothaveDotbeenDotcalledWith | alwaysDothaveDotbeenDotcalledWithMatch | beDotalwaysDotcalledWith | beDotalwaysDotcalledWithExactly | beDotalwaysDotcalledWithMatch | beDotcalledOnceWith | beDotcalledOnceWithExactly | beDotcalledWith | beDotcalledWithExactly | beDotcalledWithMatch | haveDotallDotdeepDotkeys | haveDotallDotkeys | haveDotanyDotkeys | haveDotbeenDotcalledOnceWith | haveDotbeenDotcalledOnceWithExactly | haveDotbeenDotcalledWith | haveDotbeenDotcalledWithExactly | haveDotbeenDotcalledWithMatch | haveDotdeepDotkeys | haveDotkeys | includeDotanyDotkeys | notDotalwaysDothaveDotbeenDotcalledWith | notDotalwaysDothaveDotbeenDotcalledWithMatch | notDotbeDotalwaysDotcalledWith | notDotbeDotalwaysDotcalledWithExactly | notDotbeDotalwaysDotcalledWithMatch | notDotbeDotcalledOnceWith | notDotbeDotcalledOnceWithExactly | notDotbeDotcalledWith | notDotbeDotcalledWithExactly | notDotbeDotcalledWithMatch | notDothaveDotallDotdeepDotkeys | notDothaveDotallDotkeys | notDothaveDotanyDotkeys | notDothaveDotbeenDotcalledOnceWith | notDothaveDotbeenDotcalledOnceWithExactly | notDothaveDotbeenDotcalledWith | notDothaveDotbeenDotcalledWithExactly | notDothaveDotbeenDotcalledWithMatch | notDothaveDotdeepDotkeys | notDothaveDotkeys | notDotincludeDotanyDotkeys,
    value: (Any | String)*
  ): Chainable[Subject] = js.native
  /**
    * When the target is a string, `.include` asserts that the given string `val` is a substring of the target.
    * @example
    *    cy.wrap('foobar').should('include', 'foo')
    * @see http://chaijs.com/api/bdd/#method_include
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  /**
    * When the target is a string, `.include` asserts that the given string `val` is not a substring of the target.
    * @example
    *    cy.wrap('foobar').should('not.include', 'baz')
    * @see http://chaijs.com/api/bdd/#method_include
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert spy always returned the provided value.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spyalwaysreturnedobj
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert spy was called at least once with `obj` as `this`. `calledOn` also accepts a matcher (see [matchers](http://sinonjs.org/releases/v4.1.3/spies/#matchers)).
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledonobj
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert spy returned the provided value at least once. (see [matchers](http://sinonjs.org/releases/v4.1.3/spies/#matchers))
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spyreturnedobj
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert the spy was always called with obj as this
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spyalwayscalledonobj
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert spy not always returned the provided value.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spyalwaysreturnedobj
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert spy was not called at least once with `obj` as `this`. `calledOn` also accepts a matcher (see [matchers](http://sinonjs.org/releases/v4.1.3/spies/#matchers)).
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledonobj
    * @see https://on.cypress.io/assertions
    */
  /**
    * Assert spy did not return the provided value at least once. (see [matchers](http://sinonjs.org/releases/v4.1.3/spies/#matchers))
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spyreturnedobj
    * @see https://on.cypress.io/assertions
    */
  def should(
    chainer: alwaysDothaveDotbeenDotcalledOn | alwaysDotreturned | beDotalwaysDotcalledOn | beDotcalledOn | deepDotinclude | deepDotnestedDotinclude | deepDotownDotinclude | haveDotalwaysDotreturned | haveDotbeenDotcalledOn | haveDotreturned | include | nestedDotinclude | notDotalwaysDothaveDotbeenDotcalledOn | notDotalwaysDotreturned | notDotbeDotalwaysDotcalledOn | notDotbeDotcalledOn | notDotdeepDotinclude | notDotdeepDotnestedDotinclude | notDotdeepDotownDotinclude | notDothaveDotalwaysDotreturned | notDothaveDotbeenDotcalledOn | notDothaveDotreturned | notDotinclude | notDotnestedDotinclude | notDotownDotinclude | notDotreturned | ownDotinclude | returned,
    value: Any
  ): Chainable[Subject] = js.native
  /**
    * Asserts that the target's `length` property is equal to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('have.length', 3)
    *    cy.wrap('foo').should('have.length', 3)
    * @alias lengthOf
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  /**
    * Asserts that the target's `length` property is greater than to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('have.length.greaterThan', 2)
    *    cy.wrap('foo').should('have.length.greaterThan', 2)
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Asserts that the target's `length` property is greater than to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('have.length.gt', 2)
    *    cy.wrap('foo').should('have.length.gt', 2)
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Asserts that the target's `length` property is greater than or equal to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('have.length.gte', 2)
    *    cy.wrap('foo').should('have.length.gte', 2)
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Asserts that the target's `length` property is less than to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('have.length.lessThan', 4)
    *    cy.wrap('foo').should('have.length.lessThan', 4)
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Asserts that the target's `length` property is less than to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('have.length.lt', 4)
    *    cy.wrap('foo').should('have.length.lt', 4)
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Asserts that the target's `length` property is less than or equal to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('have.length.lte', 4)
    *    cy.wrap('foo').should('have.length.lte', 4)
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Asserts that the target's `length` property is not equal to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('not.have.length', 2)
    * cy.wrap('foo').should('not.have.length', 2)
    * @alias lengthOf
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Asserts that the target's `length` property is not greater than to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('not.have.length.greaterThan', 4)
    *    cy.wrap('foo').should('not.have.length.greaterThan', 4)
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Asserts that the target's `length` property is not greater than to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('not.have.length.gt', 4)
    *    cy.wrap('foo').should('not.have.length.gt', 4)
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Asserts that the target's `length` property is not greater than or equal to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('not.have.length.gte', 4)
    *    cy.wrap('foo').should('not.have.length.gte', 4)
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Asserts that the target's `length` property is less than to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('have.length.lessThan', 2)
    *    cy.wrap('foo').should('have.length.lessThan', 2)
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Asserts that the target's `length` property is not less than to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('not.have.length.lt', 2)
    *    cy.wrap('foo').should('not.have.length.lt', 2)
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Asserts that the target's `length` property is not less than or equal to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('not.have.length.lte', 2)
    *    cy.wrap('foo').should('not.have.length.lte', 2)
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  def should(
    chainer: haveDotlength | haveDotlengthDotabove | haveDotlengthDotatDotleast | haveDotlengthDotatDotmost | haveDotlengthDotbelow | haveDotlengthDotgreaterThan | haveDotlengthDotgt | haveDotlengthDotgte | haveDotlengthDotlessThan | haveDotlengthDotlt | haveDotlengthDotlte | haveDotlengthOf | haveDotlengthOfDotabove | haveDotlengthOfDotatDotleast | haveDotlengthOfDotatDotmost | haveDotlengthOfDotbelow | haveDotlengthOfDotgreaterThan | haveDotlengthOfDotgt | haveDotlengthOfDotgte | haveDotlengthOfDotlessThan | haveDotlengthOfDotlt | haveDotlengthOfDotlte | notDothaveDotlength | notDothaveDotlengthDotabove | notDothaveDotlengthDotatDotleast | notDothaveDotlengthDotatDotmost | notDothaveDotlengthDotbelow | notDothaveDotlengthDotgreaterThan | notDothaveDotlengthDotgt | notDothaveDotlengthDotgte | notDothaveDotlengthDotlessThan | notDothaveDotlengthDotlt | notDothaveDotlengthDotlte | notDothaveDotlengthOf | notDothaveDotlengthOfDotabove | notDothaveDotlengthOfDotatDotleast | notDothaveDotlengthOfDotatDotmost | notDothaveDotlengthOfDotbelow | notDothaveDotlengthOfDotgreaterThan | notDothaveDotlengthOfDotgt | notDothaveDotlengthOfDotgte | notDothaveDotlengthOfDotlessThan | notDothaveDotlengthOfDotlt | notDothaveDotlengthOfDotlte,
    value: Double
  ): Chainable[Subject] = js.native
  /**
    * Asserts that the target array has the same members as the given array `set`.
    * @example
    *    cy.wrap([1, 2, 3]).should('have.members', [2, 1, 3])
    * @see http://chaijs.com/api/bdd/#method_members
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  /**
    * When the target is a string, `.include` asserts that the given string `val` is a substring of the target.
    * @example
    *    cy.wrap([1, 2, 3]).should('include.members', [1, 2])
    * @see http://chaijs.com/api/bdd/#method_members
    * @see https://on.cypress.io/assertions
    */
  /**
    * Asserts that the target array does not have the same members as the given array `set`.
    * @example
    *    cy.wrap([1, 2, 3]).should('not.have.members', [4, 5, 6])
    * @see http://chaijs.com/api/bdd/#method_members
    * @see https://on.cypress.io/assertions
    */
  /**
    * When the target is a string, `.include` asserts that the given string `val` is not a substring of the target.
    * @example
    *    cy.wrap([1, 2, 3]).should('not.include.members', [4, 5])
    * @see http://chaijs.com/api/bdd/#method_members
    * @see https://on.cypress.io/assertions
    */
  def should(
    chainer: haveDotdeepDotmembers | haveDotmembers | includeDotdeepDotorderedDotmembers | includeDotmembers | includeDotorderedDotmembers | notDothaveDotdeepDotmembers | notDothaveDotmembers | notDotincludeDotdeepDotorderedDotmembers | notDotincludeDotmembers | notDotincludeDotorderedDotmembers,
    values: js.Array[Any]
  ): Chainable[Subject] = js.native
  // fallback
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    * Ctrl+Space will invoke auto-complete in most editors.
    * @see https://on.cypress.io/should
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  def should(chainers: String): Chainable[Subject] = js.native
  def should(chainers: String, value: Any): Chainable[Subject] = js.native
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  def should(chainers: String, value: Any, `match`: Any): Chainable[Subject] = js.native
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    * Passing a function to `.should()` enables you to make multiple assertions on the yielded subject. This also gives you the opportunity to massage what you'd like to assert on.
    * Just be sure _not_ to include any code that has side effects in your callback function. The callback function will be retried over and over again until no assertions within it throw.
    * @example
    *    cy
    *      .get('p')
    *      .should(($p) => {
    *        // should have found 3 elements
    *        expect($p).to.have.length(3)
    *
    *        // make sure the first contains some text content
    *        expect($p.first()).to.contain('Hello World')
    *
    *        // use jquery's map to grab all of their classes
    *        // jquery's map returns a new jquery object
    *        const classes = $p.map((i, el) => {
    *          return Cypress.$(el).attr('class')
    *        })
    *
    *        // call classes.get() to make this a plain array
    *        expect(classes.get()).to.deep.eq([
    *          'text-primary',
    *          'text-danger',
    *          'text-default'
    *        ])
    *      })
    * @see https://on.cypress.io/should
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  def should(fn: js.Function1[/* currentSubject */ Subject, Unit]): Chainable[Subject] = js.native
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  var should_Original: Chainer[Subject] = js.native
  /**
    * Asserts that the target is strictly (`===`) equal to NaN.
    * @example
    *    cy.wrap(NaN).should('be.NaN')
    * @see http://chaijs.com/api/bdd/#method_null
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_beNaN(chainer: beDotNaN): Chainable[Subject] = js.native
  // chai
  /**
    * Asserts that the target's `type` is equal to the given string type.
    * Types are case insensitive. See the `type-detect` project page for info on the type detection algorithm:
    * https://github.com/chaijs/type-detect.
    * @example
    *    cy.wrap('foo').should('be.a', 'string')
    * @see http://chaijs.com/api/bdd/#method_a
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_bea(chainer: beDota, `type`: String): Chainable[Subject] = js.native
  @JSName("should")
  def should_beabove(chainer: beDotabove, value: js.Date): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number or a date greater than the given number or date n respectively.
    * However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(6).should('be.above', 5)
    * @see http://chaijs.com/api/bdd/#method_above
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_beabove(chainer: beDotabove, value: Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target's `type` is equal to the given string type.
    * Types are case insensitive. See the `type-detect` project page for info on the type detection algorithm:
    * https://github.com/chaijs/type-detect.
    * @example
    *    cy.wrap({ foo: 'bar' }).should('be.an', 'object')
    * @alias a
    * @see http://chaijs.com/api/bdd/#method_a
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_bean(chainer: beDotan, value: String): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number that's within a given +/- `delta` range of the given number `expected`. However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(5.1).should('be.approximately', 5, 0.5)
    * @alias closeTo
    * @see http://chaijs.com/api/bdd/#method_closeto
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_beapproximately(chainer: beDotapproximately, value: Double, delta: Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target is an `arguments` object.
    * @example
    *    cy.wrap(arguments).should('be.arguments')
    * @see http://chaijs.com/api/bdd/#method_arguments
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_bearguments(chainer: beDotarguments): Chainable[Subject] = js.native
  @JSName("should")
  def should_beatleast(chainer: beDotatDotleast, value: js.Date): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number or a `n` date greater than or equal to the given number or date n respectively.
    * However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(6).should('be.at.least', 5)
    * @see http://chaijs.com/api/bdd/#method_least
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_beatleast(chainer: beDotatDotleast, value: Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number or a `n` date less than or equal to the given number or date n respectively.
    * However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(4).should('be.below', 5)
    * @see http://chaijs.com/api/bdd/#method_below
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_bebelow(chainer: beDotbelow, value: Double): Chainable[Subject] = js.native
  // jquery-chai
  /**
    * Assert that at least one element of the selection is checked, using `.is(':checked')`.
    * @example
    *    cy.get('#result').should('be.checked')
    * @see http://chaijs.com/plugins/chai-jquery/#checked
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_bechecked(chainer: beDotchecked): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number that's within a given +/- `delta` range of the given number `expected`. However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(5.1).should('be.closeTo', 5, 0.5)
    * @see http://chaijs.com/api/bdd/#method_closeto
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_becloseTo(chainer: beDotcloseTo, value: Double, delta: Double): Chainable[Subject] = js.native
  /**
    * Assert that at least one element of the selection is disabled, using `.is(':disabled')`.
    * @example
    *    cy.get('#result').should('be.disabled')
    * @see http://chaijs.com/plugins/chai-jquery/#disabled
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_bedisabled(chainer: beDotdisabled): Chainable[Subject] = js.native
  /**
    * When the target is a string or array, .empty asserts that the target's length property is strictly (===) equal to 0
    * @example
    *    cy.wrap([]).should('be.empty')
    *    cy.wrap('').should('be.empty')
    * @see http://chaijs.com/api/bdd/#method_empty
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_beempty(chainer: beDotempty): Chainable[Subject] = js.native
  /**
    * Assert that at least one element of the selection is enabled, using `.is(':enabled')`.
    * @example
    *    cy.get('#result').should('be.enabled')
    * @see http://chaijs.com/plugins/chai-jquery/#enabled
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_beenabled(chainer: beDotenabled): Chainable[Subject] = js.native
  /**
    * Asserts that the target is extensible, which means that new properties can be added to it.
    * @example
    *    cy.wrap({a: 1}).should('be.extensible')
    * @see http://chaijs.com/api/bdd/#method_extensible
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_beextensible(chainer: beDotextensible): Chainable[Subject] = js.native
  /**
    * Asserts that the target is strictly (`===`) equal to `false`.
    * @example
    *    cy.wrap(false).should('be.false')
    * @see http://chaijs.com/api/bdd/#method_false
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_befalse(chainer: beDotfalse): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number, and isn't `NaN` or positive/negative `Infinity`.
    * @example
    *    cy.wrap(1).should('be.finite')
    * @see http://chaijs.com/api/bdd/#method_finite
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_befinite(chainer: beDotfinite): Chainable[Subject] = js.native
  /**
    * Assert that at least one element of the selection is focused.
    * @example
    *    cy.get('#result').should('be.focused')
    *    cy.get('#result').should('have.focus')
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_befocused(chainer: beDotfocused): Chainable[Subject] = js.native
  /**
    * Asserts that the target is frozen, which means that new properties can't be added to it, and its existing properties can't be reassigned to different values, reconfigured, or deleted.
    * @example
    *    let frozenObject = Object.freeze({})
    *    cy.wrap(frozenObject).should('be.frozen')
    * @see http://chaijs.com/api/bdd/#method_frozen
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_befrozen(chainer: beDotfrozen): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number or a date greater than the given number or date n respectively.
    * However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(6).should('be.greaterThan', 5)
    * @alias above
    * @see http://chaijs.com/api/bdd/#method_above
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_begreaterThan(chainer: beDotgreaterThan, value: Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number or a date greater than the given number or date n respectively.
    * However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(6).should('be.gt', 5)
    * @alias above
    * @see http://chaijs.com/api/bdd/#method_above
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_begt(chainer: beDotgt, value: Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number or a `n` date greater than or equal to the given number or date n respectively.
    * However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(6).should('be.gte', 5)
    * @alias least
    * @see http://chaijs.com/api/bdd/#method_least
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_begte(chainer: beDotgte, value: Double): Chainable[Subject] = js.native
  /**
    * Assert that at least one element of the selection is hidden, using `.is(':hidden')`.
    * @example
    *    cy.get('#result').should('be.hidden')
    * @see http://chaijs.com/plugins/chai-jquery/#hidden
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_behidden(chainer: beDothidden): Chainable[Subject] = js.native
  /**
    * Asserts that the target is an instance of the given `constructor`.
    * @example
    *    cy.wrap([1, 2]).should('be.instanceOf', Array)
    * @see http://chaijs.com/api/bdd/#method_instanceof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_beinstanceOf(chainer: beDotinstanceOf, value: Any): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number or a `n` date less than or equal to the given number or date n respectively.
    * However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(4).should('be.lessThan', 5)
    * @alias below
    * @see http://chaijs.com/api/bdd/#method_below
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_belessThan(chainer: beDotlessThan, value: Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number or a `n` date less than or equal to the given number or date n respectively.
    * However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(4).should('be.lt', 5)
    * @alias below
    * @see http://chaijs.com/api/bdd/#method_below
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_belt(chainer: beDotlt, value: Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number or a date less than or equal to the given number or date n respectively.
    * However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(4).should('be.lte', 5)
    * @alias most
    * @see http://chaijs.com/api/bdd/#method_most
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_belte(chainer: beDotlte, value: Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target is strictly (`===`) equal to null.
    * @example
    *    cy.wrap(null).should('be.null')
    * @see http://chaijs.com/api/bdd/#method_null
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_benull(chainer: beDotnull): Chainable[Subject] = js.native
  /**
    * Asserts that the target is loosely (`==`) equal to `true`. However, it's often best to assert that the target is strictly (`===`) or deeply equal to its expected value.
    * @example
    *    cy.wrap(1).should('be.ok')
    * @see http://chaijs.com/api/bdd/#method_ok
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_beok(chainer: beDotok): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a member of the given array list.
    * @example
    *    cy.wrap(1).should('be.oneOf', [1, 2, 3])
    * @see http://chaijs.com/api/bdd/#method_oneof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_beoneOf(chainer: beDotoneOf, list: js.Array[Any]): Chainable[Subject] = js.native
  /**
    * Asserts that the target is sealed, which means that new properties can't be added to it, and its existing properties can't be reconfigured or deleted.
    * @example
    *    let sealedObject = Object.seal({})
    *    let frozenObject = Object.freeze({})
    *    cy.wrap(sealedObject).should('be.sealed')
    *    cy.wrap(frozenObject).should('be.sealed')
    * @see http://chaijs.com/api/bdd/#method_sealed
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_besealed(chainer: beDotsealed): Chainable[Subject] = js.native
  /**
    * Assert that at least one element of the selection is selected, using `.is(':selected')`.
    * @example
    *    cy.get('#result').should('be.selected')
    * @see http://chaijs.com/plugins/chai-jquery/#selected
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_beselected(chainer: beDotselected): Chainable[Subject] = js.native
  /**
    * Asserts that the target is strictly (`===`) equal to true.
    * @example
    *    cy.wrap(true).should('be.true')
    * @see http://chaijs.com/api/bdd/#method_true
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_betrue(chainer: beDottrue): Chainable[Subject] = js.native
  /**
    * Asserts that the target is strictly (`===`) equal to undefined.
    * @example
    *    cy.wrap(undefined).should('be.undefined')
    * @see http://chaijs.com/api/bdd/#method_undefined
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_beundefined(chainer: beDotundefined): Chainable[Subject] = js.native
  /**
    * Assert that at least one element of the selection is visible, using `.is(':visible')`.
    * @example
    *    cy.get('#result').should('be.visible')
    * @see http://chaijs.com/plugins/chai-jquery/#visible
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_bevisible(chainer: beDotvisible): Chainable[Subject] = js.native
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_bewithin(chainer: beDotwithin, start: js.Date, end: js.Date): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number or a date greater than or equal to the given number or date `start`, and less than or equal to the given number or date `finish` respectively.
    * However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(6).should('be.within', 5, 10)
    * @see http://chaijs.com/api/bdd/#method_within
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_bewithin(chainer: beDotwithin, start: Double, end: Double): Chainable[Subject] = js.native
  /**
    * When one argument is provided, `.change` asserts that the given function `subject` returns a different value when it's invoked before the target function compared to when it's invoked afterward.
    * However, it's often best to assert that `subject` is equal to its expected value.
    * @example
    *    let dots = ''
    *    function addDot() { dots += '.' }
    *    function getDots() { return dots }
    *    cy.wrap(addDot).should('change', getDots)
    * @see http://chaijs.com/api/bdd/#method_change
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_change(chainer: change, fn: js.Function1[/* repeated */ Any, Any]): Chainable[Subject] = js.native
  /**
    * When two arguments are provided, `.change` asserts that the value of the given object `subject`'s `prop` property is different before invoking the target function compared to afterward.
    * @example
    *    const myObj = { dots: '' }
    *    function addDot() { myObj.dots += '.' }
    *    cy.wrap(addDot).should('change', myObj, 'dots')
    * @see http://chaijs.com/api/bdd/#method_change
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_change(chainer: change, obj: js.Object, prop: String): Chainable[Subject] = js.native
  /**
    * Assert that the selection contains the given text, using `:contains()`. If the object asserted against is not a jQuery object, or if `contain` is not called as a function, the original implementation will be called.
    * @example
    *    cy.get('#result').should('contain', 'text')
    * @see http://chaijs.com/plugins/chai-jquery/#containtext
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_contain(chainer: contain, value: String): Chainable[Subject] = js.native
  /**
    * When the target is a string, `.include` asserts that the given string val is a substring of the target.
    * @example
    *    cy.wrap('tester').should('contain', 'test')
    * @alias include
    * @see http://chaijs.com/api/bdd/#method_include
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_contain(chainer: contain, value: Any): Chainable[Subject] = js.native
  /**
    * Assert that the html of the first element of the selection partially contains the given html, using `.html()`.
    * @example
    *    cy.get('#result').should('contain.html', '<em>John Doe</em>')
    * @see http://chaijs.com/plugins/chai-jquery/#htmlhtml
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_containhtml(chainer: containDothtml, value: String): Chainable[Subject] = js.native
  /**
    * Assert that the text of the first element of the selection partially contains the given text, using `.text()`.
    * @example
    *    cy.get('#result').should('contain.text', 'John Doe')
    * @see http://chaijs.com/plugins/chai-jquery/#texttext
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_containtext(chainer: containDottext, value: String): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection partially contains the given value, using `.val()`.
    * @example
    *    cy.get('textarea').should('contain.value', 'foo bar baz')
    * @see http://chaijs.com/plugins/chai-jquery/#valuevalue
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_containvalue(chainer: containDotvalue, value: String): Chainable[Subject] = js.native
  /**
    * When one argument is provided, `.decrease` asserts that the given function `subject` returns a lesser number when it's invoked after invoking the target function compared to when it's invoked beforehand.
    * `.decrease` also causes all `.by` assertions that follow in the chain to assert how much lesser of a number is returned. It's often best to assert that the return value decreased by the expected amount, rather than asserting it decreased by any amount.
    * @example
    *    let val = 1
    *    function subtractTwo() { val -= 2 }
    *    function getVal() { return val }
    *    cy.wrap(subtractTwo).should('decrease', getVal)
    * @see http://chaijs.com/api/bdd/#method_decrease
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_decrease(chainer: decrease, fn: js.Function1[/* repeated */ Any, Any]): Chainable[Subject] = js.native
  /**
    * When two arguments are provided, `.decrease` asserts that the value of the given object `subject`'s `prop` property is lesser after invoking the target function compared to beforehand.
    * @example
    *    let val = 1
    *    function subtractTwo() { val -= 2 }
    *    function getVal() { return val }
    *    cy.wrap(subtractTwo).should('decrease', getVal)
    * @see http://chaijs.com/api/bdd/#method_decrease
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_decrease(chainer: decrease, obj: js.Object, prop: String): Chainable[Subject] = js.native
  /**
    * Causes all `.equal`, `.include`, `.members`, `.keys`, and `.property` assertions that follow in the chain to use deep equality instead of strict (`===`) equality. See the `deep-eql` project page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.
    * @example
    *    cy.wrap({ a: 1 }).should('deep.equal', { a: 1 })
    * @see http://chaijs.com/api/bdd/#method_deep
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_deepequal(chainer: deepDotequal, value: Subject): Chainable[Subject] = js.native
  /**
    * Asserts that the target is strictly (`===`) equal to the given `val`.
    * @example
    *    cy.wrap(1).should('eq', 1)
    * @alias equal
    * @see http://chaijs.com/api/bdd/#method_equal
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_eq(chainer: eq, value: Any): Chainable[Subject] = js.native
  /**
    * Asserts that the target is deeply equal to the given `obj`. See the `deep-eql` project page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.
    * @example
    *    cy.wrap({a: 1}).should('eql', {a: 1}).and('not.equal', {a: 1})
    * @see http://chaijs.com/api/bdd/#method_eql
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_eql(chainer: eql, value: Any): Chainable[Subject] = js.native
  /**
    * Asserts that the target is strictly (`===`) equal to the given `val`.
    * @example
    *    cy.wrap(1).should('equal', 1)
    * @see http://chaijs.com/api/bdd/#method_equal
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_equal(chainer: equal, value: Any): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not strictly (`===`) equal to either `null` or `undefined`. However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(1).should('exist')
    * @see http://chaijs.com/api/bdd/#method_exist
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_exist(chainer: exist): Chainable[Subject] = js.native
  /**
    * Causes all `.key` assertions that follow in the chain to require that the target have all of the given keys. This is the opposite of `.any`, which only requires that the target have at least one of the given keys.
    * @example
    *    cy.wrap({ a: 1, b: 2 }).should('have.all.key', 'a', 'b')
    * @see http://chaijs.com/api/bdd/#method_all
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_haveallkey(chainer: haveDotallDotkey, value: String*): Chainable[Subject] = js.native
  /**
    * Assert spy always returned the provided value.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_havealwaysreturned(chainer: haveDotalwaysDotreturned, obj: Any): Chainable[Subject] = js.native
  /**
    * Assert spy always threw an exception.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spyalwaysthrew
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_havealwaysthrown(chainer: haveDotalwaysDotthrown): Chainable[Subject] = js.native
  @JSName("should")
  def should_havealwaysthrown(chainer: haveDotalwaysDotthrown, value: String): Chainable[Subject] = js.native
  @JSName("should")
  def should_havealwaysthrown(chainer: haveDotalwaysDotthrown, value: js.Error): Chainable[Subject] = js.native
  @JSName("should")
  def should_havealwaysthrown(chainer: haveDotalwaysDotthrown, value: ErrorConstructor): Chainable[Subject] = js.native
  /**
    * Causes all `.key` assertions that follow in the chain to only require that the target have at least one of the given keys. This is the opposite of `.all`, which requires that the target have all of the given keys.
    * @example
    *    cy.wrap({ a: 1, b: 2 }).should('have.any.key', 'a')
    * @see http://chaijs.com/api/bdd/#method_any
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_haveanykey(chainer: haveDotanyDotkey, value: String*): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection has the given attribute, using `.attr()`. Optionally, assert a particular value as well. The return value is available for chaining.
    * @example
    *    cy.get('#result').should('have.attr', 'role')
    *    cy.get('#result').should('have.attr', 'role', 'menu')
    * @see http://chaijs.com/plugins/chai-jquery/#attrname-value
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_haveattr(chainer: haveDotattr, value: String): Chainable[Subject] = js.native
  @JSName("should")
  def should_haveattr(chainer: haveDotattr, value: String, `match`: String): Chainable[Subject] = js.native
  /**
    * Assert the number of calls.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycallcount
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_havecallCount(chainer: haveDotcallCount, value: Double): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection has the given attribute, using `.attr()`. Optionally, assert a particular value as well. The return value is available for chaining.
    * @example
    *    cy.get('#result').should('have.class', 'success')
    * @see http://chaijs.com/plugins/chai-jquery/#classclassname
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_haveclass(chainer: haveDotclass, value: String): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection has the given CSS property, using `.css()`. Optionally, assert a particular value as well. The return value is available for chaining.
    * @example
    *    cy.get('#result').should('have.css', 'display', 'none')
    * @see http://chaijs.com/plugins/chai-jquery/#cssname-value
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_havecss(chainer: haveDotcss, value: String): Chainable[Subject] = js.native
  @JSName("should")
  def should_havecss(chainer: haveDotcss, value: String, `match`: String): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection has the given data value, using `.data()`. Optionally, assert a particular value as well. The return value is available for chaining.
    * @example
    *    cy.get('#result').should('have.data', 'foo', 'bar')
    * @see http://chaijs.com/plugins/chai-jquery/#dataname-value
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_havedata(chainer: haveDotdata, value: String): Chainable[Subject] = js.native
  @JSName("should")
  def should_havedata(chainer: haveDotdata, value: String, `match`: String): Chainable[Subject] = js.native
  /**
    * Asserts that the target has a property with the given key `name`. See the `deep-eql` project page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.
    * @example
    *    cy.wrap({ x: {a: 1 }}).should('have.deep.property', 'x', { a: 1 })
    * @see http://chaijs.com/api/bdd/#method_property
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_havedeepproperty(chainer: haveDotdeepDotproperty, value: String, obj: js.Object): Chainable[Subject] = js.native
  /**
    * Assert that the selection contains at least one element which has a descendant matching the given selector, using `.has()`.
    * @example
    *    cy.get('#result').should('have.descendants', 'h1')
    * @see http://chaijs.com/plugins/chai-jquery/#descendantsselector
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_havedescendants(chainer: haveDotdescendants, selector: String): Chainable[Subject] = js.native
  /**
    * Assert that at least one element of the selection is focused.
    * @example
    *    cy.get('#result').should('have.focus')
    *    cy.get('#result').should('be.focused')
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_havefocus(chainer: haveDotfocus): Chainable[Subject] = js.native
  /**
    * Assert that the html of the first element of the selection is equal to the given html, using `.html()`.
    * @example
    *    cy.get('#result').should('have.html', '<em>John Doe</em>')
    * @see http://chaijs.com/plugins/chai-jquery/#htmlhtml
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_havehtml(chainer: haveDothtml, value: String): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection has the given id, using `.attr('id')`.
    * @example
    *    cy.get('#result').should('have.id', 'result')
    * @see http://chaijs.com/plugins/chai-jquery/#idid
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_haveid(chainer: haveDotid, value: String): Chainable[Subject] = js.native
  @JSName("should")
  def should_haveid(chainer: haveDotid, value: String, `match`: String): Chainable[Subject] = js.native
  /**
    * Asserts that the target array has the same members as the given array where order matters.
    * @example
    *    cy.wrap([1, 2, 3]).should('have.ordered.members', [1, 2, 3])
    * @see http://chaijs.com/api/bdd/#method_members
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_haveorderedmembers(chainer: haveDotorderedDotmembers, values: js.Array[Any]): Chainable[Subject] = js.native
  /**
    * Causes all `.property` and `.include` assertions that follow in the chain to ignore inherited properties.
    * @example
    *    Object.prototype.b = 2
    *    cy.wrap({ a: 1 }).should('have.property', 'a').and('not.have.ownProperty', 'b')
    * @see http://chaijs.com/api/bdd/#method_ownproperty
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_haveownProperty(chainer: haveDotownProperty, property: String): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection has the given property, using `.prop()`. Optionally, assert a particular value as well. The return value is available for chaining.
    * @example
    *    cy.get('#result').should('have.prop', 'disabled')
    *    cy.get('#result').should('have.prop', 'disabled', false)
    * @see http://chaijs.com/plugins/chai-jquery/#propname-value
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_haveprop(chainer: haveDotprop, value: String): Chainable[Subject] = js.native
  @JSName("should")
  def should_haveprop(chainer: haveDotprop, value: String, `match`: Any): Chainable[Subject] = js.native
  /**
    * Asserts that the target string contains the given substring `str`.
    * @example
    *    cy.wrap('foobar').should('have.string', 'bar')
    * @see http://chaijs.com/api/bdd/#method_string
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_havestring(chainer: haveDotstring, `match`: String): Chainable[Subject] = js.native
  @JSName("should")
  def should_havestring(chainer: haveDotstring, `match`: js.RegExp): Chainable[Subject] = js.native
  /**
    * Assert that the text of the first element of the selection is equal to the given text, using `.text()`.
    * @example
    *    cy.get('#result').should('have.text', 'John Doe')
    * @see http://chaijs.com/plugins/chai-jquery/#texttext
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_havetext(chainer: haveDottext, value: String): Chainable[Subject] = js.native
  /**
    * Assert spy threw an exception at least once.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spythrew
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_havethrown(chainer: haveDotthrown): Chainable[Subject] = js.native
  @JSName("should")
  def should_havethrown(chainer: haveDotthrown, value: String): Chainable[Subject] = js.native
  @JSName("should")
  def should_havethrown(chainer: haveDotthrown, value: js.Error): Chainable[Subject] = js.native
  @JSName("should")
  def should_havethrown(chainer: haveDotthrown, value: ErrorConstructor): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection has the given value, using `.val()`.
    * @example
    *    cy.get('textarea').should('have.value', 'foo bar baz')
    * @see http://chaijs.com/plugins/chai-jquery/#valuevalue
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_havevalue(chainer: haveDotvalue, value: String): Chainable[Subject] = js.native
  /**
    * Causes all `.keys` assertions that follow in the chain to require the target to be a superset of the expected set, rather than an identical set.
    * @example
    *    cy.wrap({ a: 1, b: 2 }).should('include.all.keys', 'a', 'b')
    * @see http://chaijs.com/api/bdd/#method_keys
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_includeallkeys(chainer: includeDotallDotkeys, value: String*): Chainable[Subject] = js.native
  /**
    * Assert that the html of the first element of the selection partially contains the given html, using `.html()`.
    * @example
    *    cy.get('#result').should('include.html', '<em>John Doe</em>')
    * @see http://chaijs.com/plugins/chai-jquery/#htmlhtml
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_includehtml(chainer: includeDothtml, value: String): Chainable[Subject] = js.native
  /**
    * Assert that the text of the first element of the selection partially contains the given text, using `.text()`.
    * @example
    *    cy.get('#result').should('include.text', 'John Doe')
    * @see http://chaijs.com/plugins/chai-jquery/#texttext
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_includetext(chainer: includeDottext, value: String): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection partially contains the given value, using `.val()`.
    * @example
    *    cy.get('textarea').should('include.value', 'foo bar baz')
    * @see http://chaijs.com/plugins/chai-jquery/#valuevalue
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_includevalue(chainer: includeDotvalue, value: String): Chainable[Subject] = js.native
  /**
    * When one argument is provided, `.increase` asserts that the given function `subject` returns a greater number when it's
    * invoked after invoking the target function compared to when it's invoked beforehand.
    * `.increase` also causes all `.by` assertions that follow in the chain to assert how much greater of a number is returned.
    * It's often best to assert that the return value increased by the expected amount, rather than asserting it increased by any amount.
    *
    * When two arguments are provided, `.increase` asserts that the value of the given object `subject`'s `prop` property is greater after
    * invoking the target function compared to beforehand.
    *
    * @example
    *    let val = 1
    *    function addTwo() { val += 2 }
    *    function getVal() { return val }
    *    cy.wrap(addTwo).should('increase', getVal)
    *
    *    const myObj = { val: 1 }
    *    function addTwo() { myObj.val += 2 }
    *    cy.wrap(addTwo).should('increase', myObj, 'val')
    * @see http://chaijs.com/api/bdd/#method_increase
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_increase(chainer: increase, value: js.Object): Chainable[Subject] = js.native
  @JSName("should")
  def should_increase(chainer: increase, value: js.Object, property: String): Chainable[Subject] = js.native
  /**
    * Assert that the selection matches a given selector, using `.is()`. Note that this overrides the built-in chai assertion. If the object asserted against is not a jQuery object, the original implementation will be called.
    * @example
    *    cy.get('#result').should('match', ':empty')
    * @see http://chaijs.com/plugins/chai-jquery/#matchselector
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_match(chainer: `match`, value: String): Chainable[Subject] = js.native
  /**
    * Asserts that the target matches the given regular expression `re`.
    * @example
    *    cy.wrap('foobar').should('match', /^foo/)
    * @see http://chaijs.com/api/bdd/#method_match
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_match(chainer: `match`, value: js.RegExp): Chainable[Subject] = js.native
  /**
    * Asserts that the target is strictly (`===`) equal to NaN.
    * @example
    *    cy.wrap(NaN).should('not.be.NaN')
    * @see http://chaijs.com/api/bdd/#method_nan
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notbeNaN(chainer: notDotbeDotNaN): Chainable[Subject] = js.native
  // chai.not
  /**
    * Asserts that the target's `type` is not equal to the given string type.
    * Types are case insensitive. See the `type-detect` project page for info on the type detection algorithm:
    * https://github.com/chaijs/type-detect.
    * @example
    *    cy.wrap('foo').should('not.be.a', 'number')
    * @see http://chaijs.com/api/bdd/#method_a
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notbea(chainer: notDotbeDota, `type`: String): Chainable[Subject] = js.native
  @JSName("should")
  def should_notbeabove(chainer: notDotbeDotabove, value: js.Date): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a not number or not a date greater than the given number or date n respectively.
    * However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(6).should('not.be.above', 10)
    * @see http://chaijs.com/api/bdd/#method_above
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notbeabove(chainer: notDotbeDotabove, value: Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target's `type` is not equal to the given string type.
    * Types are case insensitive. See the `type-detect` project page for info on the type detection algorithm:
    * https://github.com/chaijs/type-detect.
    * @example
    *    cy.wrap('foo').should('not.be.an', 'object')
    * @alias a
    * @see http://chaijs.com/api/bdd/#method_a
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notbean(chainer: notDotbeDotan, value: String): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a not number that's within a given +/- `delta` range of the given number `expected`. However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(5.1).should('not.be.approximately', 6, 0.5)
    * @alias closeTo
    * @see http://chaijs.com/api/bdd/#method_closeto
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notbeapproximately(chainer: notDotbeDotapproximately, value: Double, delta: Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not an `arguments` object.
    * @example
    *    cy.wrap(1).should('not.be.arguments')
    * @see http://chaijs.com/api/bdd/#method_arguments
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notbearguments(chainer: notDotbeDotarguments): Chainable[Subject] = js.native
  @JSName("should")
  def should_notbeatleast(chainer: notDotbeDotatDotleast, value: js.Date): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not a number or not a `n` date greater than or equal to the given number or date n respectively.
    * However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(6).should('not.be.at.least', 10)
    * @see http://chaijs.com/api/bdd/#method_least
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notbeatleast(chainer: notDotbeDotatDotleast, value: Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not a number or not a `n` date less than or equal to the given number or date n respectively.
    * However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(4).should('not.be.below', 1)
    * @see http://chaijs.com/api/bdd/#method_below
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notbebelow(chainer: notDotbeDotbelow, value: Double): Chainable[Subject] = js.native
  // jquery-chai.not
  /**
    * Assert that at least one element of the selection is not checked, using `.is(':checked')`.
    * @example
    *    cy.get('#result').should('not.be.checked')
    * @see http://chaijs.com/plugins/chai-jquery/#checked
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notbechecked(chainer: notDotbeDotchecked): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not a number that's within a given +/- `delta` range of the given number `expected`. However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(5.1).should('not.be.closeTo', 6, 0.5)
    * @see http://chaijs.com/api/bdd/#method_closeto
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notbecloseTo(chainer: notDotbeDotcloseTo, value: Double, delta: Double): Chainable[Subject] = js.native
  /**
    * Assert that at least one element of the selection is not disabled, using `.is(':disabled')`.
    * @example
    *    cy.get('#result').should('not.be.disabled')
    * @see http://chaijs.com/plugins/chai-jquery/#disabled
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notbedisabled(chainer: notDotbeDotdisabled): Chainable[Subject] = js.native
  /**
    * When the target is a not string or array, .empty asserts that the target's length property is strictly (===) equal to 0
    * @example
    *    cy.wrap([1]).should('not.be.empty')
    *    cy.wrap('foo').should('not.be.empty')
    * @see http://chaijs.com/api/bdd/#method_empty
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notbeempty(chainer: notDotbeDotempty): Chainable[Subject] = js.native
  /**
    * Assert that at least one element of the selection is not enabled, using `.is(':enabled')`.
    * @example
    *    cy.get('#result').should('not.be.enabled')
    * @see http://chaijs.com/plugins/chai-jquery/#enabled
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notbeenabled(chainer: notDotbeDotenabled): Chainable[Subject] = js.native
  /**
    * Asserts that the target is extensible, which means that new properties can be added to it.
    * @example
    *    let o = Object.seal({})
    *    cy.wrap(o).should('not.be.extensible')
    * @see http://chaijs.com/api/bdd/#method_extensible
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notbeextensible(chainer: notDotbeDotextensible): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not strictly (`===`) equal to `false`.
    * @example
    *    cy.wrap(true).should('not.be.false')
    * @see http://chaijs.com/api/bdd/#method_false
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notbefalse(chainer: notDotbeDotfalse): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number, and isn't `NaN` or positive/negative `Infinity`.
    * @example
    *    cy.wrap(NaN).should('not.be.finite')
    *    cy.wrap(Infinity).should('not.be.finite')
    * @see http://chaijs.com/api/bdd/#method_finite
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notbefinite(chainer: notDotbeDotfinite): Chainable[Subject] = js.native
  /**
    * Assert that no element of the selection is focused.
    * @example
    *    cy.get('#result').should('not.be.focused')
    *    cy.get('#result').should('not.have.focus')
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notbefocused(chainer: notDotbeDotfocused): Chainable[Subject] = js.native
  /**
    * Asserts that the target is frozen, which means that new properties can't be added to it, and its existing properties can't be reassigned to different values, reconfigured, or deleted.
    * @example
    *    cy.wrap({a: 1}).should('not.be.frozen')
    * @see http://chaijs.com/api/bdd/#method_frozen
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notbefrozen(chainer: notDotbeDotfrozen): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a not number or a date greater than the given number or date n respectively.
    * However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(6).should('be.greaterThan', 7)
    * @alias above
    * @see http://chaijs.com/api/bdd/#method_above
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notbegreaterThan(chainer: notDotbeDotgreaterThan, value: Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a not number or a date greater than the given number or date n respectively.
    * However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(6).should('not.be.gt', 7)
    * @alias above
    * @see http://chaijs.com/api/bdd/#method_above
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notbegt(chainer: notDotbeDotgt, value: Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a not number or a `n` date greater than or equal to the given number or date n respectively.
    * However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(6).should('not.be.gte', 7)
    * @alias least
    * @see http://chaijs.com/api/bdd/#method_least
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notbegte(chainer: notDotbeDotgte, value: Double): Chainable[Subject] = js.native
  /**
    * Assert that at least one element of the selection is not hidden, using `.is(':hidden')`.
    * @example
    *    cy.get('#result').should('not.be.hidden')
    * @see http://chaijs.com/plugins/chai-jquery/#hidden
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notbehidden(chainer: notDotbeDothidden): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not an instance of the given `constructor`.
    * @example
    *    cy.wrap([1, 2]).should('not.be.instanceOf', String)
    * @see http://chaijs.com/api/bdd/#method_instanceof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notbeinstanceOf(chainer: notDotbeDotinstanceOf, value: Any): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not a number or a `n` date less than or equal to the given number or date n respectively.
    * However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(4).should('not.be.lessThan', 3)
    * @alias below
    * @see http://chaijs.com/api/bdd/#method_below
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notbelessThan(chainer: notDotbeDotlessThan, value: Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not a number or a `n` date less than or equal to the given number or date n respectively.
    * However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(4).should('not.be.lt', 3)
    * @alias below
    * @see http://chaijs.com/api/bdd/#method_below
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notbelt(chainer: notDotbeDotlt, value: Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not a number or a date less than or equal to the given number or date n respectively.
    * However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(4).should('not.be.lte', 3)
    * @alias most
    * @see http://chaijs.com/api/bdd/#method_most
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notbelte(chainer: notDotbeDotlte, value: Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target is strictly (`===`) equal to null.
    * @example
    *    cy.wrap(null).should('not.be.null')
    * @see http://chaijs.com/api/bdd/#method_null
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notbenull(chainer: notDotbeDotnull): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not loosely (`==`) equal to `true`. However, it's often best to assert that the target is strictly (`===`) or deeply equal to its expected value.
    * @example
    *    cy.wrap(0).should('not.be.ok')
    * @see http://chaijs.com/api/bdd/#method_ok
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notbeok(chainer: notDotbeDotok): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a member of the given array list.
    * @example
    *    cy.wrap(42).should('not.be.oneOf', [1, 2, 3])
    * @see http://chaijs.com/api/bdd/#method_oneof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notbeoneOf(chainer: notDotbeDotoneOf, list: js.Array[Any]): Chainable[Subject] = js.native
  /**
    * Asserts that the target is sealed, which means that new properties can't be added to it, and its existing properties can't be reconfigured or deleted.
    * @example
    *    cy.wrap({a: 1}).should('be.sealed')
    *    cy.wrap({a: 1}).should('be.sealed')
    * @see http://chaijs.com/api/bdd/#method_sealed
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notbesealed(chainer: notDotbeDotsealed): Chainable[Subject] = js.native
  /**
    * Assert that at least one element of the selection is not selected, using `.is(':selected')`.
    * @example
    *    cy.get('#result').should('not.be.selected')
    * @see http://chaijs.com/plugins/chai-jquery/#selected
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notbeselected(chainer: notDotbeDotselected): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not strictly (`===`) equal to true.
    * @example
    *    cy.wrap(false).should('not.be.true')
    * @see http://chaijs.com/api/bdd/#method_true
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notbetrue(chainer: notDotbeDottrue): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not strictly (`===`) equal to undefined.
    * @example
    *    cy.wrap(true).should('not.be.undefined')
    * @see http://chaijs.com/api/bdd/#method_undefined
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notbeundefined(chainer: notDotbeDotundefined): Chainable[Subject] = js.native
  /**
    * Assert that at least one element of the selection is not visible, using `.is(':visible')`.
    * @example
    *    cy.get('#result').should('not.be.visible')
    * @see http://chaijs.com/plugins/chai-jquery/#visible
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notbevisible(chainer: notDotbeDotvisible): Chainable[Subject] = js.native
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notbewithin(chainer: notDotbeDotwithin, start: js.Date, end: js.Date): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not a number or a date greater than or equal to the given number or date `start`, and less than or equal to the given number or date `finish` respectively.
    * However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(3).should('not.be.within', 5, 10)
    * @see http://chaijs.com/api/bdd/#method_within
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notbewithin(chainer: notDotbeDotwithin, start: Double, end: Double): Chainable[Subject] = js.native
  /**
    * When one argument is provided, `.change` asserts that the given function `subject` returns a different value when it's invoked before the target function compared to when it's invoked afterward.
    * However, it's often best to assert that `subject` is equal to its expected value.
    * @example
    *    let dots = ''
    *    function addDot() { dots += '.' }
    *    function getDots() { return dots }
    *    cy.wrap(() => {}).should('not.change', getDots)
    * @see http://chaijs.com/api/bdd/#method_change
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notchange(chainer: notDotchange, fn: js.Function1[/* repeated */ Any, Any]): Chainable[Subject] = js.native
  /**
    * When two arguments are provided, `.change` asserts that the value of the given object `subject`'s `prop` property is different before invoking the target function compared to afterward.
    * @example
    *    const myObj = { dots: '' }
    *    function addDot() { myObj.dots += '.' }
    *    cy.wrap(() => {}).should('not.change', myObj, 'dots')
    * @see http://chaijs.com/api/bdd/#method_change
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notchange(chainer: notDotchange, obj: js.Object, prop: String): Chainable[Subject] = js.native
  /**
    * Assert that the selection does not contain the given text, using `:contains()`. If the object asserted against is not a jQuery object, or if `contain` is not called as a function, the original implementation will be called.
    * @example
    *    cy.get('#result').should('not.contain', 'text')
    * @see http://chaijs.com/plugins/chai-jquery/#containtext
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notcontain(chainer: notDotcontain, value: String): Chainable[Subject] = js.native
  /**
    * When the target is a string, `.include` asserts that the given string val is a substring of the target.
    * @example
    *    cy.wrap('tester').should('not.contain', 'foo')
    * @alias include
    * @see http://chaijs.com/api/bdd/#method_include
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notcontain(chainer: notDotcontain, value: Any): Chainable[Subject] = js.native
  /**
    * Assert that the html of the first element of the selection does not contain the given html, using `.html()`.
    * @example
    *    cy.get('#result').should('not.contain.html', '<em>John Doe</em>')
    * @see http://chaijs.com/plugins/chai-jquery/#htmlhtml
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notcontainhtml(chainer: notDotcontainDothtml, value: String): Chainable[Subject] = js.native
  /**
    * Assert that the text of the first element of the selection does not contain the given text, using `.text()`.
    * @example
    *    cy.get('#result').should('not.contain.text', 'John Doe')
    * @see http://chaijs.com/plugins/chai-jquery/#texttext
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notcontaintext(chainer: notDotcontainDottext, value: String): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection does not contain the given value, using `.val()`.
    * @example
    *    cy.get('textarea').should('not.contain.value', 'foo bar baz')
    * @see http://chaijs.com/plugins/chai-jquery/#valuevalue
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notcontainvalue(chainer: notDotcontainDotvalue, value: String): Chainable[Subject] = js.native
  /**
    * When one argument is provided, `.decrease` asserts that the given function `subject` does not returns a lesser number when it's invoked after invoking the target function compared to when it's invoked beforehand.
    * `.decrease` also causes all `.by` assertions that follow in the chain to assert how much lesser of a number is returned. It's often best to assert that the return value decreased by the expected amount, rather than asserting it decreased by any amount.
    * @example
    *    let val = 1
    *    function subtractTwo() { val -= 2 }
    *    function getVal() { return val }
    *    cy.wrap(() => {}).should('not.decrease', getVal)
    * @see http://chaijs.com/api/bdd/#method_decrease
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notdecrease(chainer: notDotdecrease, fn: js.Function1[/* repeated */ Any, Any]): Chainable[Subject] = js.native
  /**
    * When two arguments are provided, `.decrease` asserts that the value of the given object `subject`'s `prop` property is not lesser after invoking the target function compared to beforehand.
    * @example
    *    const myObj = { val: 1 }
    *    function subtractTwo() { myObj.val -= 2 }
    *    cy.wrap(() => {}).should('not.decrease', myObj, 'val')
    * @see http://chaijs.com/api/bdd/#method_decrease
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notdecrease(chainer: notDotdecrease, obj: js.Object, prop: String): Chainable[Subject] = js.native
  /**
    * Causes all `.equal`, `.include`, `.members`, `.keys`, and `.property` assertions that follow in the chain to not use deep equality instead of strict (`===`) equality. See the `deep-eql` project page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.
    * @example
    *    cy.wrap({ a: 1 }).should('not.deep.equal', { b: 1 })
    * @see http://chaijs.com/api/bdd/#method_deep
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notdeepequal(chainer: notDotdeepDotequal, value: Subject): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not strictly (`===`) equal to the given `val`.
    * @example
    *    cy.wrap(1).should('not.eq', 2)
    * @alias equal
    * @see http://chaijs.com/api/bdd/#method_equal
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_noteq(chainer: notDoteq, value: Any): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not deeply equal to the given `obj`. See the `deep-eql` project page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.
    * @example
    *    cy.wrap({a: 1}).should('not.eql', {c: 1}).and('not.equal', {a: 1})
    * @see http://chaijs.com/api/bdd/#method_eql
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_noteql(chainer: notDoteql, value: Any): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not strictly (`===`) equal to the given `val`.
    * @example
    *    cy.wrap(1).should('not.equal', 2)
    * @see http://chaijs.com/api/bdd/#method_equal
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notequal(chainer: notDotequal, value: Any): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not strictly (`===`) equal to either `null` or `undefined`. However, it's often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(null).should('not.exist')
    * @see http://chaijs.com/api/bdd/#method_exist
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notexist(chainer: notDotexist): Chainable[Subject] = js.native
  /**
    * Assert spy always returned the provided value.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_nothavealwaysreturned(chainer: notDothaveDotalwaysDotreturned, obj: Any): Chainable[Subject] = js.native
  /**
    * Assert spy did not always throw an exception.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spyalwaysthrew
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_nothavealwaysthrown(chainer: notDothaveDotalwaysDotthrown): Chainable[Subject] = js.native
  @JSName("should")
  def should_nothavealwaysthrown(chainer: notDothaveDotalwaysDotthrown, value: String): Chainable[Subject] = js.native
  @JSName("should")
  def should_nothavealwaysthrown(chainer: notDothaveDotalwaysDotthrown, value: js.Error): Chainable[Subject] = js.native
  @JSName("should")
  def should_nothavealwaysthrown(chainer: notDothaveDotalwaysDotthrown, value: ErrorConstructor): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection does not have the given attribute, using `.attr()`. Optionally, assert a particular value as well. The return value is available for chaining.
    * @example
    *    cy.get('#result').should('not.have.attr', 'role')
    *    cy.get('#result').should('not.have.attr', 'role', 'menu')
    * @see http://chaijs.com/plugins/chai-jquery/#attrname-value
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_nothaveattr(chainer: notDothaveDotattr, value: String): Chainable[Subject] = js.native
  @JSName("should")
  def should_nothaveattr(chainer: notDothaveDotattr, value: String, `match`: String): Chainable[Subject] = js.native
  /**
    * Assert not the number of calls.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycallcount
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_nothavecallCount(chainer: notDothaveDotcallCount, value: Double): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection does not have the given attribute, using `.attr()`. Optionally, assert a particular value as well. The return value is available for chaining.
    * @example
    *    cy.get('#result').should('not.have.class', 'success')
    * @see http://chaijs.com/plugins/chai-jquery/#classclassname
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_nothaveclass(chainer: notDothaveDotclass, value: String): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection does not have the given CSS property, using `.css()`. Optionally, assert a particular value as well. The return value is available for chaining.
    * @example
    *    cy.get('#result').should('not.have.css', 'display', 'none')
    * @see http://chaijs.com/plugins/chai-jquery/#cssname-value
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_nothavecss(chainer: notDothaveDotcss, value: String): Chainable[Subject] = js.native
  @JSName("should")
  def should_nothavecss(chainer: notDothaveDotcss, value: String, `match`: String): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection does not have the given data value, using `.data()`. Optionally, assert a particular value as well. The return value is available for chaining.
    * @example
    *    cy.get('#result').should('not.have.data', 'foo', 'bar')
    * @see http://chaijs.com/plugins/chai-jquery/#dataname-value
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_nothavedata(chainer: notDothaveDotdata, value: String): Chainable[Subject] = js.native
  @JSName("should")
  def should_nothavedata(chainer: notDothaveDotdata, value: String, `match`: String): Chainable[Subject] = js.native
  /**
    * Asserts that the target does not have a property with the given key `name`. See the `deep-eql` project page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.
    * @example
    *    cy.wrap({ x: {a: 1 }}).should('not.have.deep.property', 'y', { a: 1 })
    * @see http://chaijs.com/api/bdd/#method_property
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_nothavedeepproperty(chainer: notDothaveDotdeepDotproperty, value: String, obj: js.Object): Chainable[Subject] = js.native
  /**
    * Assert that the selection does not contain at least one element which has a descendant matching the given selector, using `.has()`.
    * @example
    *    cy.get('#result').should('not.have.descendants', 'h1')
    * @see http://chaijs.com/plugins/chai-jquery/#descendantsselector
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_nothavedescendants(chainer: notDothaveDotdescendants, selector: String): Chainable[Subject] = js.native
  /**
    * Assert that no element of the selection is focused.
    * @example
    *    cy.get('#result').should('not.have.focus')
    *    cy.get('#result').should('not.be.focused')
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_nothavefocus(chainer: notDothaveDotfocus): Chainable[Subject] = js.native
  /**
    * Assert that the html of the first element of the selection is not equal to the given html, using `.html()`.
    * @example
    *    cy.get('#result').should('not.have.html', '<em>John Doe</em>')
    * @see http://chaijs.com/plugins/chai-jquery/#htmlhtml
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_nothavehtml(chainer: notDothaveDothtml, value: String): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection does not have the given id, using `.attr('id')`.
    * @example
    *    cy.get('#result').should('not.have.id', 'result')
    * @see http://chaijs.com/plugins/chai-jquery/#idid
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_nothaveid(chainer: notDothaveDotid, value: String): Chainable[Subject] = js.native
  @JSName("should")
  def should_nothaveid(chainer: notDothaveDotid, value: String, `match`: String): Chainable[Subject] = js.native
  /**
    * Asserts that the target array does not have the same members as the given array where order matters.
    * @example
    *    cy.wrap([1, 2, 3]).should('not. have.ordered.members', [4, 5, 6])
    * @see http://chaijs.com/api/bdd/#method_members
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_nothaveorderedmembers(chainer: notDothaveDotorderedDotmembers, values: js.Array[Any]): Chainable[Subject] = js.native
  /**
    * Causes all `.property` and `.include` assertions that follow in the chain to ignore inherited properties.
    * @example
    *    Object.prototype.b = 2
    *    cy.wrap({ a: 1 }).should('have.property', 'a').and('not.have.ownProperty', 'b')
    * @see http://chaijs.com/api/bdd/#method_ownproperty
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_nothaveownProperty(chainer: notDothaveDotownProperty, property: String): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection does not have the given property, using `.prop()`. Optionally, assert a particular value as well. The return value is available for chaining.
    * @example
    *    cy.get('#result').should('not.have.prop', 'disabled')
    *    cy.get('#result').should('not.have.prop', 'disabled', false)
    * @see http://chaijs.com/plugins/chai-jquery/#propname-value
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_nothaveprop(chainer: notDothaveDotprop, value: String): Chainable[Subject] = js.native
  @JSName("should")
  def should_nothaveprop(chainer: notDothaveDotprop, value: String, `match`: Any): Chainable[Subject] = js.native
  /**
    * Asserts that the target string does not contains the given substring `str`.
    * @example
    *    cy.wrap('foobar').should('not.have.string', 'baz')
    * @see http://chaijs.com/api/bdd/#method_string
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_nothavestring(chainer: notDothaveDotstring, `match`: String): Chainable[Subject] = js.native
  @JSName("should")
  def should_nothavestring(chainer: notDothaveDotstring, `match`: js.RegExp): Chainable[Subject] = js.native
  /**
    * Assert that the text of the first element of the selection is not equal to the given text, using `.text()`.
    * @example
    *    cy.get('#result').should('not.have.text', 'John Doe')
    * @see http://chaijs.com/plugins/chai-jquery/#texttext
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_nothavetext(chainer: notDothaveDottext, value: String): Chainable[Subject] = js.native
  /**
    * Assert spy did not throw an exception at least once.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spythrew
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_nothavethrown(chainer: notDothaveDotthrown): Chainable[Subject] = js.native
  @JSName("should")
  def should_nothavethrown(chainer: notDothaveDotthrown, value: String): Chainable[Subject] = js.native
  @JSName("should")
  def should_nothavethrown(chainer: notDothaveDotthrown, value: js.Error): Chainable[Subject] = js.native
  @JSName("should")
  def should_nothavethrown(chainer: notDothaveDotthrown, value: ErrorConstructor): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection does not have the given value, using `.val()`.
    * @example
    *    cy.get('textarea').should('not.have.value', 'foo bar baz')
    * @see http://chaijs.com/plugins/chai-jquery/#valuevalue
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_nothavevalue(chainer: notDothaveDotvalue, value: String): Chainable[Subject] = js.native
  /**
    * Assert that the html of the first element of the selection does not contain the given html, using `.html()`.
    * @example
    *    cy.get('#result').should('not.include.html', '<em>John Doe</em>')
    * @see http://chaijs.com/plugins/chai-jquery/#htmlhtml
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notincludehtml(chainer: notDotincludeDothtml, value: String): Chainable[Subject] = js.native
  /**
    * Assert that the text of the first element of the selection does not contain the given text, using `.text()`.
    * @example
    *    cy.get('#result').should('not.include.text', 'John Doe')
    * @see http://chaijs.com/plugins/chai-jquery/#texttext
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notincludetext(chainer: notDotincludeDottext, value: String): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection does not contain the given value, using `.val()`.
    * @example
    *    cy.get('textarea').should('not.include.value', 'foo bar baz')
    * @see http://chaijs.com/plugins/chai-jquery/#valuevalue
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notincludevalue(chainer: notDotincludeDotvalue, value: String): Chainable[Subject] = js.native
  /**
    * When one argument is provided, `.increase` asserts that the given function `subject` returns a greater number when it's
    * invoked after invoking the target function compared to when it's invoked beforehand.
    * `.increase` also causes all `.by` assertions that follow in the chain to assert how much greater of a number is returned.
    * It's often best to assert that the return value increased by the expected amount, rather than asserting it increased by any amount.
    *
    * When two arguments are provided, `.increase` asserts that the value of the given object `subject`'s `prop` property is greater after
    * invoking the target function compared to beforehand.
    *
    * @example
    *    let val = 1
    *    function addTwo() { val += 2 }
    *    function getVal() { return val }
    *    cy.wrap(() => {}).should('not.increase', getVal)
    *
    *    const myObj = { val: 1 }
    *    function addTwo() { myObj.val += 2 }
    *    cy.wrap(addTwo).should('increase', myObj, 'val')
    * @see http://chaijs.com/api/bdd/#method_increase
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notincrease(chainer: notDotincrease, value: js.Object): Chainable[Subject] = js.native
  @JSName("should")
  def should_notincrease(chainer: notDotincrease, value: js.Object, property: String): Chainable[Subject] = js.native
  /**
    * Assert that the selection does not match a given selector, using `.is()`. Note that this overrides the built-in chai assertion. If the object asserted against is not a jQuery object, the original implementation will be called.
    * @example
    *    cy.get('#result').should('not.match', ':empty')
    * @see http://chaijs.com/plugins/chai-jquery/#matchselector
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notmatch(chainer: notDotmatch, value: String): Chainable[Subject] = js.native
  /**
    * Asserts that the target does not match the given regular expression `re`.
    * @example
    *    cy.wrap('foobar').should('not.match', /baz$/)
    * @see http://chaijs.com/api/bdd/#method_match
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notmatch(chainer: notDotmatch, value: js.RegExp): Chainable[Subject] = js.native
  /**
    * When the target is a non-function object, `.respondTo` asserts that the target does not have a `method` with the given name method. The method can be own or inherited, and it can be enumerable or non-enumerable.
    * @example
    *    class Cat {
    *      meow() {}
    *    }
    *    cy.wrap(new Cat()).should('not.respondTo', 'bark')
    * @see http://chaijs.com/api/bdd/#method_respondto
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notrespondTo(chainer: notDotrespondTo, value: String): Chainable[Subject] = js.native
  /**
    * Invokes the given `matcher` function with the target being passed as the first argument, and asserts that the value returned is falsy.
    * @example
    *    cy.wrap(1).should('not.satisfy', (num) => num < 0)
    * @see http://chaijs.com/api/bdd/#method_satisfy
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notsatisfy(chainer: notDotsatisfy, fn: js.Function1[/* val */ Any, Boolean]): Chainable[Subject] = js.native
  /**
    * When no arguments are provided, `.throw` invokes the target function and asserts that no error is thrown.
    * When one argument is provided, and it's a string, `.throw` invokes the target function and asserts that no error is thrown with a message that contains that string.
    * @example
    *    function badFn() { console.log('Illegal salmon!') }
    *    cy.wrap(badFn).should('not.throw')
    *    cy.wrap(badFn).should('not.throw', 'salmon')
    *    cy.wrap(badFn).should('not.throw', /salmon/)
    * @see http://chaijs.com/api/bdd/#method_throw
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notthrow(chainer: notDotthrow): Chainable[Subject] = js.native
  /**
    * When no arguments are provided, `.throw` invokes the target function and asserts that no error is thrown.
    * When one argument is provided, and it's a string, `.throw` invokes the target function and asserts that no error is thrown with a message that contains that string.
    * @example
    *    function badFn() { console.log('Illegal salmon!') }
    *    cy.wrap(badFn).should('not.throw')
    *    cy.wrap(badFn).should('not.throw', 'salmon')
    *    cy.wrap(badFn).should('not.throw', /salmon/)
    * @see http://chaijs.com/api/bdd/#method_throw
    * @see https://on.cypress.io/assertions
    */
  // tslint:disable-next-line ban-types
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_notthrow(chainer: notDotthrow, error: js.Error): Chainable[Subject] = js.native
  @JSName("should")
  def should_notthrow(chainer: notDotthrow, error: js.Error, expected: String): Chainable[Subject] = js.native
  @JSName("should")
  def should_notthrow(chainer: notDotthrow, error: js.Error, expected: js.RegExp): Chainable[Subject] = js.native
  @JSName("should")
  def should_notthrow(chainer: notDotthrow, error: js.Function): Chainable[Subject] = js.native
  @JSName("should")
  def should_notthrow(chainer: notDotthrow, error: js.Function, expected: String): Chainable[Subject] = js.native
  @JSName("should")
  def should_notthrow(chainer: notDotthrow, error: js.Function, expected: js.RegExp): Chainable[Subject] = js.native
  @JSName("should")
  def should_notthrow(chainer: notDotthrow, value: String): Chainable[Subject] = js.native
  @JSName("should")
  def should_notthrow(chainer: notDotthrow, value: js.RegExp): Chainable[Subject] = js.native
  /**
    * When the target is a non-function object, `.respondTo` asserts that the target has a `method` with the given name method. The method can be own or inherited, and it can be enumerable or non-enumerable.
    * @example
    *    class Cat {
    *      meow() {}
    *    }
    *    cy.wrap(new Cat()).should('respondTo', 'meow')
    * @see http://chaijs.com/api/bdd/#method_respondto
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_respondTo(chainer: respondTo, value: String): Chainable[Subject] = js.native
  /**
    * Invokes the given `matcher` function with the target being passed as the first argument, and asserts that the value returned is truthy.
    * @example
    *    cy.wrap(1).should('satisfy', (num) => num > 0)
    * @see http://chaijs.com/api/bdd/#method_satisfy
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_satisfy(chainer: satisfy, fn: js.Function1[/* val */ Any, Boolean]): Chainable[Subject] = js.native
  /**
    * When no arguments are provided, `.throw` invokes the target function and asserts that an error is thrown.
    * When one argument is provided, and it's a string, `.throw` invokes the target function and asserts that an error is thrown with a message that contains that string.
    * @example
    *    function badFn() { throw new TypeError('Illegal salmon!') }
    *    cy.wrap(badFn).should('throw')
    *    cy.wrap(badFn).should('throw', 'salmon')
    *    cy.wrap(badFn).should('throw', /salmon/)
    * @see http://chaijs.com/api/bdd/#method_throw
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_throw(chainer: `throw`): Chainable[Subject] = js.native
  /**
    * When no arguments are provided, `.throw` invokes the target function and asserts that an error is thrown.
    * When one argument is provided, and it's a string, `.throw` invokes the target function and asserts that an error is thrown with a message that contains that string.
    * @example
    *    function badFn() { throw new TypeError('Illegal salmon!') }
    *    cy.wrap(badFn).should('throw')
    *    cy.wrap(badFn).should('throw', 'salmon')
    *    cy.wrap(badFn).should('throw', /salmon/)
    * @see http://chaijs.com/api/bdd/#method_throw
    * @see https://on.cypress.io/assertions
    */
  // tslint:disable-next-line ban-types
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    * @example
    *   // Assert on the href of the location
    *   cy.location('href').should('contain', '/tag/tutorials/')
    */
  @JSName("should")
  def should_throw(chainer: `throw`, error: js.Error): Chainable[Subject] = js.native
  @JSName("should")
  def should_throw(chainer: `throw`, error: js.Error, expected: String): Chainable[Subject] = js.native
  @JSName("should")
  def should_throw(chainer: `throw`, error: js.Error, expected: js.RegExp): Chainable[Subject] = js.native
  @JSName("should")
  def should_throw(chainer: `throw`, error: js.Function): Chainable[Subject] = js.native
  @JSName("should")
  def should_throw(chainer: `throw`, error: js.Function, expected: String): Chainable[Subject] = js.native
  @JSName("should")
  def should_throw(chainer: `throw`, error: js.Function, expected: js.RegExp): Chainable[Subject] = js.native
  @JSName("should")
  def should_throw(chainer: `throw`, value: String): Chainable[Subject] = js.native
  @JSName("should")
  def should_throw(chainer: `throw`, value: js.RegExp): Chainable[Subject] = js.native
  
  /**
    * Get all sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings() // Yield all siblings of "td"
    */
  def siblings[E /* <: Node */](): Chainable[JQuery[E]] = js.native
  def siblings[E /* <: Node */](options: PartialLoggableTimeoutabl): Chainable[JQuery[E]] = js.native
  /**
    * Get all sibling DOM elements that match given selector.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    // Yield all elements with class "foo" that are siblings of "td"
    *    cy.get('td').siblings('.foo')
    */
  def siblings[E /* <: Node */](selector: String): Chainable[JQuery[E]] = js.native
  def siblings[E /* <: Node */](selector: String, options: PartialLoggableTimeoutabl): Chainable[JQuery[E]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_a(selector: a): Chainable[JQuery[HTMLAnchorElement]] = js.native
  @JSName("siblings")
  def siblings_a(selector: a, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLAnchorElement]] = js.native
  @JSName("siblings")
  def siblings_abbr(selector: abbr): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_abbr(selector: abbr, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_address(selector: address): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_address(selector: address, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_area(selector: area): Chainable[JQuery[HTMLAreaElement]] = js.native
  @JSName("siblings")
  def siblings_area(selector: area, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLAreaElement]] = js.native
  @JSName("siblings")
  def siblings_article(selector: article): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_article(selector: article, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_aside(selector: aside): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_aside(selector: aside, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_audio(selector: audio): Chainable[JQuery[HTMLAudioElement]] = js.native
  @JSName("siblings")
  def siblings_audio(selector: audio, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLAudioElement]] = js.native
  @JSName("siblings")
  def siblings_b(selector: b): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_b(selector: b, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_base(selector: base_): Chainable[JQuery[HTMLBaseElement]] = js.native
  @JSName("siblings")
  def siblings_base(selector: base_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLBaseElement]] = js.native
  @JSName("siblings")
  def siblings_bdi(selector: bdi): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_bdi(selector: bdi, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_bdo(selector: bdo): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_bdo(selector: bdo, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_blockquote(selector: blockquote): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("siblings")
  def siblings_blockquote(selector: blockquote, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("siblings")
  def siblings_body(selector: body): Chainable[JQuery[HTMLBodyElement]] = js.native
  @JSName("siblings")
  def siblings_body(selector: body, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLBodyElement]] = js.native
  @JSName("siblings")
  def siblings_br(selector: br): Chainable[JQuery[HTMLBRElement]] = js.native
  @JSName("siblings")
  def siblings_br(selector: br, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLBRElement]] = js.native
  @JSName("siblings")
  def siblings_button(selector: button): Chainable[JQuery[HTMLButtonElement]] = js.native
  @JSName("siblings")
  def siblings_button(selector: button, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLButtonElement]] = js.native
  @JSName("siblings")
  def siblings_canvas(selector: canvas): Chainable[JQuery[HTMLCanvasElement]] = js.native
  @JSName("siblings")
  def siblings_canvas(selector: canvas, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLCanvasElement]] = js.native
  @JSName("siblings")
  def siblings_caption(selector: caption): Chainable[JQuery[HTMLTableCaptionElement]] = js.native
  @JSName("siblings")
  def siblings_caption(selector: caption, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableCaptionElement]] = js.native
  @JSName("siblings")
  def siblings_cite(selector: cite): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_cite(selector: cite, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_code(selector: code): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_code(selector: code, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_col(selector: col): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("siblings")
  def siblings_col(selector: col, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("siblings")
  def siblings_colgroup(selector: colgroup): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("siblings")
  def siblings_colgroup(selector: colgroup, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableColElement]] = js.native
  @JSName("siblings")
  def siblings_data(selector: data): Chainable[JQuery[HTMLDataElement]] = js.native
  @JSName("siblings")
  def siblings_data(selector: data, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDataElement]] = js.native
  @JSName("siblings")
  def siblings_datalist(selector: datalist): Chainable[JQuery[HTMLDataListElement]] = js.native
  @JSName("siblings")
  def siblings_datalist(selector: datalist, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDataListElement]] = js.native
  @JSName("siblings")
  def siblings_dd(selector: dd): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_dd(selector: dd, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_del(selector: del): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("siblings")
  def siblings_del(selector: del, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("siblings")
  def siblings_details(selector: details): Chainable[JQuery[HTMLDetailsElement]] = js.native
  @JSName("siblings")
  def siblings_details(selector: details, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDetailsElement]] = js.native
  @JSName("siblings")
  def siblings_dfn(selector: dfn): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_dfn(selector: dfn, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_dialog(selector: dialog): Chainable[JQuery[HTMLDialogElement]] = js.native
  @JSName("siblings")
  def siblings_dialog(selector: dialog, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDialogElement]] = js.native
  @JSName("siblings")
  def siblings_div(selector: div): Chainable[JQuery[HTMLDivElement]] = js.native
  @JSName("siblings")
  def siblings_div(selector: div, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDivElement]] = js.native
  @JSName("siblings")
  def siblings_dl(selector: dl): Chainable[JQuery[HTMLDListElement]] = js.native
  @JSName("siblings")
  def siblings_dl(selector: dl, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLDListElement]] = js.native
  @JSName("siblings")
  def siblings_dt(selector: dt): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_dt(selector: dt, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_em(selector: em): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_em(selector: em, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_embed(selector: embed): Chainable[JQuery[HTMLEmbedElement]] = js.native
  @JSName("siblings")
  def siblings_embed(selector: embed, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLEmbedElement]] = js.native
  @JSName("siblings")
  def siblings_fieldset(selector: fieldset): Chainable[JQuery[HTMLFieldSetElement]] = js.native
  @JSName("siblings")
  def siblings_fieldset(selector: fieldset, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLFieldSetElement]] = js.native
  @JSName("siblings")
  def siblings_figcaption(selector: figcaption): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_figcaption(selector: figcaption, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_figure(selector: figure): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_figure(selector: figure, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_footer(selector: footer): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_footer(selector: footer, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_form(selector: form): Chainable[JQuery[HTMLFormElement]] = js.native
  @JSName("siblings")
  def siblings_form(selector: form, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLFormElement]] = js.native
  @JSName("siblings")
  def siblings_h1(selector: h1): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("siblings")
  def siblings_h1(selector: h1, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("siblings")
  def siblings_h2(selector: h2): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("siblings")
  def siblings_h2(selector: h2, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("siblings")
  def siblings_h3(selector: h3): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("siblings")
  def siblings_h3(selector: h3, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("siblings")
  def siblings_h4(selector: h4): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("siblings")
  def siblings_h4(selector: h4, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("siblings")
  def siblings_h5(selector: h5): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("siblings")
  def siblings_h5(selector: h5, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("siblings")
  def siblings_h6(selector: h6): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("siblings")
  def siblings_h6(selector: h6, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadingElement]] = js.native
  @JSName("siblings")
  def siblings_head(selector: head_): Chainable[JQuery[HTMLHeadElement]] = js.native
  @JSName("siblings")
  def siblings_head(selector: head_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHeadElement]] = js.native
  @JSName("siblings")
  def siblings_header(selector: header): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_header(selector: header, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_hgroup(selector: hgroup): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_hgroup(selector: hgroup, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_hr(selector: hr): Chainable[JQuery[HTMLHRElement]] = js.native
  @JSName("siblings")
  def siblings_hr(selector: hr, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHRElement]] = js.native
  @JSName("siblings")
  def siblings_html(selector: html_): Chainable[JQuery[HTMLHtmlElement]] = js.native
  @JSName("siblings")
  def siblings_html(selector: html_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLHtmlElement]] = js.native
  @JSName("siblings")
  def siblings_i(selector: i): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_i(selector: i, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_iframe(selector: iframe): Chainable[JQuery[HTMLIFrameElement]] = js.native
  @JSName("siblings")
  def siblings_iframe(selector: iframe, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLIFrameElement]] = js.native
  @JSName("siblings")
  def siblings_img(selector: img): Chainable[JQuery[HTMLImageElement]] = js.native
  @JSName("siblings")
  def siblings_img(selector: img, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLImageElement]] = js.native
  @JSName("siblings")
  def siblings_input(selector: input): Chainable[JQuery[HTMLInputElement]] = js.native
  @JSName("siblings")
  def siblings_input(selector: input, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLInputElement]] = js.native
  @JSName("siblings")
  def siblings_ins(selector: ins): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("siblings")
  def siblings_ins(selector: ins, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLModElement]] = js.native
  @JSName("siblings")
  def siblings_kbd(selector: kbd): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_kbd(selector: kbd, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_label(selector: label): Chainable[JQuery[HTMLLabelElement]] = js.native
  @JSName("siblings")
  def siblings_label(selector: label, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLabelElement]] = js.native
  @JSName("siblings")
  def siblings_legend(selector: legend): Chainable[JQuery[HTMLLegendElement]] = js.native
  @JSName("siblings")
  def siblings_legend(selector: legend, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLegendElement]] = js.native
  @JSName("siblings")
  def siblings_li(selector: li): Chainable[JQuery[HTMLLIElement]] = js.native
  @JSName("siblings")
  def siblings_li(selector: li, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLIElement]] = js.native
  @JSName("siblings")
  def siblings_link(selector: link_): Chainable[JQuery[HTMLLinkElement]] = js.native
  @JSName("siblings")
  def siblings_link(selector: link_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLLinkElement]] = js.native
  @JSName("siblings")
  def siblings_main(selector: main): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_main(selector: main, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_map(selector: map): Chainable[JQuery[HTMLMapElement]] = js.native
  @JSName("siblings")
  def siblings_map(selector: map, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMapElement]] = js.native
  @JSName("siblings")
  def siblings_mark(selector: mark): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_mark(selector: mark, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_menu(selector: menu): Chainable[JQuery[HTMLMenuElement]] = js.native
  @JSName("siblings")
  def siblings_menu(selector: menu, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMenuElement]] = js.native
  @JSName("siblings")
  def siblings_meta(selector: meta): Chainable[JQuery[HTMLMetaElement]] = js.native
  @JSName("siblings")
  def siblings_meta(selector: meta, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMetaElement]] = js.native
  @JSName("siblings")
  def siblings_meter(selector: meter): Chainable[JQuery[HTMLMeterElement]] = js.native
  @JSName("siblings")
  def siblings_meter(selector: meter, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLMeterElement]] = js.native
  @JSName("siblings")
  def siblings_nav(selector: nav): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_nav(selector: nav, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_noscript(selector: noscript): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_noscript(selector: noscript, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_object(selector: object_): Chainable[JQuery[HTMLObjectElement]] = js.native
  @JSName("siblings")
  def siblings_object(selector: object_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLObjectElement]] = js.native
  @JSName("siblings")
  def siblings_ol(selector: ol): Chainable[JQuery[HTMLOListElement]] = js.native
  @JSName("siblings")
  def siblings_ol(selector: ol, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOListElement]] = js.native
  @JSName("siblings")
  def siblings_optgroup(selector: optgroup): Chainable[JQuery[HTMLOptGroupElement]] = js.native
  @JSName("siblings")
  def siblings_optgroup(selector: optgroup, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOptGroupElement]] = js.native
  @JSName("siblings")
  def siblings_option(selector: option): Chainable[JQuery[HTMLOptionElement]] = js.native
  @JSName("siblings")
  def siblings_option(selector: option, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOptionElement]] = js.native
  @JSName("siblings")
  def siblings_output(selector: output): Chainable[JQuery[HTMLOutputElement]] = js.native
  @JSName("siblings")
  def siblings_output(selector: output, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLOutputElement]] = js.native
  @JSName("siblings")
  def siblings_p(selector: p): Chainable[JQuery[HTMLParagraphElement]] = js.native
  @JSName("siblings")
  def siblings_p(selector: p, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLParagraphElement]] = js.native
  @JSName("siblings")
  def siblings_picture(selector: picture): Chainable[JQuery[HTMLPictureElement]] = js.native
  @JSName("siblings")
  def siblings_picture(selector: picture, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLPictureElement]] = js.native
  @JSName("siblings")
  def siblings_pre(selector: pre): Chainable[JQuery[HTMLPreElement]] = js.native
  @JSName("siblings")
  def siblings_pre(selector: pre, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLPreElement]] = js.native
  @JSName("siblings")
  def siblings_progress(selector: progress_): Chainable[JQuery[HTMLProgressElement]] = js.native
  @JSName("siblings")
  def siblings_progress(selector: progress_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLProgressElement]] = js.native
  @JSName("siblings")
  def siblings_q(selector: q): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("siblings")
  def siblings_q(selector: q, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLQuoteElement]] = js.native
  @JSName("siblings")
  def siblings_rp(selector: rp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_rp(selector: rp, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_rt(selector: rt): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_rt(selector: rt, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_ruby(selector: ruby): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_ruby(selector: ruby, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_s(selector: s): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_s(selector: s, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_samp(selector: samp): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_samp(selector: samp, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_script(selector: script): Chainable[JQuery[HTMLScriptElement]] = js.native
  @JSName("siblings")
  def siblings_script(selector: script, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLScriptElement]] = js.native
  @JSName("siblings")
  def siblings_section(selector: section): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_section(selector: section, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_select(selector: select): Chainable[JQuery[HTMLSelectElement]] = js.native
  @JSName("siblings")
  def siblings_select(selector: select, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSelectElement]] = js.native
  @JSName("siblings")
  def siblings_slot(selector: slot): Chainable[JQuery[HTMLSlotElement]] = js.native
  @JSName("siblings")
  def siblings_slot(selector: slot, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSlotElement]] = js.native
  @JSName("siblings")
  def siblings_small(selector: small): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_small(selector: small, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_source(selector: source_): Chainable[JQuery[HTMLSourceElement]] = js.native
  @JSName("siblings")
  def siblings_source(selector: source_, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSourceElement]] = js.native
  @JSName("siblings")
  def siblings_span(selector: span): Chainable[JQuery[HTMLSpanElement]] = js.native
  @JSName("siblings")
  def siblings_span(selector: span, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLSpanElement]] = js.native
  @JSName("siblings")
  def siblings_strong(selector: strong): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_strong(selector: strong, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_style(selector: style): Chainable[JQuery[HTMLStyleElement]] = js.native
  @JSName("siblings")
  def siblings_style(selector: style, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLStyleElement]] = js.native
  @JSName("siblings")
  def siblings_sub(selector: sub): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_sub(selector: sub, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_summary(selector: summary): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_summary(selector: summary, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_sup(selector: sup): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_sup(selector: sup, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_table(selector: table): Chainable[JQuery[HTMLTableElement]] = js.native
  @JSName("siblings")
  def siblings_table(selector: table, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableElement]] = js.native
  @JSName("siblings")
  def siblings_tbody(selector: tbody): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("siblings")
  def siblings_tbody(selector: tbody, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("siblings")
  def siblings_td(selector: td): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("siblings")
  def siblings_td(selector: td, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("siblings")
  def siblings_template(selector: template): Chainable[JQuery[HTMLTemplateElement]] = js.native
  @JSName("siblings")
  def siblings_template(selector: template, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTemplateElement]] = js.native
  @JSName("siblings")
  def siblings_textarea(selector: textarea): Chainable[JQuery[HTMLTextAreaElement]] = js.native
  @JSName("siblings")
  def siblings_textarea(selector: textarea, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTextAreaElement]] = js.native
  @JSName("siblings")
  def siblings_tfoot(selector: tfoot): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("siblings")
  def siblings_tfoot(selector: tfoot, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("siblings")
  def siblings_th(selector: th): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("siblings")
  def siblings_th(selector: th, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableCellElement]] = js.native
  @JSName("siblings")
  def siblings_thead(selector: thead): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("siblings")
  def siblings_thead(selector: thead, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableSectionElement]] = js.native
  @JSName("siblings")
  def siblings_time(selector: time): Chainable[JQuery[HTMLTimeElement]] = js.native
  @JSName("siblings")
  def siblings_time(selector: time, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTimeElement]] = js.native
  @JSName("siblings")
  def siblings_title(selector: title): Chainable[JQuery[HTMLTitleElement]] = js.native
  @JSName("siblings")
  def siblings_title(selector: title, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTitleElement]] = js.native
  @JSName("siblings")
  def siblings_tr(selector: tr): Chainable[JQuery[HTMLTableRowElement]] = js.native
  @JSName("siblings")
  def siblings_tr(selector: tr, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTableRowElement]] = js.native
  @JSName("siblings")
  def siblings_track(selector: track): Chainable[JQuery[HTMLTrackElement]] = js.native
  @JSName("siblings")
  def siblings_track(selector: track, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLTrackElement]] = js.native
  @JSName("siblings")
  def siblings_u(selector: u): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_u(selector: u, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_ul(selector: ul): Chainable[JQuery[HTMLUListElement]] = js.native
  @JSName("siblings")
  def siblings_ul(selector: ul, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLUListElement]] = js.native
  @JSName("siblings")
  def siblings_var(selector: `var`): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_var(selector: `var`, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_video(selector: video): Chainable[JQuery[HTMLVideoElement]] = js.native
  @JSName("siblings")
  def siblings_video(selector: video, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLVideoElement]] = js.native
  @JSName("siblings")
  def siblings_wbr(selector: wbr): Chainable[JQuery[HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_wbr(selector: wbr, options: PartialLoggableTimeoutabl): Chainable[JQuery[HTMLElement]] = js.native
  
  /**
    * Expand an array into multiple arguments.
    * @see https://on.cypress.io/spread
    * @example
    *    cy.getCookies().spread((cookie1, cookie2, cookie3) => {
    *      // each cookie is now an individual argument
    *    })
    */
  def spread(fn: js.Function1[/* repeated */ Any, Unit]): Chainable[Subject] = js.native
  /**
    * Expand an array into multiple arguments.
    * @see https://on.cypress.io/spread
    * @example
    *    cy.getCookies().spread((cookie1, cookie2, cookie3) => {
    *      // each cookie is now an individual argument
    *    })
    */
  @JSName("spread")
  def spread_S[S /* <: js.Object | js.Array[Any] | String | Double | Boolean */](fn: js.Function1[/* repeated */ Any, S]): Chainable[S] = js.native
  
  /**
    * Returns a new spy function.
    * > Note: `.spy()` assumes you are already familiar with our guide: [Stubs, Spies, and Clocks](https://on.cypress.io/stubs-spies-and-clocks)
    *
    * @see https://on.cypress.io/spy
    * @example
    *    const fn = cy.spy() // returns "dumb" spy function
    *    fn(42)
    *    expect(fn).to.have.been.calledOnce
    *    expect(fn).to.have.always.been.calledWithExactly(42)
    */
  def spy(): Agent[SinonSpy[js.Array[Any], Any]] = js.native
  /**
    * Wraps existing function and spies on it, while passing arguments and results.
    * @see https://on.cypress.io/spy
    * @example
    *    const add = (a, b) => a + b
    *    const spy = cy.spy(add)
    *    expect(spy(2, 3)).to.equal(5)
    *    expect(spy).to.have.been.calledWithExactly(2, 3)
    */
  def spy(func: js.Function1[/* repeated */ Any, Any]): Agent[SinonSpy[js.Array[Any], Any]] = js.native
  /**
    * Spy on a method.
    * @see https://on.cypress.io/spy
    * @example
    *    // assume App.start calls util.addListeners
    *    cy.spy(util, 'addListeners')
    *    App.start()
    *    expect(util.addListeners).to.be.called
    */
  def spy[T](obj: T, method: /* keyof T */ String): Agent[SinonSpy[js.Array[Any], Any]] = js.native
  
  /**
    * Replace a function, record its usage and control its behavior.
    * > Note: `.stub()` assumes you are already familiar with our guide:
    * [Stubs, Spies, and Clocks](https://on.cypress.io/stubs-spies-and-clocks)
    *
    * @see https://on.cypress.io/stub
    * @example
    *    const fn = cy.stub() // stub without any arguments acts like a spy
    *    fn(42)
    *    expect(fn).to.have.been.calledOnce
    *    expect(fn).to.have.always.been.calledWithExactly(42)
    */
  def stub(): Agent[SinonStub[js.Array[Any], Any]] = js.native
  /**
    * Stubs all the object's methods.
    *
    * @see https://on.cypress.io/stub
    * @example
    * const o = {
    *  toString () {
    *    return 'foo'
    *  }
    * }
    * expect(o.toString()).to.equal('foo')
    * cy.stub(o)
    * // because stub does not call original function
    * expect(o.toString()).to.equal(undefined)
    * expect(o.toString).to.have.been.calledOnce
    */
  def stub(obj: Any): Agent[SinonStub[js.Array[Any], Any]] = js.native
  /**
    * Stubs single method of an object.
    *
    * @see https://on.cypress.io/stub
    * @example
    *    const o = {}
    *    expect(o.toString()).to.equal('[object Object]')
    *    cy.stub(o, 'toString').callsFake(() => 'foo')
    *    expect(o.toString()).to.equal('foo')
    *    expect(o.toString).to.have.been.calledOnce
    */
  def stub[T](obj: T, method: /* keyof T */ String): Agent[SinonStub[js.Array[Any], Any]] = js.native
  /**
    * Stubs a method on an object
    *
    * @deprecated Use `cy.stub(object, name).callsFake(fn)` instead
    */
  def stub[T](obj: T, method: /* keyof T */ String, func: js.Function1[/* repeated */ Any, Any]): Agent[SinonStub[js.Array[Any], Any]] = js.native
  
  /**
    * Submit a form.
    *
    * @see https://on.cypress.io/submit
    */
  def submit(): Chainable[Subject] = js.native
  def submit(options: PartialLoggableTimeoutabl): Chainable[Subject] = js.native
  
  /**
    * Run a task in Node via the plugins file.
    *
    * @see https://on.cypress.io/api/task
    */
  def task[S](event: String): Chainable[S] = js.native
  def task[S](event: String, arg: Any): Chainable[S] = js.native
  def task[S](event: String, arg: Any, options: PartialLoggableTimeoutabl): Chainable[S] = js.native
  def task[S](event: String, arg: Unit, options: PartialLoggableTimeoutabl): Chainable[S] = js.native
  
  /**
    * Enables you to work with the subject yielded from the previous command.
    *
    * @see https://on.cypress.io/then
    * @example
    *    cy.get('.nav').then(($nav) => {})  // Yields .nav as first arg
    *    cy.location().then((loc) => {})   // Yields location object as first arg
    */
  def `then`(fn: js.ThisFunction1[/* this */ ObjectLike, /* currentSubject */ Subject, Unit]): Chainable[Subject] = js.native
  /**
    * Enables you to work with the subject yielded from the previous command.
    *
    * @see https://on.cypress.io/then
    * @example
    *    cy.get('.nav').then(($nav) => {})  // Yields .nav as first arg
    *    cy.location().then((loc) => {})   // Yields location object as first arg
    */
  def `then`(
    options: PartialTimeoutable,
    fn: js.ThisFunction1[/* this */ ObjectLike, /* currentSubject */ Subject, Unit]
  ): Chainable[Subject] = js.native
  /**
    * Enables you to work with the subject yielded from the previous command.
    *
    * @see https://on.cypress.io/then
    */
  /**
    * Enables you to work with the subject yielded from the previous command / promise.
    *
    * @see https://on.cypress.io/then
    */
  @JSName("then")
  def then_S[S](
    fn: js.ThisFunction1[
      /* this */ ObjectLike, 
      /* currentSubject */ Subject, 
      Chainable[S] | PromiseLike[S] | S
    ]
  ): Chainable[S] = js.native
  /**
    * Enables you to work with the subject yielded from the previous command.
    *
    * @see https://on.cypress.io/then
    */
  /**
    * Enables you to work with the subject yielded from the previous command / promise.
    *
    * @see https://on.cypress.io/then
    */
  @JSName("then")
  def then_S[S](
    options: PartialTimeoutable,
    fn: js.ThisFunction1[
      /* this */ ObjectLike, 
      /* currentSubject */ Subject, 
      Chainable[S] | PromiseLike[S] | S
    ]
  ): Chainable[S] = js.native
  /**
    * Enables you to work with the subject yielded from the previous command / promise.
    *
    * @see https://on.cypress.io/then
    */
  @JSName("then")
  def then_S_ThenReturn[S](fn: js.ThisFunction1[/* this */ ObjectLike, /* currentSubject */ Subject, S]): ThenReturn[Subject, S] = js.native
  /**
    * Enables you to work with the subject yielded from the previous command / promise.
    *
    * @see https://on.cypress.io/then
    */
  @JSName("then")
  def then_S_ThenReturn[S](
    options: PartialTimeoutable,
    fn: js.ThisFunction1[/* this */ ObjectLike, /* currentSubject */ Subject, S]
  ): ThenReturn[Subject, S] = js.native
  
  /**
    * Move time after overriding a native time function with [cy.clock()](https://on.cypress.io/clock).
    * `cy.clock()` must be called before `cy.tick()`
    *
    * @see https://on.cypress.io/clock
    * @example
    *  cy.clock()
    *  ...
    *  // advance time by 10 minutes
    *  cy.tick(600*1000)
    *  // you can restore the real clock
    *  cy.tick(1000).then(clock => {
    *    clock.restore()
    *  })
    *  // or use this shortcut
    *  cy.tick(5000).invoke('restore')
    */
  def tick(milliseconds: Double): Chainable[Clock] = js.native
  def tick(milliseconds: Double, options: PartialLoggable): Chainable[Clock] = js.native
  
  /**
    * Get the `document.title` property of the page that is currently active.
    *
    * @see https://on.cypress.io/title
    */
  def title(): Chainable[String] = js.native
  def title(options: PartialLoggableTimeoutabl): Chainable[String] = js.native
  
  /**
    * Trigger an event on a DOM element.
    * Custom events... If the following were `.triggerCustom`,
    * `.trigger` strongly typed with event data
    *
    * @see https://on.cypress.io/trigger
    * @example
    *    cy.get('a').trigger('mousedown')
    */
  def trigger(eventName: String): Chainable[Subject] = js.native
  def trigger(eventName: String, options: PartialTriggerOptionsObje): Chainable[Subject] = js.native
  def trigger(eventName: String, position: Unit, options: PartialTriggerOptionsObje): Chainable[Subject] = js.native
  def trigger(eventName: String, position: PositionType): Chainable[Subject] = js.native
  def trigger(eventName: String, position: PositionType, options: PartialTriggerOptionsObje): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    * Custom events... If the following were `.triggerCustom`,
    * `.trigger` strongly typed with event data
    *
    * @see https://on.cypress.io/trigger
    * @example
    *    cy.get('a').trigger('mousedown')
    */
  def trigger(eventName: String, x: Double, y: Double): Chainable[Subject] = js.native
  def trigger(eventName: String, x: Double, y: Double, options: PartialTriggerOptionsObje): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_DOMContentLoaded(eventName: DOMContentLoaded): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_DOMContentLoaded(eventName: DOMContentLoaded, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_DOMContentLoaded(eventName: DOMContentLoaded, position: Unit, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_DOMContentLoaded(eventName: DOMContentLoaded, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_DOMContentLoaded(
    eventName: DOMContentLoaded,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_DOMContentLoaded(eventName: DOMContentLoaded, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_DOMContentLoaded(
    eventName: DOMContentLoaded,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_abort(eventName: abort): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_abort(eventName: abort, options: Partial[TriggerOptions & ObjectLike & UIEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_abort(eventName: abort, position: Unit, options: Partial[TriggerOptions & ObjectLike & UIEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_abort(eventName: abort, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_abort(eventName: abort, position: PositionType, options: Partial[TriggerOptions & ObjectLike & UIEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_abort(eventName: abort, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_abort(eventName: abort, x: Double, y: Double, options: Partial[TriggerOptions & ObjectLike & UIEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_animationcancel(eventName: animationcancel): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_animationcancel(eventName: animationcancel, options: Partial[TriggerOptions & ObjectLike & AnimationEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_animationcancel(
    eventName: animationcancel,
    position: Unit,
    options: Partial[TriggerOptions & ObjectLike & AnimationEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_animationcancel(eventName: animationcancel, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_animationcancel(
    eventName: animationcancel,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & AnimationEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_animationcancel(eventName: animationcancel, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_animationcancel(
    eventName: animationcancel,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & AnimationEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_animationend(eventName: animationend): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_animationend(eventName: animationend, options: Partial[TriggerOptions & ObjectLike & AnimationEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_animationend(
    eventName: animationend,
    position: Unit,
    options: Partial[TriggerOptions & ObjectLike & AnimationEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_animationend(eventName: animationend, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_animationend(
    eventName: animationend,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & AnimationEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_animationend(eventName: animationend, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_animationend(
    eventName: animationend,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & AnimationEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_animationiteration(eventName: animationiteration): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_animationiteration(eventName: animationiteration, options: Partial[TriggerOptions & ObjectLike & AnimationEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_animationiteration(
    eventName: animationiteration,
    position: Unit,
    options: Partial[TriggerOptions & ObjectLike & AnimationEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_animationiteration(eventName: animationiteration, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_animationiteration(
    eventName: animationiteration,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & AnimationEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_animationiteration(eventName: animationiteration, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_animationiteration(
    eventName: animationiteration,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & AnimationEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_animationstart(eventName: animationstart): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_animationstart(eventName: animationstart, options: Partial[TriggerOptions & ObjectLike & AnimationEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_animationstart(
    eventName: animationstart,
    position: Unit,
    options: Partial[TriggerOptions & ObjectLike & AnimationEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_animationstart(eventName: animationstart, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_animationstart(
    eventName: animationstart,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & AnimationEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_animationstart(eventName: animationstart, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_animationstart(
    eventName: animationstart,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & AnimationEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_auxclick(eventName: auxclick): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_auxclick(eventName: auxclick, options: Partial[TriggerOptions & ObjectLike & MouseEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_auxclick(eventName: auxclick, position: Unit, options: Partial[TriggerOptions & ObjectLike & MouseEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_auxclick(eventName: auxclick, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_auxclick(
    eventName: auxclick,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & MouseEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_auxclick(eventName: auxclick, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_auxclick(
    eventName: auxclick,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & MouseEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_beforeinput(eventName: beforeinput): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_beforeinput(eventName: beforeinput, options: Partial[TriggerOptions & ObjectLike & InputEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_beforeinput(eventName: beforeinput, position: Unit, options: Partial[TriggerOptions & ObjectLike & InputEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_beforeinput(eventName: beforeinput, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_beforeinput(
    eventName: beforeinput,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & InputEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_beforeinput(eventName: beforeinput, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_beforeinput(
    eventName: beforeinput,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & InputEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_blur(eventName: blur): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_blur(eventName: blur, options: Partial[TriggerOptions & ObjectLike & FocusEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_blur(eventName: blur, position: Unit, options: Partial[TriggerOptions & ObjectLike & FocusEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_blur(eventName: blur, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_blur(
    eventName: blur,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & FocusEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_blur(eventName: blur, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_blur(eventName: blur, x: Double, y: Double, options: Partial[TriggerOptions & ObjectLike & FocusEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_canplay(eventName: canplay): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_canplay(eventName: canplay, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_canplay(eventName: canplay, position: Unit, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_canplay(eventName: canplay, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_canplay(eventName: canplay, position: PositionType, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_canplay(eventName: canplay, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_canplay(eventName: canplay, x: Double, y: Double, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_canplaythrough(eventName: canplaythrough): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_canplaythrough(eventName: canplaythrough, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_canplaythrough(eventName: canplaythrough, position: Unit, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_canplaythrough(eventName: canplaythrough, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_canplaythrough(
    eventName: canplaythrough,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_canplaythrough(eventName: canplaythrough, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_canplaythrough(
    eventName: canplaythrough,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_change(eventName: change): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_change(eventName: change, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_change(eventName: change, position: Unit, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_change(eventName: change, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_change(eventName: change, position: PositionType, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_change(eventName: change, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_change(eventName: change, x: Double, y: Double, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_click(eventName: click): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_click(eventName: click, options: Partial[TriggerOptions & ObjectLike & MouseEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_click(eventName: click, position: Unit, options: Partial[TriggerOptions & ObjectLike & MouseEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_click(eventName: click, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_click(
    eventName: click,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & MouseEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_click(eventName: click, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_click(eventName: click, x: Double, y: Double, options: Partial[TriggerOptions & ObjectLike & MouseEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_close(eventName: close): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_close(eventName: close, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_close(eventName: close, position: Unit, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_close(eventName: close, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_close(eventName: close, position: PositionType, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_close(eventName: close, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_close(eventName: close, x: Double, y: Double, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_compositionend(eventName: compositionend): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_compositionend(eventName: compositionend, options: Partial[TriggerOptions & ObjectLike & CompositionEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_compositionend(
    eventName: compositionend,
    position: Unit,
    options: Partial[TriggerOptions & ObjectLike & CompositionEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_compositionend(eventName: compositionend, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_compositionend(
    eventName: compositionend,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & CompositionEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_compositionend(eventName: compositionend, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_compositionend(
    eventName: compositionend,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & CompositionEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_compositionstart(eventName: compositionstart): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_compositionstart(eventName: compositionstart, options: Partial[TriggerOptions & ObjectLike & CompositionEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_compositionstart(
    eventName: compositionstart,
    position: Unit,
    options: Partial[TriggerOptions & ObjectLike & CompositionEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_compositionstart(eventName: compositionstart, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_compositionstart(
    eventName: compositionstart,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & CompositionEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_compositionstart(eventName: compositionstart, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_compositionstart(
    eventName: compositionstart,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & CompositionEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_compositionupdate(eventName: compositionupdate): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_compositionupdate(eventName: compositionupdate, options: Partial[TriggerOptions & ObjectLike & CompositionEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_compositionupdate(
    eventName: compositionupdate,
    position: Unit,
    options: Partial[TriggerOptions & ObjectLike & CompositionEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_compositionupdate(eventName: compositionupdate, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_compositionupdate(
    eventName: compositionupdate,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & CompositionEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_compositionupdate(eventName: compositionupdate, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_compositionupdate(
    eventName: compositionupdate,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & CompositionEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_contextmenu(eventName: contextmenu): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_contextmenu(eventName: contextmenu, options: Partial[TriggerOptions & ObjectLike & MouseEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_contextmenu(eventName: contextmenu, position: Unit, options: Partial[TriggerOptions & ObjectLike & MouseEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_contextmenu(eventName: contextmenu, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_contextmenu(
    eventName: contextmenu,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & MouseEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_contextmenu(eventName: contextmenu, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_contextmenu(
    eventName: contextmenu,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & MouseEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_copy(eventName: copy_): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_copy(eventName: copy_, options: Partial[TriggerOptions & ObjectLike & ClipboardEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_copy(eventName: copy_, position: Unit, options: Partial[TriggerOptions & ObjectLike & ClipboardEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_copy(eventName: copy_, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_copy(
    eventName: copy_,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & ClipboardEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_copy(eventName: copy_, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_copy(
    eventName: copy_,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & ClipboardEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_cuechange(eventName: cuechange): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_cuechange(eventName: cuechange, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_cuechange(eventName: cuechange, position: Unit, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_cuechange(eventName: cuechange, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_cuechange(
    eventName: cuechange,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_cuechange(eventName: cuechange, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_cuechange(eventName: cuechange, x: Double, y: Double, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_cut(eventName: cut): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_cut(eventName: cut, options: Partial[TriggerOptions & ObjectLike & ClipboardEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_cut(eventName: cut, position: Unit, options: Partial[TriggerOptions & ObjectLike & ClipboardEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_cut(eventName: cut, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_cut(
    eventName: cut,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & ClipboardEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_cut(eventName: cut, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_cut(
    eventName: cut,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & ClipboardEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dblclick(eventName: dblclick): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dblclick(eventName: dblclick, options: Partial[TriggerOptions & ObjectLike & MouseEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dblclick(eventName: dblclick, position: Unit, options: Partial[TriggerOptions & ObjectLike & MouseEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dblclick(eventName: dblclick, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dblclick(
    eventName: dblclick,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & MouseEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dblclick(eventName: dblclick, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dblclick(
    eventName: dblclick,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & MouseEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_drag(eventName: drag): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_drag(eventName: drag, options: Partial[TriggerOptions & ObjectLike & DragEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_drag(eventName: drag, position: Unit, options: Partial[TriggerOptions & ObjectLike & DragEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_drag(eventName: drag, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_drag(eventName: drag, position: PositionType, options: Partial[TriggerOptions & ObjectLike & DragEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_drag(eventName: drag, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_drag(eventName: drag, x: Double, y: Double, options: Partial[TriggerOptions & ObjectLike & DragEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragend(eventName: dragend): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragend(eventName: dragend, options: Partial[TriggerOptions & ObjectLike & DragEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragend(eventName: dragend, position: Unit, options: Partial[TriggerOptions & ObjectLike & DragEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragend(eventName: dragend, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragend(
    eventName: dragend,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & DragEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragend(eventName: dragend, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragend(
    eventName: dragend,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & DragEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragenter(eventName: dragenter): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragenter(eventName: dragenter, options: Partial[TriggerOptions & ObjectLike & DragEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragenter(eventName: dragenter, position: Unit, options: Partial[TriggerOptions & ObjectLike & DragEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragenter(eventName: dragenter, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragenter(
    eventName: dragenter,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & DragEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragenter(eventName: dragenter, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragenter(
    eventName: dragenter,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & DragEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragleave(eventName: dragleave): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragleave(eventName: dragleave, options: Partial[TriggerOptions & ObjectLike & DragEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragleave(eventName: dragleave, position: Unit, options: Partial[TriggerOptions & ObjectLike & DragEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragleave(eventName: dragleave, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragleave(
    eventName: dragleave,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & DragEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragleave(eventName: dragleave, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragleave(
    eventName: dragleave,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & DragEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragover(eventName: dragover): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragover(eventName: dragover, options: Partial[TriggerOptions & ObjectLike & DragEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragover(eventName: dragover, position: Unit, options: Partial[TriggerOptions & ObjectLike & DragEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragover(eventName: dragover, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragover(
    eventName: dragover,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & DragEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragover(eventName: dragover, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragover(
    eventName: dragover,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & DragEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragstart(eventName: dragstart): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragstart(eventName: dragstart, options: Partial[TriggerOptions & ObjectLike & DragEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragstart(eventName: dragstart, position: Unit, options: Partial[TriggerOptions & ObjectLike & DragEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragstart(eventName: dragstart, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragstart(
    eventName: dragstart,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & DragEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragstart(eventName: dragstart, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragstart(
    eventName: dragstart,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & DragEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_drop(eventName: drop): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_drop(eventName: drop, options: Partial[TriggerOptions & ObjectLike & DragEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_drop(eventName: drop, position: Unit, options: Partial[TriggerOptions & ObjectLike & DragEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_drop(eventName: drop, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_drop(eventName: drop, position: PositionType, options: Partial[TriggerOptions & ObjectLike & DragEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_drop(eventName: drop, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_drop(eventName: drop, x: Double, y: Double, options: Partial[TriggerOptions & ObjectLike & DragEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_durationchange(eventName: durationchange): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_durationchange(eventName: durationchange, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_durationchange(eventName: durationchange, position: Unit, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_durationchange(eventName: durationchange, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_durationchange(
    eventName: durationchange,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_durationchange(eventName: durationchange, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_durationchange(
    eventName: durationchange,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_emptied(eventName: emptied): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_emptied(eventName: emptied, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_emptied(eventName: emptied, position: Unit, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_emptied(eventName: emptied, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_emptied(eventName: emptied, position: PositionType, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_emptied(eventName: emptied, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_emptied(eventName: emptied, x: Double, y: Double, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_ended(eventName: ended): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_ended(eventName: ended, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_ended(eventName: ended, position: Unit, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_ended(eventName: ended, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_ended(eventName: ended, position: PositionType, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_ended(eventName: ended, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_ended(eventName: ended, x: Double, y: Double, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_error(eventName: error): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_error(eventName: error, options: Partial[TriggerOptions & ObjectLike & ErrorEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_error(eventName: error, position: Unit, options: Partial[TriggerOptions & ObjectLike & ErrorEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_error(eventName: error, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_error(
    eventName: error,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & ErrorEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_error(eventName: error, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_error(eventName: error, x: Double, y: Double, options: Partial[TriggerOptions & ObjectLike & ErrorEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_focus(eventName: focus): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_focus(eventName: focus, options: Partial[TriggerOptions & ObjectLike & FocusEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_focus(eventName: focus, position: Unit, options: Partial[TriggerOptions & ObjectLike & FocusEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_focus(eventName: focus, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_focus(
    eventName: focus,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & FocusEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_focus(eventName: focus, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_focus(eventName: focus, x: Double, y: Double, options: Partial[TriggerOptions & ObjectLike & FocusEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_focusin(eventName: focusin): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_focusin(eventName: focusin, options: Partial[TriggerOptions & ObjectLike & FocusEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_focusin(eventName: focusin, position: Unit, options: Partial[TriggerOptions & ObjectLike & FocusEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_focusin(eventName: focusin, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_focusin(
    eventName: focusin,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & FocusEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_focusin(eventName: focusin, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_focusin(
    eventName: focusin,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & FocusEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_focusout(eventName: focusout): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_focusout(eventName: focusout, options: Partial[TriggerOptions & ObjectLike & FocusEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_focusout(eventName: focusout, position: Unit, options: Partial[TriggerOptions & ObjectLike & FocusEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_focusout(eventName: focusout, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_focusout(
    eventName: focusout,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & FocusEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_focusout(eventName: focusout, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_focusout(
    eventName: focusout,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & FocusEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_formdata(eventName: formdata): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_formdata(eventName: formdata, options: Partial[TriggerOptions & ObjectLike & FormDataEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_formdata(eventName: formdata, position: Unit, options: Partial[TriggerOptions & ObjectLike & FormDataEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_formdata(eventName: formdata, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_formdata(
    eventName: formdata,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & FormDataEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_formdata(eventName: formdata, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_formdata(
    eventName: formdata,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & FormDataEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_fullscreenchange(eventName: fullscreenchange): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_fullscreenchange(eventName: fullscreenchange, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_fullscreenchange(eventName: fullscreenchange, position: Unit, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_fullscreenchange(eventName: fullscreenchange, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_fullscreenchange(
    eventName: fullscreenchange,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_fullscreenchange(eventName: fullscreenchange, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_fullscreenchange(
    eventName: fullscreenchange,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_fullscreenerror(eventName: fullscreenerror): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_fullscreenerror(eventName: fullscreenerror, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_fullscreenerror(eventName: fullscreenerror, position: Unit, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_fullscreenerror(eventName: fullscreenerror, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_fullscreenerror(
    eventName: fullscreenerror,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_fullscreenerror(eventName: fullscreenerror, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_fullscreenerror(
    eventName: fullscreenerror,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_gotpointercapture(eventName: gotpointercapture): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_gotpointercapture(eventName: gotpointercapture, options: Partial[TriggerOptions & ObjectLike & PointerEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_gotpointercapture(
    eventName: gotpointercapture,
    position: Unit,
    options: Partial[TriggerOptions & ObjectLike & PointerEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_gotpointercapture(eventName: gotpointercapture, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_gotpointercapture(
    eventName: gotpointercapture,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & PointerEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_gotpointercapture(eventName: gotpointercapture, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_gotpointercapture(
    eventName: gotpointercapture,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & PointerEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_input(eventName: input): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_input(eventName: input, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_input(eventName: input, position: Unit, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_input(eventName: input, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_input(eventName: input, position: PositionType, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_input(eventName: input, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_input(eventName: input, x: Double, y: Double, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_invalid(eventName: invalid): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_invalid(eventName: invalid, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_invalid(eventName: invalid, position: Unit, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_invalid(eventName: invalid, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_invalid(eventName: invalid, position: PositionType, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_invalid(eventName: invalid, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_invalid(eventName: invalid, x: Double, y: Double, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_keydown(eventName: keydown): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_keydown(eventName: keydown, options: Partial[TriggerOptions & ObjectLike & KeyboardEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_keydown(eventName: keydown, position: Unit, options: Partial[TriggerOptions & ObjectLike & KeyboardEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_keydown(eventName: keydown, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_keydown(
    eventName: keydown,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & KeyboardEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_keydown(eventName: keydown, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_keydown(
    eventName: keydown,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & KeyboardEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_keypress(eventName: keypress): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_keypress(eventName: keypress, options: Partial[TriggerOptions & ObjectLike & KeyboardEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_keypress(eventName: keypress, position: Unit, options: Partial[TriggerOptions & ObjectLike & KeyboardEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_keypress(eventName: keypress, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_keypress(
    eventName: keypress,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & KeyboardEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_keypress(eventName: keypress, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_keypress(
    eventName: keypress,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & KeyboardEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_keyup(eventName: keyup): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_keyup(eventName: keyup, options: Partial[TriggerOptions & ObjectLike & KeyboardEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_keyup(eventName: keyup, position: Unit, options: Partial[TriggerOptions & ObjectLike & KeyboardEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_keyup(eventName: keyup, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_keyup(
    eventName: keyup,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & KeyboardEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_keyup(eventName: keyup, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_keyup(
    eventName: keyup,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & KeyboardEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_load(eventName: load): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_load(eventName: load, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_load(eventName: load, position: Unit, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_load(eventName: load, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_load(eventName: load, position: PositionType, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_load(eventName: load, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_load(eventName: load, x: Double, y: Double, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_loadeddata(eventName: loadeddata): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_loadeddata(eventName: loadeddata, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_loadeddata(eventName: loadeddata, position: Unit, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_loadeddata(eventName: loadeddata, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_loadeddata(
    eventName: loadeddata,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_loadeddata(eventName: loadeddata, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_loadeddata(eventName: loadeddata, x: Double, y: Double, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_loadedmetadata(eventName: loadedmetadata): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_loadedmetadata(eventName: loadedmetadata, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_loadedmetadata(eventName: loadedmetadata, position: Unit, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_loadedmetadata(eventName: loadedmetadata, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_loadedmetadata(
    eventName: loadedmetadata,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_loadedmetadata(eventName: loadedmetadata, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_loadedmetadata(
    eventName: loadedmetadata,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_loadstart(eventName: loadstart): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_loadstart(eventName: loadstart, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_loadstart(eventName: loadstart, position: Unit, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_loadstart(eventName: loadstart, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_loadstart(
    eventName: loadstart,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_loadstart(eventName: loadstart, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_loadstart(eventName: loadstart, x: Double, y: Double, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_lostpointercapture(eventName: lostpointercapture): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_lostpointercapture(eventName: lostpointercapture, options: Partial[TriggerOptions & ObjectLike & PointerEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_lostpointercapture(
    eventName: lostpointercapture,
    position: Unit,
    options: Partial[TriggerOptions & ObjectLike & PointerEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_lostpointercapture(eventName: lostpointercapture, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_lostpointercapture(
    eventName: lostpointercapture,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & PointerEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_lostpointercapture(eventName: lostpointercapture, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_lostpointercapture(
    eventName: lostpointercapture,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & PointerEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mousedown(eventName: mousedown): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mousedown(eventName: mousedown, options: Partial[TriggerOptions & ObjectLike & MouseEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mousedown(eventName: mousedown, position: Unit, options: Partial[TriggerOptions & ObjectLike & MouseEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mousedown(eventName: mousedown, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mousedown(
    eventName: mousedown,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & MouseEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mousedown(eventName: mousedown, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mousedown(
    eventName: mousedown,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & MouseEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseenter(eventName: mouseenter): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseenter(eventName: mouseenter, options: Partial[TriggerOptions & ObjectLike & MouseEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseenter(eventName: mouseenter, position: Unit, options: Partial[TriggerOptions & ObjectLike & MouseEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseenter(eventName: mouseenter, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseenter(
    eventName: mouseenter,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & MouseEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseenter(eventName: mouseenter, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseenter(
    eventName: mouseenter,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & MouseEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseleave(eventName: mouseleave): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseleave(eventName: mouseleave, options: Partial[TriggerOptions & ObjectLike & MouseEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseleave(eventName: mouseleave, position: Unit, options: Partial[TriggerOptions & ObjectLike & MouseEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseleave(eventName: mouseleave, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseleave(
    eventName: mouseleave,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & MouseEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseleave(eventName: mouseleave, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseleave(
    eventName: mouseleave,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & MouseEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mousemove(eventName: mousemove): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mousemove(eventName: mousemove, options: Partial[TriggerOptions & ObjectLike & MouseEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mousemove(eventName: mousemove, position: Unit, options: Partial[TriggerOptions & ObjectLike & MouseEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mousemove(eventName: mousemove, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mousemove(
    eventName: mousemove,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & MouseEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mousemove(eventName: mousemove, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mousemove(
    eventName: mousemove,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & MouseEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseout(eventName: mouseout): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseout(eventName: mouseout, options: Partial[TriggerOptions & ObjectLike & MouseEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseout(eventName: mouseout, position: Unit, options: Partial[TriggerOptions & ObjectLike & MouseEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseout(eventName: mouseout, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseout(
    eventName: mouseout,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & MouseEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseout(eventName: mouseout, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseout(
    eventName: mouseout,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & MouseEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseover(eventName: mouseover): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseover(eventName: mouseover, options: Partial[TriggerOptions & ObjectLike & MouseEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseover(eventName: mouseover, position: Unit, options: Partial[TriggerOptions & ObjectLike & MouseEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseover(eventName: mouseover, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseover(
    eventName: mouseover,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & MouseEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseover(eventName: mouseover, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseover(
    eventName: mouseover,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & MouseEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseup(eventName: mouseup): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseup(eventName: mouseup, options: Partial[TriggerOptions & ObjectLike & MouseEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseup(eventName: mouseup, position: Unit, options: Partial[TriggerOptions & ObjectLike & MouseEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseup(eventName: mouseup, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseup(
    eventName: mouseup,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & MouseEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseup(eventName: mouseup, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseup(
    eventName: mouseup,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & MouseEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_paste(eventName: paste): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_paste(eventName: paste, options: Partial[TriggerOptions & ObjectLike & ClipboardEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_paste(eventName: paste, position: Unit, options: Partial[TriggerOptions & ObjectLike & ClipboardEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_paste(eventName: paste, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_paste(
    eventName: paste,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & ClipboardEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_paste(eventName: paste, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_paste(
    eventName: paste,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & ClipboardEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pause(eventName: pause): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pause(eventName: pause, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pause(eventName: pause, position: Unit, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pause(eventName: pause, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pause(eventName: pause, position: PositionType, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pause(eventName: pause, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pause(eventName: pause, x: Double, y: Double, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_play(eventName: play): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_play(eventName: play, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_play(eventName: play, position: Unit, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_play(eventName: play, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_play(eventName: play, position: PositionType, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_play(eventName: play, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_play(eventName: play, x: Double, y: Double, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_playing(eventName: playing): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_playing(eventName: playing, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_playing(eventName: playing, position: Unit, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_playing(eventName: playing, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_playing(eventName: playing, position: PositionType, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_playing(eventName: playing, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_playing(eventName: playing, x: Double, y: Double, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointercancel(eventName: pointercancel): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointercancel(eventName: pointercancel, options: Partial[TriggerOptions & ObjectLike & PointerEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointercancel(
    eventName: pointercancel,
    position: Unit,
    options: Partial[TriggerOptions & ObjectLike & PointerEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointercancel(eventName: pointercancel, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointercancel(
    eventName: pointercancel,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & PointerEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointercancel(eventName: pointercancel, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointercancel(
    eventName: pointercancel,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & PointerEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerdown(eventName: pointerdown): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerdown(eventName: pointerdown, options: Partial[TriggerOptions & ObjectLike & PointerEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerdown(
    eventName: pointerdown,
    position: Unit,
    options: Partial[TriggerOptions & ObjectLike & PointerEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerdown(eventName: pointerdown, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerdown(
    eventName: pointerdown,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & PointerEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerdown(eventName: pointerdown, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerdown(
    eventName: pointerdown,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & PointerEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerenter(eventName: pointerenter): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerenter(eventName: pointerenter, options: Partial[TriggerOptions & ObjectLike & PointerEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerenter(
    eventName: pointerenter,
    position: Unit,
    options: Partial[TriggerOptions & ObjectLike & PointerEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerenter(eventName: pointerenter, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerenter(
    eventName: pointerenter,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & PointerEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerenter(eventName: pointerenter, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerenter(
    eventName: pointerenter,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & PointerEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerleave(eventName: pointerleave): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerleave(eventName: pointerleave, options: Partial[TriggerOptions & ObjectLike & PointerEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerleave(
    eventName: pointerleave,
    position: Unit,
    options: Partial[TriggerOptions & ObjectLike & PointerEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerleave(eventName: pointerleave, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerleave(
    eventName: pointerleave,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & PointerEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerleave(eventName: pointerleave, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerleave(
    eventName: pointerleave,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & PointerEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerlockchange(eventName: pointerlockchange): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerlockchange(eventName: pointerlockchange, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerlockchange(
    eventName: pointerlockchange,
    position: Unit,
    options: Partial[TriggerOptions & ObjectLike & Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerlockchange(eventName: pointerlockchange, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerlockchange(
    eventName: pointerlockchange,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerlockchange(eventName: pointerlockchange, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerlockchange(
    eventName: pointerlockchange,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerlockerror(eventName: pointerlockerror): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerlockerror(eventName: pointerlockerror, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerlockerror(eventName: pointerlockerror, position: Unit, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerlockerror(eventName: pointerlockerror, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerlockerror(
    eventName: pointerlockerror,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerlockerror(eventName: pointerlockerror, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerlockerror(
    eventName: pointerlockerror,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointermove(eventName: pointermove): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointermove(eventName: pointermove, options: Partial[TriggerOptions & ObjectLike & PointerEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointermove(
    eventName: pointermove,
    position: Unit,
    options: Partial[TriggerOptions & ObjectLike & PointerEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointermove(eventName: pointermove, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointermove(
    eventName: pointermove,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & PointerEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointermove(eventName: pointermove, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointermove(
    eventName: pointermove,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & PointerEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerout(eventName: pointerout): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerout(eventName: pointerout, options: Partial[TriggerOptions & ObjectLike & PointerEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerout(
    eventName: pointerout,
    position: Unit,
    options: Partial[TriggerOptions & ObjectLike & PointerEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerout(eventName: pointerout, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerout(
    eventName: pointerout,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & PointerEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerout(eventName: pointerout, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerout(
    eventName: pointerout,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & PointerEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerover(eventName: pointerover): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerover(eventName: pointerover, options: Partial[TriggerOptions & ObjectLike & PointerEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerover(
    eventName: pointerover,
    position: Unit,
    options: Partial[TriggerOptions & ObjectLike & PointerEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerover(eventName: pointerover, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerover(
    eventName: pointerover,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & PointerEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerover(eventName: pointerover, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerover(
    eventName: pointerover,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & PointerEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerup(eventName: pointerup): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerup(eventName: pointerup, options: Partial[TriggerOptions & ObjectLike & PointerEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerup(eventName: pointerup, position: Unit, options: Partial[TriggerOptions & ObjectLike & PointerEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerup(eventName: pointerup, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerup(
    eventName: pointerup,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & PointerEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerup(eventName: pointerup, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerup(
    eventName: pointerup,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & PointerEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_progress(eventName: progress_): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_progress(eventName: progress_, options: Partial[TriggerOptions & ObjectLike & ProgressEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_progress(
    eventName: progress_,
    position: Unit,
    options: Partial[TriggerOptions & ObjectLike & ProgressEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_progress(eventName: progress_, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_progress(
    eventName: progress_,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & ProgressEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_progress(eventName: progress_, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_progress(
    eventName: progress_,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & ProgressEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_ratechange(eventName: ratechange): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_ratechange(eventName: ratechange, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_ratechange(eventName: ratechange, position: Unit, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_ratechange(eventName: ratechange, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_ratechange(
    eventName: ratechange,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_ratechange(eventName: ratechange, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_ratechange(eventName: ratechange, x: Double, y: Double, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_readystatechange(eventName: readystatechange): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_readystatechange(eventName: readystatechange, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_readystatechange(eventName: readystatechange, position: Unit, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_readystatechange(eventName: readystatechange, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_readystatechange(
    eventName: readystatechange,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_readystatechange(eventName: readystatechange, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_readystatechange(
    eventName: readystatechange,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_reset(eventName: reset): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_reset(eventName: reset, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_reset(eventName: reset, position: Unit, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_reset(eventName: reset, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_reset(eventName: reset, position: PositionType, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_reset(eventName: reset, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_reset(eventName: reset, x: Double, y: Double, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_resize(eventName: resize): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_resize(eventName: resize, options: Partial[TriggerOptions & ObjectLike & UIEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_resize(eventName: resize, position: Unit, options: Partial[TriggerOptions & ObjectLike & UIEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_resize(eventName: resize, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_resize(eventName: resize, position: PositionType, options: Partial[TriggerOptions & ObjectLike & UIEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_resize(eventName: resize, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_resize(eventName: resize, x: Double, y: Double, options: Partial[TriggerOptions & ObjectLike & UIEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_scroll(eventName: scroll): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_scroll(eventName: scroll, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_scroll(eventName: scroll, position: Unit, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_scroll(eventName: scroll, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_scroll(eventName: scroll, position: PositionType, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_scroll(eventName: scroll, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_scroll(eventName: scroll, x: Double, y: Double, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_securitypolicyviolation(eventName: securitypolicyviolation): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_securitypolicyviolation(
    eventName: securitypolicyviolation,
    options: Partial[TriggerOptions & ObjectLike & SecurityPolicyViolationEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_securitypolicyviolation(
    eventName: securitypolicyviolation,
    position: Unit,
    options: Partial[TriggerOptions & ObjectLike & SecurityPolicyViolationEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_securitypolicyviolation(eventName: securitypolicyviolation, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_securitypolicyviolation(
    eventName: securitypolicyviolation,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & SecurityPolicyViolationEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_securitypolicyviolation(eventName: securitypolicyviolation, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_securitypolicyviolation(
    eventName: securitypolicyviolation,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & SecurityPolicyViolationEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_seeked(eventName: seeked): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_seeked(eventName: seeked, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_seeked(eventName: seeked, position: Unit, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_seeked(eventName: seeked, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_seeked(eventName: seeked, position: PositionType, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_seeked(eventName: seeked, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_seeked(eventName: seeked, x: Double, y: Double, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_seeking(eventName: seeking): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_seeking(eventName: seeking, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_seeking(eventName: seeking, position: Unit, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_seeking(eventName: seeking, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_seeking(eventName: seeking, position: PositionType, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_seeking(eventName: seeking, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_seeking(eventName: seeking, x: Double, y: Double, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_select(eventName: select): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_select(eventName: select, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_select(eventName: select, position: Unit, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_select(eventName: select, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_select(eventName: select, position: PositionType, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_select(eventName: select, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_select(eventName: select, x: Double, y: Double, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_selectionchange(eventName: selectionchange): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_selectionchange(eventName: selectionchange, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_selectionchange(eventName: selectionchange, position: Unit, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_selectionchange(eventName: selectionchange, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_selectionchange(
    eventName: selectionchange,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_selectionchange(eventName: selectionchange, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_selectionchange(
    eventName: selectionchange,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_selectstart(eventName: selectstart): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_selectstart(eventName: selectstart, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_selectstart(eventName: selectstart, position: Unit, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_selectstart(eventName: selectstart, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_selectstart(
    eventName: selectstart,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_selectstart(eventName: selectstart, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_selectstart(
    eventName: selectstart,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_slotchange(eventName: slotchange): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_slotchange(eventName: slotchange, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_slotchange(eventName: slotchange, position: Unit, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_slotchange(eventName: slotchange, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_slotchange(
    eventName: slotchange,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_slotchange(eventName: slotchange, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_slotchange(eventName: slotchange, x: Double, y: Double, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_stalled(eventName: stalled): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_stalled(eventName: stalled, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_stalled(eventName: stalled, position: Unit, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_stalled(eventName: stalled, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_stalled(eventName: stalled, position: PositionType, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_stalled(eventName: stalled, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_stalled(eventName: stalled, x: Double, y: Double, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_submit(eventName: submit): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_submit(eventName: submit, options: Partial[TriggerOptions & ObjectLike & SubmitEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_submit(eventName: submit, position: Unit, options: Partial[TriggerOptions & ObjectLike & SubmitEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_submit(eventName: submit, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_submit(
    eventName: submit,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & SubmitEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_submit(eventName: submit, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_submit(
    eventName: submit,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & SubmitEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_suspend(eventName: suspend): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_suspend(eventName: suspend, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_suspend(eventName: suspend, position: Unit, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_suspend(eventName: suspend, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_suspend(eventName: suspend, position: PositionType, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_suspend(eventName: suspend, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_suspend(eventName: suspend, x: Double, y: Double, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_timeupdate(eventName: timeupdate): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_timeupdate(eventName: timeupdate, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_timeupdate(eventName: timeupdate, position: Unit, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_timeupdate(eventName: timeupdate, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_timeupdate(
    eventName: timeupdate,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_timeupdate(eventName: timeupdate, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_timeupdate(eventName: timeupdate, x: Double, y: Double, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_toggle(eventName: toggle): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_toggle(eventName: toggle, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_toggle(eventName: toggle, position: Unit, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_toggle(eventName: toggle, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_toggle(eventName: toggle, position: PositionType, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_toggle(eventName: toggle, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_toggle(eventName: toggle, x: Double, y: Double, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_touchcancel(eventName: touchcancel): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_touchcancel(eventName: touchcancel, options: Partial[TriggerOptions & ObjectLike & TouchEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_touchcancel(eventName: touchcancel, position: Unit, options: Partial[TriggerOptions & ObjectLike & TouchEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_touchcancel(eventName: touchcancel, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_touchcancel(
    eventName: touchcancel,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & TouchEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_touchcancel(eventName: touchcancel, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_touchcancel(
    eventName: touchcancel,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & TouchEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_touchend(eventName: touchend): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_touchend(eventName: touchend, options: Partial[TriggerOptions & ObjectLike & TouchEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_touchend(eventName: touchend, position: Unit, options: Partial[TriggerOptions & ObjectLike & TouchEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_touchend(eventName: touchend, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_touchend(
    eventName: touchend,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & TouchEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_touchend(eventName: touchend, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_touchend(
    eventName: touchend,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & TouchEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_touchmove(eventName: touchmove): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_touchmove(eventName: touchmove, options: Partial[TriggerOptions & ObjectLike & TouchEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_touchmove(eventName: touchmove, position: Unit, options: Partial[TriggerOptions & ObjectLike & TouchEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_touchmove(eventName: touchmove, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_touchmove(
    eventName: touchmove,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & TouchEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_touchmove(eventName: touchmove, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_touchmove(
    eventName: touchmove,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & TouchEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_touchstart(eventName: touchstart): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_touchstart(eventName: touchstart, options: Partial[TriggerOptions & ObjectLike & TouchEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_touchstart(eventName: touchstart, position: Unit, options: Partial[TriggerOptions & ObjectLike & TouchEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_touchstart(eventName: touchstart, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_touchstart(
    eventName: touchstart,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & TouchEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_touchstart(eventName: touchstart, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_touchstart(
    eventName: touchstart,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & TouchEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_transitioncancel(eventName: transitioncancel): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_transitioncancel(eventName: transitioncancel, options: Partial[TriggerOptions & ObjectLike & TransitionEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_transitioncancel(
    eventName: transitioncancel,
    position: Unit,
    options: Partial[TriggerOptions & ObjectLike & TransitionEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_transitioncancel(eventName: transitioncancel, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_transitioncancel(
    eventName: transitioncancel,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & TransitionEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_transitioncancel(eventName: transitioncancel, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_transitioncancel(
    eventName: transitioncancel,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & TransitionEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_transitionend(eventName: transitionend): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_transitionend(eventName: transitionend, options: Partial[TriggerOptions & ObjectLike & TransitionEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_transitionend(
    eventName: transitionend,
    position: Unit,
    options: Partial[TriggerOptions & ObjectLike & TransitionEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_transitionend(eventName: transitionend, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_transitionend(
    eventName: transitionend,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & TransitionEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_transitionend(eventName: transitionend, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_transitionend(
    eventName: transitionend,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & TransitionEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_transitionrun(eventName: transitionrun): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_transitionrun(eventName: transitionrun, options: Partial[TriggerOptions & ObjectLike & TransitionEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_transitionrun(
    eventName: transitionrun,
    position: Unit,
    options: Partial[TriggerOptions & ObjectLike & TransitionEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_transitionrun(eventName: transitionrun, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_transitionrun(
    eventName: transitionrun,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & TransitionEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_transitionrun(eventName: transitionrun, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_transitionrun(
    eventName: transitionrun,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & TransitionEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_transitionstart(eventName: transitionstart): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_transitionstart(eventName: transitionstart, options: Partial[TriggerOptions & ObjectLike & TransitionEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_transitionstart(
    eventName: transitionstart,
    position: Unit,
    options: Partial[TriggerOptions & ObjectLike & TransitionEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_transitionstart(eventName: transitionstart, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_transitionstart(
    eventName: transitionstart,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & TransitionEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_transitionstart(eventName: transitionstart, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_transitionstart(
    eventName: transitionstart,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & TransitionEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_visibilitychange(eventName: visibilitychange): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_visibilitychange(eventName: visibilitychange, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_visibilitychange(eventName: visibilitychange, position: Unit, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_visibilitychange(eventName: visibilitychange, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_visibilitychange(
    eventName: visibilitychange,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_visibilitychange(eventName: visibilitychange, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_visibilitychange(
    eventName: visibilitychange,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_volumechange(eventName: volumechange): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_volumechange(eventName: volumechange, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_volumechange(eventName: volumechange, position: Unit, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_volumechange(eventName: volumechange, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_volumechange(
    eventName: volumechange,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_volumechange(eventName: volumechange, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_volumechange(
    eventName: volumechange,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_waiting(eventName: waiting): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_waiting(eventName: waiting, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_waiting(eventName: waiting, position: Unit, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_waiting(eventName: waiting, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_waiting(eventName: waiting, position: PositionType, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_waiting(eventName: waiting, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_waiting(eventName: waiting, x: Double, y: Double, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_webkitanimationend(eventName: webkitanimationend): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_webkitanimationend(eventName: webkitanimationend, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_webkitanimationend(
    eventName: webkitanimationend,
    position: Unit,
    options: Partial[TriggerOptions & ObjectLike & Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_webkitanimationend(eventName: webkitanimationend, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_webkitanimationend(
    eventName: webkitanimationend,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_webkitanimationend(eventName: webkitanimationend, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_webkitanimationend(
    eventName: webkitanimationend,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_webkitanimationiteration(eventName: webkitanimationiteration): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_webkitanimationiteration(eventName: webkitanimationiteration, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_webkitanimationiteration(
    eventName: webkitanimationiteration,
    position: Unit,
    options: Partial[TriggerOptions & ObjectLike & Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_webkitanimationiteration(eventName: webkitanimationiteration, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_webkitanimationiteration(
    eventName: webkitanimationiteration,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_webkitanimationiteration(eventName: webkitanimationiteration, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_webkitanimationiteration(
    eventName: webkitanimationiteration,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_webkitanimationstart(eventName: webkitanimationstart): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_webkitanimationstart(eventName: webkitanimationstart, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_webkitanimationstart(
    eventName: webkitanimationstart,
    position: Unit,
    options: Partial[TriggerOptions & ObjectLike & Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_webkitanimationstart(eventName: webkitanimationstart, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_webkitanimationstart(
    eventName: webkitanimationstart,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_webkitanimationstart(eventName: webkitanimationstart, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_webkitanimationstart(
    eventName: webkitanimationstart,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_webkittransitionend(eventName: webkittransitionend): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_webkittransitionend(eventName: webkittransitionend, options: Partial[TriggerOptions & ObjectLike & Event]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_webkittransitionend(
    eventName: webkittransitionend,
    position: Unit,
    options: Partial[TriggerOptions & ObjectLike & Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_webkittransitionend(eventName: webkittransitionend, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_webkittransitionend(
    eventName: webkittransitionend,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_webkittransitionend(eventName: webkittransitionend, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_webkittransitionend(
    eventName: webkittransitionend,
    x: Double,
    y: Double,
    options: Partial[TriggerOptions & ObjectLike & Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_wheel(eventName: wheel): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_wheel(eventName: wheel, options: Partial[TriggerOptions & ObjectLike & WheelEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_wheel(eventName: wheel, position: Unit, options: Partial[TriggerOptions & ObjectLike & WheelEvent]): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_wheel(eventName: wheel, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_wheel(
    eventName: wheel,
    position: PositionType,
    options: Partial[TriggerOptions & ObjectLike & WheelEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_wheel(eventName: wheel, x: Double, y: Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_wheel(eventName: wheel, x: Double, y: Double, options: Partial[TriggerOptions & ObjectLike & WheelEvent]): Chainable[Subject] = js.native
  
  /**
    * Type into a DOM element.
    *
    * @see https://on.cypress.io/type
    * @example
    *    cy.get('input').type('Hello, World')
    *    // type "hello" + press Enter
    *    cy.get('input').type('hello{enter}')
    */
  def `type`(text: String): Chainable[Subject] = js.native
  def `type`(text: String, options: PartialTypeOptions): Chainable[Subject] = js.native
  
  /**
    * Uncheck checkbox(es).
    *
    * @see https://on.cypress.io/uncheck
    * @example
    *    // Unchecks checkbox element
    *    cy.get('[type="checkbox"]').uncheck()
    *    // Uncheck element with the id 'saveUserName'
    *    cy.get('#saveUserName').uncheck()
    *    // Uncheck all checkboxes
    *    cy.get(':checkbox').uncheck()
    *    // Uncheck the checkbox with the value of 'ga'
    *    cy.get('input[type="checkbox"]').uncheck(['ga'])
    */
  def uncheck(): Chainable[Subject] = js.native
  def uncheck(options: PartialCheckOptions): Chainable[Subject] = js.native
  /**
    * Uncheck specific checkbox.
    *
    * @see https://on.cypress.io/uncheck
    * @example
    *    // Uncheck the checkbox with the value of 'ga'
    *    cy.get('input[type="checkbox"]').uncheck('ga')
    */
  def uncheck(value: String): Chainable[Subject] = js.native
  def uncheck(value: String, options: PartialCheckOptions): Chainable[Subject] = js.native
  /**
    * Uncheck specific checkboxes.
    *
    * @see https://on.cypress.io/uncheck
    * @example
    *    // Uncheck the checkbox with the value of 'ga', 'ma'
    *    cy.get('input[type="checkbox"]').uncheck(['ga', 'ma'])
    */
  def uncheck(values: js.Array[String]): Chainable[Subject] = js.native
  def uncheck(values: js.Array[String], options: PartialCheckOptions): Chainable[Subject] = js.native
  
  /**
    * Get the current URL of the page that is currently active.
    *
    * @alias cy.location('href')
    * @see https://on.cypress.io/url
    */
  def url(): Chainable[String] = js.native
  def url(options: PartialUrlOptions): Chainable[String] = js.native
  
  /**
    * Control the size and orientation of the screen for your application.
    *
    * @see https://on.cypress.io/viewport
    * @example
    *    // Set viewport to 550px x 750px
    *    cy.viewport(550, 750)
    *    // Set viewport to 357px x 667px
    *    cy.viewport('iphone-6')
    */
  def viewport(preset: ViewportPreset): Chainable[Null] = js.native
  def viewport(preset: ViewportPreset, orientation: Unit, options: PartialLoggable): Chainable[Null] = js.native
  def viewport(preset: ViewportPreset, orientation: ViewportOrientation): Chainable[Null] = js.native
  def viewport(preset: ViewportPreset, orientation: ViewportOrientation, options: PartialLoggable): Chainable[Null] = js.native
  /**
    * Set viewport to the given resolution.
    *
    * @see https://on.cypress.io/viewport
    * @example
    *    // Set viewport to 550px x 750px
    *    cy.viewport(550, 750)
    */
  def viewport(width: Double, height: Double): Chainable[Null] = js.native
  def viewport(width: Double, height: Double, options: PartialLoggable): Chainable[Null] = js.native
  
  def visit(options: PartialVisitOptionsurlstr): Chainable[AUTWindow] = js.native
  /**
    * Visit the given url
    *
    * @param {string} url The URL to visit. If relative uses `baseUrl`
    * @param {VisitOptions} [options] Pass in an options object to change the default behavior of `cy.visit()`
    * @see https://on.cypress.io/visit
    * @example
    *    cy.visit('http://localhost:3000')
    *    cy.visit('/somewhere') // opens ${baseUrl}/somewhere
    *    cy.visit({
    *      url: 'http://google.com',
    *      method: 'POST'
    *    })
    *
    */
  def visit(url: String): Chainable[AUTWindow] = js.native
  def visit(url: String, options: PartialVisitOptions): Chainable[AUTWindow] = js.native
  
  /**
    * Wait for a number of milliseconds.
    * You almost never need to wait for an arbitrary period of time.
    * There are always better ways to express this in Cypress, see the documentation.
    *
    * @see https://on.cypress.io/wait
    * @param {number} ms - Milliseconds to wait.
    * @example
    *    cy.wait(1000) // wait for 1 second
    */
  def wait(ms: Double): Chainable[Subject] = js.native
  def wait(ms: Double, options: PartialLoggableTimeoutabl): Chainable[Subject] = js.native
  
  /**
    * Get the window object of the page that is currently active.
    *
    * @see https://on.cypress.io/window
    * @example
    ```
    cy.visit('http://localhost:8080/app')
    cy.window().then(function(win){
    // win is the remote window
    // of the page at: http://localhost:8080/app
    })
    ```
    */
  def window(): Chainable[AUTWindow] = js.native
  def window(options: PartialLoggableTimeoutabl): Chainable[AUTWindow] = js.native
  
  /**
    * Scopes all subsequent cy commands to within this element.
    * Useful when working within a particular group of elements such as a `<form>`.
    * @see https://on.cypress.io/within
    * @example
    ```
    cy.get('form').within(($form) => {
    // cy.get() will only search for elements within form,
    // not within the entire document
    cy.get('input[name="username"]').type('john')
    cy.get('input[name="password"]').type('password')
    cy.root().submit()
    })
    ```
    */
  def within(fn: js.Function1[/* currentSubject */ Subject, Unit]): Chainable[Subject] = js.native
  /**
    * Scopes all subsequent cy commands to within this element.
    * Useful when working within a particular group of elements such as a `<form>`.
    * @see https://on.cypress.io/within
    */
  def within(options: PartialLoggable, fn: js.Function1[/* currentSubject */ Subject, Unit]): Chainable[Subject] = js.native
  
  def wrap[E /* <: Node */](element: JQuery[E]): Chainable[JQuery[E]] = js.native
  def wrap[E /* <: Node */](element: JQuery[E], options: PartialLoggableTimeoutabl): Chainable[JQuery[E]] = js.native
  /**
    * Yields whatever is passed into `.wrap()` to the next command in the Cypress chain.
    *
    * @see https://on.cypress.io/wrap
    * @example
    ```
    // Make assertions about object
    cy.wrap({ amount: 10 })
    .should('have.property', 'amount')
    .and('eq', 10)
    ```
    */
  def wrap[S](`object`: S): Chainable[S] = js.native
  def wrap[S](`object`: S, options: PartialLoggableTimeoutabl): Chainable[S] = js.native
  // inconsistent argument order
  /**
    * Yield the element passed into `.wrap()`.
    *
    * @see https://on.cypress.io/wrap
    * @example
    ```
    // wraps DOM element
    cy.get('form').within(($form) => {
    // more commands
    cy.wrap($form).should('have.class', 'form-container')
    })
    ```
    */
  @JSName("wrap")
  def wrap_E[E /* <: Node */](element: E): Chainable[JQuery[E]] = js.native
  @JSName("wrap")
  def wrap_E[E /* <: Node */](element: E, options: PartialLoggableTimeoutabl): Chainable[JQuery[E]] = js.native
  /**
    * Yield the element passed into `.wrap()` to the next command in the Cypress chain.
    *
    * @see https://on.cypress.io/wrap
    * @example
    ```
    cy.wrap(new Promise((resolve, reject) => {
    setTimeout(resolve, 1000);
    }).then(result => {})
    ```
    */
  @JSName("wrap")
  def wrap_FS[F /* <: js.Promise[S] */, S](promise: F): Chainable[S] = js.native
  @JSName("wrap")
  def wrap_FS[F /* <: js.Promise[S] */, S](promise: F, options: PartialLoggableTimeoutabl): Chainable[S] = js.native
  
  /**
    * Write to a file with the specified encoding and contents.
    *
    * @see https://on.cypress.io/writefile
    ```
    cy.writeFile('path/to/ascii.txt', 'Hello World', {
    flag: 'a+',
    encoding: 'ascii'
    })
    ```
    */
  def writeFile(filePath: String, contents: FileContents): Chainable[Null] = js.native
  /**
    * Write to a file with the specified contents.
    *
    * @see https://on.cypress.io/writefile
    ```
    cy.writeFile('path/to/message.txt', 'Hello World')
    ```
    */
  def writeFile(filePath: String, contents: FileContents, encoding: Encodings): Chainable[Null] = js.native
  def writeFile(filePath: String, contents: FileContents, encoding: Encodings, options: PartialWriteFileOptionsTi): Chainable[Null] = js.native
  def writeFile(filePath: String, contents: FileContents, options: PartialWriteFileOptionsTi): Chainable[Null] = js.native
}
