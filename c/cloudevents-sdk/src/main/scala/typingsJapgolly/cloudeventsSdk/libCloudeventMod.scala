package typingsJapgolly.cloudeventsSdk

import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

object libCloudeventMod {
  
  @JSImport("cloudevents-sdk/lib/cloudevent", "CloudEvent")
  @js.native
  open class CloudEvent protected () extends StObject {
    /**
      * Creates a new CloudEvent instance
      * @param {object} event CloudEvent properties as a simple object
      * @param {string} event.source Identifies the context in which an event happened as a URI reference
      * @param {string} event.type Describes the type of event related to the originating occurrence
      * @param {string} [event.id] A unique ID for this event - if not supplied, will be autogenerated
      * @param {string} [event.time] A timestamp for this event. May also be provided as a Date
      * @param {string} [event.subject] Describes the subject of the event in the context of the event producer
      * @param {string} [event.dataContentType] The mime content type for the event data
      * @param {string} [event.dataSchema] The URI of the schema that the event data adheres to (v1.0 events)
      * @param {string} [event.schemaURL]  The URI of the schema that the event data adheres to (v0.3 events)
      * @param {string} [event.dataContentEncoding] The content encoding for the event data (v0.3 events)
      * @param {string} [event.specversion] The CloudEvent specification version for this event - default: 1.0
      * @param {*} [event.data] The event payload
      */
    def this(event: CE) = this()
    
    /**
      * Adds an extension attribute to this CloudEvent
      * @see https://github.com/cloudevents/spec/blob/master/spec.md#extension-context-attributes
      * @param {string} key the name of the extension attribute
      * @param {*} value the value of the extension attribute
      * @returns {void}
      */
    def addExtension(key: String, value: Any): Unit = js.native
    
    /**
      * Gets or sets the data for this event
      * @see https://github.com/cloudevents/spec/blob/master/spec.md#event-data
      * @type {*}
      */
    def data: Any = js.native
    
    /**
      * Gets or sets the event's data content encoding
      * @type {string}
      * @see https://github.com/cloudevents/spec/blob/v0.3/spec.md#datacontentencoding
      */
    def dataContentEncoding: Any = js.native
    def dataContentEncoding_=(dataContentEncoding: Any): Unit = js.native
    
    /**
      * Gets or sets the content type of the data value for this event
      * @type {string}
      * @see https://github.com/cloudevents/spec/blob/master/spec.md#datacontenttype
      */
    def dataContentType: Any = js.native
    def dataContentType_=(contenttype: Any): Unit = js.native
    
    /**
      * Gets or sets the event's data schema
      * @type {string}
      * @see https://github.com/cloudevents/spec/blob/v1.0/spec.md#dataschema
      */
    def dataSchema: Any = js.native
    def dataSchema_=(dataschema: Any): Unit = js.native
    
    def data_=(data: Any): Unit = js.native
    
    /**
      * Formats the CloudEvent as JSON. Validates the event according
      * to the CloudEvent specification and throws an exception if
      * it's invalid.
      * @returns {JSON} the CloudEvent in JSON form
      * @throws {ValidationError} if this event cannot be validated against the specification
      */
    def format(): Any = js.native
    
    var formatter: Any = js.native
    
    /**
      * Gets the extension attributes, if any, associated with this event
      * @see https://github.com/cloudevents/spec/blob/master/spec.md#extension-context-attributes
      * @returns {Object} the extensions attributes - if none exist will will be {}
      */
    def getExtensions(): js.Object = js.native
    
    /**
      * Gets or sets the event id. Source + id must be unique for each distinct event.
      * @see https://github.com/cloudevents/spec/blob/master/spec.md#id
      * @type {string}
      */
    def id: Any = js.native
    def id_=(id: Any): Unit = js.native
    
    /**
      * DEPRECATED: Gets or sets the schema URL for this event. Throws {TypeError}
      * if this is a version 1.0 event.
      * @type {string}
      * @see https://github.com/cloudevents/spec/blob/v0.3/spec.md#schemaurl
      */
    def schemaURL: Any = js.native
    def schemaURL_=(schemaurl: Any): Unit = js.native
    
    /**
      * Gets or sets the origination source of this event as a URI.
      * @type {string}
      * @see https://github.com/cloudevents/spec/blob/master/spec.md#source-1
      */
    def source: Any = js.native
    def source_=(source: Any): Unit = js.native
    
    var spec: Any = js.native
    
    /**
      * Gets the CloudEvent specification version
      * @type {string}
      * @see https://github.com/cloudevents/spec/blob/master/spec.md#specversion
      */
    def specversion: Any = js.native
    
    /**
      * Gets or sets the event subject
      * @type {string}
      * @see https://github.com/cloudevents/spec/blob/v1.0/spec.md#subject
      */
    def subject: Any = js.native
    def subject_=(subject: Any): Unit = js.native
    
    /**
      * Gets or sets the timestamp for this event as an ISO formatted date string
      * @type {string}
      * @see https://github.com/cloudevents/spec/blob/master/spec.md#time
      */
    def time: Any = js.native
    def time_=(time: Any): Unit = js.native
    
    /**
      * Gets or sets the event type
      * @type {string}
      * @see https://github.com/cloudevents/spec/blob/master/spec.md#type
      */
    def `type`: Any = js.native
    def type_=(`type`: Any): Unit = js.native
  }
  
  type CE = /* import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify CloudEventV1 */ Any
}
