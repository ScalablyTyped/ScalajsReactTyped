package typingsJapgolly.locutus

import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

object phpStringsMod {
  
  @JSImport("locutus/php/strings", JSImport.Namespace)
  @js.native
  val ^ : js.Any = js.native
  
  inline def addcslashes(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("addcslashes")().asInstanceOf[Any]
  inline def addcslashes(str: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("addcslashes")(str.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def addcslashes(str: Any, charlist: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("addcslashes")(str.asInstanceOf[js.Any], charlist.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def addcslashes(str: Unit, charlist: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("addcslashes")(str.asInstanceOf[js.Any], charlist.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def addslashes(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("addslashes")().asInstanceOf[Any]
  inline def addslashes(str: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("addslashes")(str.asInstanceOf[js.Any]).asInstanceOf[Any]
  
  inline def bin2hex(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("bin2hex")().asInstanceOf[Any]
  inline def bin2hex(s: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("bin2hex")(s.asInstanceOf[js.Any]).asInstanceOf[Any]
  
  inline def chop(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("chop")().asInstanceOf[Any]
  inline def chop(str: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("chop")(str.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def chop(str: Any, charlist: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("chop")(str.asInstanceOf[js.Any], charlist.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def chop(str: Unit, charlist: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("chop")(str.asInstanceOf[js.Any], charlist.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def chr(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("chr")().asInstanceOf[Any]
  inline def chr(codePt: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("chr")(codePt.asInstanceOf[js.Any]).asInstanceOf[Any]
  
  inline def chunkSplit(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("chunk_split")().asInstanceOf[Any]
  inline def chunkSplit(body: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("chunk_split")(body.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def chunkSplit(body: Any, chunklen: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("chunk_split")(body.asInstanceOf[js.Any], chunklen.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def chunkSplit(body: Any, chunklen: Any, end: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("chunk_split")(body.asInstanceOf[js.Any], chunklen.asInstanceOf[js.Any], end.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def chunkSplit(body: Any, chunklen: Unit, end: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("chunk_split")(body.asInstanceOf[js.Any], chunklen.asInstanceOf[js.Any], end.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def chunkSplit(body: Unit, chunklen: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("chunk_split")(body.asInstanceOf[js.Any], chunklen.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def chunkSplit(body: Unit, chunklen: Any, end: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("chunk_split")(body.asInstanceOf[js.Any], chunklen.asInstanceOf[js.Any], end.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def chunkSplit(body: Unit, chunklen: Unit, end: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("chunk_split")(body.asInstanceOf[js.Any], chunklen.asInstanceOf[js.Any], end.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def convertCyrString(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("convert_cyr_string")().asInstanceOf[Any]
  inline def convertCyrString(str: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("convert_cyr_string")(str.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def convertCyrString(str: Any, from: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("convert_cyr_string")(str.asInstanceOf[js.Any], from.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def convertCyrString(str: Any, from: Any, to: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("convert_cyr_string")(str.asInstanceOf[js.Any], from.asInstanceOf[js.Any], to.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def convertCyrString(str: Any, from: Unit, to: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("convert_cyr_string")(str.asInstanceOf[js.Any], from.asInstanceOf[js.Any], to.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def convertCyrString(str: Unit, from: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("convert_cyr_string")(str.asInstanceOf[js.Any], from.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def convertCyrString(str: Unit, from: Any, to: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("convert_cyr_string")(str.asInstanceOf[js.Any], from.asInstanceOf[js.Any], to.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def convertCyrString(str: Unit, from: Unit, to: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("convert_cyr_string")(str.asInstanceOf[js.Any], from.asInstanceOf[js.Any], to.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def convertUuencode(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("convert_uuencode")().asInstanceOf[Any]
  inline def convertUuencode(str: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("convert_uuencode")(str.asInstanceOf[js.Any]).asInstanceOf[Any]
  
  inline def countChars(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("count_chars")().asInstanceOf[Any]
  inline def countChars(str: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("count_chars")(str.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def countChars(str: Any, mode: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("count_chars")(str.asInstanceOf[js.Any], mode.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def countChars(str: Unit, mode: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("count_chars")(str.asInstanceOf[js.Any], mode.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def crc32(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("crc32")().asInstanceOf[Any]
  inline def crc32(str: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("crc32")(str.asInstanceOf[js.Any]).asInstanceOf[Any]
  
  inline def echo(args: Any*): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("echo")(args.asInstanceOf[Seq[js.Any]]*).asInstanceOf[Any]
  
  inline def explode(args: Any*): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("explode")(args.asInstanceOf[Seq[js.Any]]*).asInstanceOf[Any]
  
  inline def getHtmlTranslationTable(args: Any*): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("get_html_translation_table")(args.asInstanceOf[Seq[js.Any]]*).asInstanceOf[Any]
  
  inline def hex2bin(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("hex2bin")().asInstanceOf[Any]
  inline def hex2bin(s: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("hex2bin")(s.asInstanceOf[js.Any]).asInstanceOf[Any]
  
  inline def htmlEntityDecode(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("html_entity_decode")().asInstanceOf[Any]
  inline def htmlEntityDecode(string: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("html_entity_decode")(string.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def htmlEntityDecode(string: Any, quoteStyle: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("html_entity_decode")(string.asInstanceOf[js.Any], quoteStyle.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def htmlEntityDecode(string: Unit, quoteStyle: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("html_entity_decode")(string.asInstanceOf[js.Any], quoteStyle.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def htmlentities(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("htmlentities")().asInstanceOf[Any]
  inline def htmlentities(string: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("htmlentities")(string.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def htmlentities(string: Any, quoteStyle: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("htmlentities")(string.asInstanceOf[js.Any], quoteStyle.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def htmlentities(string: Any, quoteStyle: Any, charset: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("htmlentities")(string.asInstanceOf[js.Any], quoteStyle.asInstanceOf[js.Any], charset.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def htmlentities(string: Any, quoteStyle: Any, charset: Any, doubleEncode: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("htmlentities")(string.asInstanceOf[js.Any], quoteStyle.asInstanceOf[js.Any], charset.asInstanceOf[js.Any], doubleEncode.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def htmlentities(string: Any, quoteStyle: Any, charset: Unit, doubleEncode: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("htmlentities")(string.asInstanceOf[js.Any], quoteStyle.asInstanceOf[js.Any], charset.asInstanceOf[js.Any], doubleEncode.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def htmlentities(string: Any, quoteStyle: Unit, charset: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("htmlentities")(string.asInstanceOf[js.Any], quoteStyle.asInstanceOf[js.Any], charset.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def htmlentities(string: Any, quoteStyle: Unit, charset: Any, doubleEncode: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("htmlentities")(string.asInstanceOf[js.Any], quoteStyle.asInstanceOf[js.Any], charset.asInstanceOf[js.Any], doubleEncode.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def htmlentities(string: Any, quoteStyle: Unit, charset: Unit, doubleEncode: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("htmlentities")(string.asInstanceOf[js.Any], quoteStyle.asInstanceOf[js.Any], charset.asInstanceOf[js.Any], doubleEncode.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def htmlentities(string: Unit, quoteStyle: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("htmlentities")(string.asInstanceOf[js.Any], quoteStyle.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def htmlentities(string: Unit, quoteStyle: Any, charset: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("htmlentities")(string.asInstanceOf[js.Any], quoteStyle.asInstanceOf[js.Any], charset.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def htmlentities(string: Unit, quoteStyle: Any, charset: Any, doubleEncode: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("htmlentities")(string.asInstanceOf[js.Any], quoteStyle.asInstanceOf[js.Any], charset.asInstanceOf[js.Any], doubleEncode.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def htmlentities(string: Unit, quoteStyle: Any, charset: Unit, doubleEncode: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("htmlentities")(string.asInstanceOf[js.Any], quoteStyle.asInstanceOf[js.Any], charset.asInstanceOf[js.Any], doubleEncode.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def htmlentities(string: Unit, quoteStyle: Unit, charset: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("htmlentities")(string.asInstanceOf[js.Any], quoteStyle.asInstanceOf[js.Any], charset.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def htmlentities(string: Unit, quoteStyle: Unit, charset: Any, doubleEncode: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("htmlentities")(string.asInstanceOf[js.Any], quoteStyle.asInstanceOf[js.Any], charset.asInstanceOf[js.Any], doubleEncode.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def htmlentities(string: Unit, quoteStyle: Unit, charset: Unit, doubleEncode: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("htmlentities")(string.asInstanceOf[js.Any], quoteStyle.asInstanceOf[js.Any], charset.asInstanceOf[js.Any], doubleEncode.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def htmlspecialchars(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("htmlspecialchars")().asInstanceOf[Any]
  inline def htmlspecialchars(string: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("htmlspecialchars")(string.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def htmlspecialchars(string: Any, quoteStyle: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("htmlspecialchars")(string.asInstanceOf[js.Any], quoteStyle.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def htmlspecialchars(string: Any, quoteStyle: Any, charset: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("htmlspecialchars")(string.asInstanceOf[js.Any], quoteStyle.asInstanceOf[js.Any], charset.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def htmlspecialchars(string: Any, quoteStyle: Any, charset: Any, doubleEncode: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("htmlspecialchars")(string.asInstanceOf[js.Any], quoteStyle.asInstanceOf[js.Any], charset.asInstanceOf[js.Any], doubleEncode.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def htmlspecialchars(string: Any, quoteStyle: Any, charset: Unit, doubleEncode: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("htmlspecialchars")(string.asInstanceOf[js.Any], quoteStyle.asInstanceOf[js.Any], charset.asInstanceOf[js.Any], doubleEncode.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def htmlspecialchars(string: Any, quoteStyle: Unit, charset: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("htmlspecialchars")(string.asInstanceOf[js.Any], quoteStyle.asInstanceOf[js.Any], charset.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def htmlspecialchars(string: Any, quoteStyle: Unit, charset: Any, doubleEncode: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("htmlspecialchars")(string.asInstanceOf[js.Any], quoteStyle.asInstanceOf[js.Any], charset.asInstanceOf[js.Any], doubleEncode.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def htmlspecialchars(string: Any, quoteStyle: Unit, charset: Unit, doubleEncode: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("htmlspecialchars")(string.asInstanceOf[js.Any], quoteStyle.asInstanceOf[js.Any], charset.asInstanceOf[js.Any], doubleEncode.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def htmlspecialchars(string: Unit, quoteStyle: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("htmlspecialchars")(string.asInstanceOf[js.Any], quoteStyle.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def htmlspecialchars(string: Unit, quoteStyle: Any, charset: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("htmlspecialchars")(string.asInstanceOf[js.Any], quoteStyle.asInstanceOf[js.Any], charset.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def htmlspecialchars(string: Unit, quoteStyle: Any, charset: Any, doubleEncode: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("htmlspecialchars")(string.asInstanceOf[js.Any], quoteStyle.asInstanceOf[js.Any], charset.asInstanceOf[js.Any], doubleEncode.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def htmlspecialchars(string: Unit, quoteStyle: Any, charset: Unit, doubleEncode: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("htmlspecialchars")(string.asInstanceOf[js.Any], quoteStyle.asInstanceOf[js.Any], charset.asInstanceOf[js.Any], doubleEncode.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def htmlspecialchars(string: Unit, quoteStyle: Unit, charset: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("htmlspecialchars")(string.asInstanceOf[js.Any], quoteStyle.asInstanceOf[js.Any], charset.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def htmlspecialchars(string: Unit, quoteStyle: Unit, charset: Any, doubleEncode: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("htmlspecialchars")(string.asInstanceOf[js.Any], quoteStyle.asInstanceOf[js.Any], charset.asInstanceOf[js.Any], doubleEncode.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def htmlspecialchars(string: Unit, quoteStyle: Unit, charset: Unit, doubleEncode: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("htmlspecialchars")(string.asInstanceOf[js.Any], quoteStyle.asInstanceOf[js.Any], charset.asInstanceOf[js.Any], doubleEncode.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def htmlspecialcharsDecode(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("htmlspecialchars_decode")().asInstanceOf[Any]
  inline def htmlspecialcharsDecode(string: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("htmlspecialchars_decode")(string.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def htmlspecialcharsDecode(string: Any, quoteStyle: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("htmlspecialchars_decode")(string.asInstanceOf[js.Any], quoteStyle.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def htmlspecialcharsDecode(string: Unit, quoteStyle: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("htmlspecialchars_decode")(string.asInstanceOf[js.Any], quoteStyle.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def implode(args: Any*): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("implode")(args.asInstanceOf[Seq[js.Any]]*).asInstanceOf[Any]
  
  inline def join(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("join")().asInstanceOf[Any]
  inline def join(glue: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("join")(glue.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def join(glue: Any, pieces: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("join")(glue.asInstanceOf[js.Any], pieces.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def join(glue: Unit, pieces: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("join")(glue.asInstanceOf[js.Any], pieces.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def lcfirst(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("lcfirst")().asInstanceOf[Any]
  inline def lcfirst(str: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("lcfirst")(str.asInstanceOf[js.Any]).asInstanceOf[Any]
  
  inline def levenshtein(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("levenshtein")().asInstanceOf[Any]
  inline def levenshtein(s1: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("levenshtein")(s1.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def levenshtein(s1: Any, s2: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("levenshtein")(s1.asInstanceOf[js.Any], s2.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def levenshtein(s1: Any, s2: Any, costIns: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("levenshtein")(s1.asInstanceOf[js.Any], s2.asInstanceOf[js.Any], costIns.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def levenshtein(s1: Any, s2: Any, costIns: Any, costRep: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("levenshtein")(s1.asInstanceOf[js.Any], s2.asInstanceOf[js.Any], costIns.asInstanceOf[js.Any], costRep.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def levenshtein(s1: Any, s2: Any, costIns: Any, costRep: Any, costDel: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("levenshtein")(s1.asInstanceOf[js.Any], s2.asInstanceOf[js.Any], costIns.asInstanceOf[js.Any], costRep.asInstanceOf[js.Any], costDel.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def levenshtein(s1: Any, s2: Any, costIns: Any, costRep: Unit, costDel: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("levenshtein")(s1.asInstanceOf[js.Any], s2.asInstanceOf[js.Any], costIns.asInstanceOf[js.Any], costRep.asInstanceOf[js.Any], costDel.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def levenshtein(s1: Any, s2: Any, costIns: Unit, costRep: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("levenshtein")(s1.asInstanceOf[js.Any], s2.asInstanceOf[js.Any], costIns.asInstanceOf[js.Any], costRep.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def levenshtein(s1: Any, s2: Any, costIns: Unit, costRep: Any, costDel: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("levenshtein")(s1.asInstanceOf[js.Any], s2.asInstanceOf[js.Any], costIns.asInstanceOf[js.Any], costRep.asInstanceOf[js.Any], costDel.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def levenshtein(s1: Any, s2: Any, costIns: Unit, costRep: Unit, costDel: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("levenshtein")(s1.asInstanceOf[js.Any], s2.asInstanceOf[js.Any], costIns.asInstanceOf[js.Any], costRep.asInstanceOf[js.Any], costDel.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def levenshtein(s1: Any, s2: Unit, costIns: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("levenshtein")(s1.asInstanceOf[js.Any], s2.asInstanceOf[js.Any], costIns.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def levenshtein(s1: Any, s2: Unit, costIns: Any, costRep: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("levenshtein")(s1.asInstanceOf[js.Any], s2.asInstanceOf[js.Any], costIns.asInstanceOf[js.Any], costRep.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def levenshtein(s1: Any, s2: Unit, costIns: Any, costRep: Any, costDel: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("levenshtein")(s1.asInstanceOf[js.Any], s2.asInstanceOf[js.Any], costIns.asInstanceOf[js.Any], costRep.asInstanceOf[js.Any], costDel.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def levenshtein(s1: Any, s2: Unit, costIns: Any, costRep: Unit, costDel: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("levenshtein")(s1.asInstanceOf[js.Any], s2.asInstanceOf[js.Any], costIns.asInstanceOf[js.Any], costRep.asInstanceOf[js.Any], costDel.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def levenshtein(s1: Any, s2: Unit, costIns: Unit, costRep: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("levenshtein")(s1.asInstanceOf[js.Any], s2.asInstanceOf[js.Any], costIns.asInstanceOf[js.Any], costRep.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def levenshtein(s1: Any, s2: Unit, costIns: Unit, costRep: Any, costDel: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("levenshtein")(s1.asInstanceOf[js.Any], s2.asInstanceOf[js.Any], costIns.asInstanceOf[js.Any], costRep.asInstanceOf[js.Any], costDel.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def levenshtein(s1: Any, s2: Unit, costIns: Unit, costRep: Unit, costDel: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("levenshtein")(s1.asInstanceOf[js.Any], s2.asInstanceOf[js.Any], costIns.asInstanceOf[js.Any], costRep.asInstanceOf[js.Any], costDel.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def levenshtein(s1: Unit, s2: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("levenshtein")(s1.asInstanceOf[js.Any], s2.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def levenshtein(s1: Unit, s2: Any, costIns: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("levenshtein")(s1.asInstanceOf[js.Any], s2.asInstanceOf[js.Any], costIns.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def levenshtein(s1: Unit, s2: Any, costIns: Any, costRep: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("levenshtein")(s1.asInstanceOf[js.Any], s2.asInstanceOf[js.Any], costIns.asInstanceOf[js.Any], costRep.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def levenshtein(s1: Unit, s2: Any, costIns: Any, costRep: Any, costDel: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("levenshtein")(s1.asInstanceOf[js.Any], s2.asInstanceOf[js.Any], costIns.asInstanceOf[js.Any], costRep.asInstanceOf[js.Any], costDel.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def levenshtein(s1: Unit, s2: Any, costIns: Any, costRep: Unit, costDel: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("levenshtein")(s1.asInstanceOf[js.Any], s2.asInstanceOf[js.Any], costIns.asInstanceOf[js.Any], costRep.asInstanceOf[js.Any], costDel.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def levenshtein(s1: Unit, s2: Any, costIns: Unit, costRep: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("levenshtein")(s1.asInstanceOf[js.Any], s2.asInstanceOf[js.Any], costIns.asInstanceOf[js.Any], costRep.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def levenshtein(s1: Unit, s2: Any, costIns: Unit, costRep: Any, costDel: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("levenshtein")(s1.asInstanceOf[js.Any], s2.asInstanceOf[js.Any], costIns.asInstanceOf[js.Any], costRep.asInstanceOf[js.Any], costDel.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def levenshtein(s1: Unit, s2: Any, costIns: Unit, costRep: Unit, costDel: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("levenshtein")(s1.asInstanceOf[js.Any], s2.asInstanceOf[js.Any], costIns.asInstanceOf[js.Any], costRep.asInstanceOf[js.Any], costDel.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def levenshtein(s1: Unit, s2: Unit, costIns: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("levenshtein")(s1.asInstanceOf[js.Any], s2.asInstanceOf[js.Any], costIns.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def levenshtein(s1: Unit, s2: Unit, costIns: Any, costRep: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("levenshtein")(s1.asInstanceOf[js.Any], s2.asInstanceOf[js.Any], costIns.asInstanceOf[js.Any], costRep.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def levenshtein(s1: Unit, s2: Unit, costIns: Any, costRep: Any, costDel: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("levenshtein")(s1.asInstanceOf[js.Any], s2.asInstanceOf[js.Any], costIns.asInstanceOf[js.Any], costRep.asInstanceOf[js.Any], costDel.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def levenshtein(s1: Unit, s2: Unit, costIns: Any, costRep: Unit, costDel: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("levenshtein")(s1.asInstanceOf[js.Any], s2.asInstanceOf[js.Any], costIns.asInstanceOf[js.Any], costRep.asInstanceOf[js.Any], costDel.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def levenshtein(s1: Unit, s2: Unit, costIns: Unit, costRep: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("levenshtein")(s1.asInstanceOf[js.Any], s2.asInstanceOf[js.Any], costIns.asInstanceOf[js.Any], costRep.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def levenshtein(s1: Unit, s2: Unit, costIns: Unit, costRep: Any, costDel: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("levenshtein")(s1.asInstanceOf[js.Any], s2.asInstanceOf[js.Any], costIns.asInstanceOf[js.Any], costRep.asInstanceOf[js.Any], costDel.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def levenshtein(s1: Unit, s2: Unit, costIns: Unit, costRep: Unit, costDel: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("levenshtein")(s1.asInstanceOf[js.Any], s2.asInstanceOf[js.Any], costIns.asInstanceOf[js.Any], costRep.asInstanceOf[js.Any], costDel.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def localeconv(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("localeconv")().asInstanceOf[Any]
  
  inline def ltrim(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("ltrim")().asInstanceOf[Any]
  inline def ltrim(str: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("ltrim")(str.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def ltrim(str: Any, charlist: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("ltrim")(str.asInstanceOf[js.Any], charlist.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def ltrim(str: Unit, charlist: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("ltrim")(str.asInstanceOf[js.Any], charlist.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def md5(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("md5")().asInstanceOf[Any]
  inline def md5(str: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("md5")(str.asInstanceOf[js.Any]).asInstanceOf[Any]
  
  inline def md5File(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("md5_file")().asInstanceOf[Any]
  inline def md5File(str_filename: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("md5_file")(str_filename.asInstanceOf[js.Any]).asInstanceOf[Any]
  
  inline def metaphone(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("metaphone")().asInstanceOf[Any]
  inline def metaphone(word: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("metaphone")(word.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def metaphone(word: Any, maxPhonemes: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("metaphone")(word.asInstanceOf[js.Any], maxPhonemes.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def metaphone(word: Unit, maxPhonemes: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("metaphone")(word.asInstanceOf[js.Any], maxPhonemes.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def moneyFormat(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("money_format")().asInstanceOf[Any]
  inline def moneyFormat(format: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("money_format")(format.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def moneyFormat(format: Any, number: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("money_format")(format.asInstanceOf[js.Any], number.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def moneyFormat(format: Unit, number: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("money_format")(format.asInstanceOf[js.Any], number.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def nl2br(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("nl2br")().asInstanceOf[Any]
  inline def nl2br(str: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("nl2br")(str.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def nl2br(str: Any, isXhtml: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("nl2br")(str.asInstanceOf[js.Any], isXhtml.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def nl2br(str: Unit, isXhtml: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("nl2br")(str.asInstanceOf[js.Any], isXhtml.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def nlLanginfo(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("nl_langinfo")().asInstanceOf[Any]
  inline def nlLanginfo(item: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("nl_langinfo")(item.asInstanceOf[js.Any]).asInstanceOf[Any]
  
  inline def numberFormat(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("number_format")().asInstanceOf[Any]
  inline def numberFormat(number: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("number_format")(number.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def numberFormat(number: Any, decimals: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("number_format")(number.asInstanceOf[js.Any], decimals.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def numberFormat(number: Any, decimals: Any, decPoint: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("number_format")(number.asInstanceOf[js.Any], decimals.asInstanceOf[js.Any], decPoint.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def numberFormat(number: Any, decimals: Any, decPoint: Any, thousandsSep: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("number_format")(number.asInstanceOf[js.Any], decimals.asInstanceOf[js.Any], decPoint.asInstanceOf[js.Any], thousandsSep.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def numberFormat(number: Any, decimals: Any, decPoint: Unit, thousandsSep: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("number_format")(number.asInstanceOf[js.Any], decimals.asInstanceOf[js.Any], decPoint.asInstanceOf[js.Any], thousandsSep.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def numberFormat(number: Any, decimals: Unit, decPoint: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("number_format")(number.asInstanceOf[js.Any], decimals.asInstanceOf[js.Any], decPoint.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def numberFormat(number: Any, decimals: Unit, decPoint: Any, thousandsSep: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("number_format")(number.asInstanceOf[js.Any], decimals.asInstanceOf[js.Any], decPoint.asInstanceOf[js.Any], thousandsSep.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def numberFormat(number: Any, decimals: Unit, decPoint: Unit, thousandsSep: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("number_format")(number.asInstanceOf[js.Any], decimals.asInstanceOf[js.Any], decPoint.asInstanceOf[js.Any], thousandsSep.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def numberFormat(number: Unit, decimals: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("number_format")(number.asInstanceOf[js.Any], decimals.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def numberFormat(number: Unit, decimals: Any, decPoint: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("number_format")(number.asInstanceOf[js.Any], decimals.asInstanceOf[js.Any], decPoint.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def numberFormat(number: Unit, decimals: Any, decPoint: Any, thousandsSep: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("number_format")(number.asInstanceOf[js.Any], decimals.asInstanceOf[js.Any], decPoint.asInstanceOf[js.Any], thousandsSep.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def numberFormat(number: Unit, decimals: Any, decPoint: Unit, thousandsSep: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("number_format")(number.asInstanceOf[js.Any], decimals.asInstanceOf[js.Any], decPoint.asInstanceOf[js.Any], thousandsSep.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def numberFormat(number: Unit, decimals: Unit, decPoint: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("number_format")(number.asInstanceOf[js.Any], decimals.asInstanceOf[js.Any], decPoint.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def numberFormat(number: Unit, decimals: Unit, decPoint: Any, thousandsSep: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("number_format")(number.asInstanceOf[js.Any], decimals.asInstanceOf[js.Any], decPoint.asInstanceOf[js.Any], thousandsSep.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def numberFormat(number: Unit, decimals: Unit, decPoint: Unit, thousandsSep: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("number_format")(number.asInstanceOf[js.Any], decimals.asInstanceOf[js.Any], decPoint.asInstanceOf[js.Any], thousandsSep.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def ord(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("ord")().asInstanceOf[Any]
  inline def ord(string: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("ord")(string.asInstanceOf[js.Any]).asInstanceOf[Any]
  
  inline def parseStr(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("parse_str")().asInstanceOf[Any]
  inline def parseStr(str: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("parse_str")(str.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def parseStr(str: Any, array: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("parse_str")(str.asInstanceOf[js.Any], array.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def parseStr(str: Unit, array: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("parse_str")(str.asInstanceOf[js.Any], array.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def printf(args: Any*): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("printf")(args.asInstanceOf[Seq[js.Any]]*).asInstanceOf[Any]
  
  inline def quotedPrintableDecode(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("quoted_printable_decode")().asInstanceOf[Any]
  inline def quotedPrintableDecode(str: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("quoted_printable_decode")(str.asInstanceOf[js.Any]).asInstanceOf[Any]
  
  inline def quotedPrintableEncode(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("quoted_printable_encode")().asInstanceOf[Any]
  inline def quotedPrintableEncode(str: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("quoted_printable_encode")(str.asInstanceOf[js.Any]).asInstanceOf[Any]
  
  inline def quotemeta(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("quotemeta")().asInstanceOf[Any]
  inline def quotemeta(str: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("quotemeta")(str.asInstanceOf[js.Any]).asInstanceOf[Any]
  
  inline def rtrim(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("rtrim")().asInstanceOf[Any]
  inline def rtrim(str: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("rtrim")(str.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def rtrim(str: Any, charlist: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("rtrim")(str.asInstanceOf[js.Any], charlist.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def rtrim(str: Unit, charlist: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("rtrim")(str.asInstanceOf[js.Any], charlist.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def setlocale(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("setlocale")().asInstanceOf[Any]
  inline def setlocale(category: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("setlocale")(category.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def setlocale(category: Any, locale: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("setlocale")(category.asInstanceOf[js.Any], locale.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def setlocale(category: Unit, locale: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("setlocale")(category.asInstanceOf[js.Any], locale.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def sha1(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("sha1")().asInstanceOf[Any]
  inline def sha1(str: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("sha1")(str.asInstanceOf[js.Any]).asInstanceOf[Any]
  
  inline def sha1File(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("sha1_file")().asInstanceOf[Any]
  inline def sha1File(str_filename: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("sha1_file")(str_filename.asInstanceOf[js.Any]).asInstanceOf[Any]
  
  inline def similarText(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("similar_text")().asInstanceOf[Any]
  inline def similarText(first: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("similar_text")(first.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def similarText(first: Any, second: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("similar_text")(first.asInstanceOf[js.Any], second.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def similarText(first: Any, second: Any, percent: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("similar_text")(first.asInstanceOf[js.Any], second.asInstanceOf[js.Any], percent.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def similarText(first: Any, second: Unit, percent: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("similar_text")(first.asInstanceOf[js.Any], second.asInstanceOf[js.Any], percent.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def similarText(first: Unit, second: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("similar_text")(first.asInstanceOf[js.Any], second.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def similarText(first: Unit, second: Any, percent: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("similar_text")(first.asInstanceOf[js.Any], second.asInstanceOf[js.Any], percent.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def similarText(first: Unit, second: Unit, percent: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("similar_text")(first.asInstanceOf[js.Any], second.asInstanceOf[js.Any], percent.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def soundex(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("soundex")().asInstanceOf[Any]
  inline def soundex(str: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("soundex")(str.asInstanceOf[js.Any]).asInstanceOf[Any]
  
  inline def split(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("split")().asInstanceOf[Any]
  inline def split(delimiter: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("split")(delimiter.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def split(delimiter: Any, string: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("split")(delimiter.asInstanceOf[js.Any], string.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def split(delimiter: Unit, string: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("split")(delimiter.asInstanceOf[js.Any], string.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def sprintf(args: Any*): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("sprintf")(args.asInstanceOf[Seq[js.Any]]*).asInstanceOf[Any]
  
  inline def sscanf(args: Any*): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("sscanf")(args.asInstanceOf[Seq[js.Any]]*).asInstanceOf[Any]
  
  inline def strGetcsv(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("str_getcsv")().asInstanceOf[Any]
  inline def strGetcsv(input: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("str_getcsv")(input.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def strGetcsv(input: Any, delimiter: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_getcsv")(input.asInstanceOf[js.Any], delimiter.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strGetcsv(input: Any, delimiter: Any, enclosure: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_getcsv")(input.asInstanceOf[js.Any], delimiter.asInstanceOf[js.Any], enclosure.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strGetcsv(input: Any, delimiter: Any, enclosure: Any, escape: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_getcsv")(input.asInstanceOf[js.Any], delimiter.asInstanceOf[js.Any], enclosure.asInstanceOf[js.Any], escape.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strGetcsv(input: Any, delimiter: Any, enclosure: Unit, escape: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_getcsv")(input.asInstanceOf[js.Any], delimiter.asInstanceOf[js.Any], enclosure.asInstanceOf[js.Any], escape.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strGetcsv(input: Any, delimiter: Unit, enclosure: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_getcsv")(input.asInstanceOf[js.Any], delimiter.asInstanceOf[js.Any], enclosure.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strGetcsv(input: Any, delimiter: Unit, enclosure: Any, escape: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_getcsv")(input.asInstanceOf[js.Any], delimiter.asInstanceOf[js.Any], enclosure.asInstanceOf[js.Any], escape.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strGetcsv(input: Any, delimiter: Unit, enclosure: Unit, escape: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_getcsv")(input.asInstanceOf[js.Any], delimiter.asInstanceOf[js.Any], enclosure.asInstanceOf[js.Any], escape.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strGetcsv(input: Unit, delimiter: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_getcsv")(input.asInstanceOf[js.Any], delimiter.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strGetcsv(input: Unit, delimiter: Any, enclosure: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_getcsv")(input.asInstanceOf[js.Any], delimiter.asInstanceOf[js.Any], enclosure.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strGetcsv(input: Unit, delimiter: Any, enclosure: Any, escape: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_getcsv")(input.asInstanceOf[js.Any], delimiter.asInstanceOf[js.Any], enclosure.asInstanceOf[js.Any], escape.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strGetcsv(input: Unit, delimiter: Any, enclosure: Unit, escape: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_getcsv")(input.asInstanceOf[js.Any], delimiter.asInstanceOf[js.Any], enclosure.asInstanceOf[js.Any], escape.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strGetcsv(input: Unit, delimiter: Unit, enclosure: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_getcsv")(input.asInstanceOf[js.Any], delimiter.asInstanceOf[js.Any], enclosure.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strGetcsv(input: Unit, delimiter: Unit, enclosure: Any, escape: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_getcsv")(input.asInstanceOf[js.Any], delimiter.asInstanceOf[js.Any], enclosure.asInstanceOf[js.Any], escape.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strGetcsv(input: Unit, delimiter: Unit, enclosure: Unit, escape: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_getcsv")(input.asInstanceOf[js.Any], delimiter.asInstanceOf[js.Any], enclosure.asInstanceOf[js.Any], escape.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def strIreplace(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("str_ireplace")().asInstanceOf[Any]
  inline def strIreplace(search: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("str_ireplace")(search.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def strIreplace(search: Any, replace: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_ireplace")(search.asInstanceOf[js.Any], replace.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strIreplace(search: Any, replace: Any, subject: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_ireplace")(search.asInstanceOf[js.Any], replace.asInstanceOf[js.Any], subject.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strIreplace(search: Any, replace: Any, subject: Any, countObj: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_ireplace")(search.asInstanceOf[js.Any], replace.asInstanceOf[js.Any], subject.asInstanceOf[js.Any], countObj.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strIreplace(search: Any, replace: Any, subject: Unit, countObj: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_ireplace")(search.asInstanceOf[js.Any], replace.asInstanceOf[js.Any], subject.asInstanceOf[js.Any], countObj.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strIreplace(search: Any, replace: Unit, subject: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_ireplace")(search.asInstanceOf[js.Any], replace.asInstanceOf[js.Any], subject.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strIreplace(search: Any, replace: Unit, subject: Any, countObj: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_ireplace")(search.asInstanceOf[js.Any], replace.asInstanceOf[js.Any], subject.asInstanceOf[js.Any], countObj.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strIreplace(search: Any, replace: Unit, subject: Unit, countObj: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_ireplace")(search.asInstanceOf[js.Any], replace.asInstanceOf[js.Any], subject.asInstanceOf[js.Any], countObj.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strIreplace(search: Unit, replace: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_ireplace")(search.asInstanceOf[js.Any], replace.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strIreplace(search: Unit, replace: Any, subject: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_ireplace")(search.asInstanceOf[js.Any], replace.asInstanceOf[js.Any], subject.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strIreplace(search: Unit, replace: Any, subject: Any, countObj: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_ireplace")(search.asInstanceOf[js.Any], replace.asInstanceOf[js.Any], subject.asInstanceOf[js.Any], countObj.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strIreplace(search: Unit, replace: Any, subject: Unit, countObj: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_ireplace")(search.asInstanceOf[js.Any], replace.asInstanceOf[js.Any], subject.asInstanceOf[js.Any], countObj.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strIreplace(search: Unit, replace: Unit, subject: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_ireplace")(search.asInstanceOf[js.Any], replace.asInstanceOf[js.Any], subject.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strIreplace(search: Unit, replace: Unit, subject: Any, countObj: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_ireplace")(search.asInstanceOf[js.Any], replace.asInstanceOf[js.Any], subject.asInstanceOf[js.Any], countObj.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strIreplace(search: Unit, replace: Unit, subject: Unit, countObj: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_ireplace")(search.asInstanceOf[js.Any], replace.asInstanceOf[js.Any], subject.asInstanceOf[js.Any], countObj.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def strPad(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("str_pad")().asInstanceOf[Any]
  inline def strPad(input: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("str_pad")(input.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def strPad(input: Any, padLength: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_pad")(input.asInstanceOf[js.Any], padLength.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strPad(input: Any, padLength: Any, padString: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_pad")(input.asInstanceOf[js.Any], padLength.asInstanceOf[js.Any], padString.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strPad(input: Any, padLength: Any, padString: Any, padType: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_pad")(input.asInstanceOf[js.Any], padLength.asInstanceOf[js.Any], padString.asInstanceOf[js.Any], padType.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strPad(input: Any, padLength: Any, padString: Unit, padType: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_pad")(input.asInstanceOf[js.Any], padLength.asInstanceOf[js.Any], padString.asInstanceOf[js.Any], padType.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strPad(input: Any, padLength: Unit, padString: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_pad")(input.asInstanceOf[js.Any], padLength.asInstanceOf[js.Any], padString.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strPad(input: Any, padLength: Unit, padString: Any, padType: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_pad")(input.asInstanceOf[js.Any], padLength.asInstanceOf[js.Any], padString.asInstanceOf[js.Any], padType.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strPad(input: Any, padLength: Unit, padString: Unit, padType: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_pad")(input.asInstanceOf[js.Any], padLength.asInstanceOf[js.Any], padString.asInstanceOf[js.Any], padType.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strPad(input: Unit, padLength: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_pad")(input.asInstanceOf[js.Any], padLength.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strPad(input: Unit, padLength: Any, padString: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_pad")(input.asInstanceOf[js.Any], padLength.asInstanceOf[js.Any], padString.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strPad(input: Unit, padLength: Any, padString: Any, padType: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_pad")(input.asInstanceOf[js.Any], padLength.asInstanceOf[js.Any], padString.asInstanceOf[js.Any], padType.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strPad(input: Unit, padLength: Any, padString: Unit, padType: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_pad")(input.asInstanceOf[js.Any], padLength.asInstanceOf[js.Any], padString.asInstanceOf[js.Any], padType.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strPad(input: Unit, padLength: Unit, padString: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_pad")(input.asInstanceOf[js.Any], padLength.asInstanceOf[js.Any], padString.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strPad(input: Unit, padLength: Unit, padString: Any, padType: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_pad")(input.asInstanceOf[js.Any], padLength.asInstanceOf[js.Any], padString.asInstanceOf[js.Any], padType.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strPad(input: Unit, padLength: Unit, padString: Unit, padType: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_pad")(input.asInstanceOf[js.Any], padLength.asInstanceOf[js.Any], padString.asInstanceOf[js.Any], padType.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def strRepeat(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("str_repeat")().asInstanceOf[Any]
  inline def strRepeat(input: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("str_repeat")(input.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def strRepeat(input: Any, multiplier: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_repeat")(input.asInstanceOf[js.Any], multiplier.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strRepeat(input: Unit, multiplier: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_repeat")(input.asInstanceOf[js.Any], multiplier.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def strReplace(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("str_replace")().asInstanceOf[Any]
  inline def strReplace(search: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("str_replace")(search.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def strReplace(search: Any, replace: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_replace")(search.asInstanceOf[js.Any], replace.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strReplace(search: Any, replace: Any, subject: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_replace")(search.asInstanceOf[js.Any], replace.asInstanceOf[js.Any], subject.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strReplace(search: Any, replace: Any, subject: Any, countObj: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_replace")(search.asInstanceOf[js.Any], replace.asInstanceOf[js.Any], subject.asInstanceOf[js.Any], countObj.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strReplace(search: Any, replace: Any, subject: Unit, countObj: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_replace")(search.asInstanceOf[js.Any], replace.asInstanceOf[js.Any], subject.asInstanceOf[js.Any], countObj.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strReplace(search: Any, replace: Unit, subject: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_replace")(search.asInstanceOf[js.Any], replace.asInstanceOf[js.Any], subject.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strReplace(search: Any, replace: Unit, subject: Any, countObj: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_replace")(search.asInstanceOf[js.Any], replace.asInstanceOf[js.Any], subject.asInstanceOf[js.Any], countObj.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strReplace(search: Any, replace: Unit, subject: Unit, countObj: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_replace")(search.asInstanceOf[js.Any], replace.asInstanceOf[js.Any], subject.asInstanceOf[js.Any], countObj.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strReplace(search: Unit, replace: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_replace")(search.asInstanceOf[js.Any], replace.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strReplace(search: Unit, replace: Any, subject: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_replace")(search.asInstanceOf[js.Any], replace.asInstanceOf[js.Any], subject.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strReplace(search: Unit, replace: Any, subject: Any, countObj: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_replace")(search.asInstanceOf[js.Any], replace.asInstanceOf[js.Any], subject.asInstanceOf[js.Any], countObj.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strReplace(search: Unit, replace: Any, subject: Unit, countObj: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_replace")(search.asInstanceOf[js.Any], replace.asInstanceOf[js.Any], subject.asInstanceOf[js.Any], countObj.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strReplace(search: Unit, replace: Unit, subject: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_replace")(search.asInstanceOf[js.Any], replace.asInstanceOf[js.Any], subject.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strReplace(search: Unit, replace: Unit, subject: Any, countObj: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_replace")(search.asInstanceOf[js.Any], replace.asInstanceOf[js.Any], subject.asInstanceOf[js.Any], countObj.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strReplace(search: Unit, replace: Unit, subject: Unit, countObj: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_replace")(search.asInstanceOf[js.Any], replace.asInstanceOf[js.Any], subject.asInstanceOf[js.Any], countObj.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def strRot13(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("str_rot13")().asInstanceOf[Any]
  inline def strRot13(str: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("str_rot13")(str.asInstanceOf[js.Any]).asInstanceOf[Any]
  
  inline def strShuffle(args: Any*): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("str_shuffle")(args.asInstanceOf[Seq[js.Any]]*).asInstanceOf[Any]
  
  inline def strSplit(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("str_split")().asInstanceOf[Any]
  inline def strSplit(string: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("str_split")(string.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def strSplit(string: Any, splitLength: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_split")(string.asInstanceOf[js.Any], splitLength.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strSplit(string: Unit, splitLength: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_split")(string.asInstanceOf[js.Any], splitLength.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def strWordCount(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("str_word_count")().asInstanceOf[Any]
  inline def strWordCount(str: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("str_word_count")(str.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def strWordCount(str: Any, format: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_word_count")(str.asInstanceOf[js.Any], format.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strWordCount(str: Any, format: Any, charlist: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_word_count")(str.asInstanceOf[js.Any], format.asInstanceOf[js.Any], charlist.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strWordCount(str: Any, format: Unit, charlist: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_word_count")(str.asInstanceOf[js.Any], format.asInstanceOf[js.Any], charlist.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strWordCount(str: Unit, format: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_word_count")(str.asInstanceOf[js.Any], format.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strWordCount(str: Unit, format: Any, charlist: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_word_count")(str.asInstanceOf[js.Any], format.asInstanceOf[js.Any], charlist.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strWordCount(str: Unit, format: Unit, charlist: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("str_word_count")(str.asInstanceOf[js.Any], format.asInstanceOf[js.Any], charlist.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def strcasecmp(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("strcasecmp")().asInstanceOf[Any]
  inline def strcasecmp(fString1: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("strcasecmp")(fString1.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def strcasecmp(fString1: Any, fString2: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strcasecmp")(fString1.asInstanceOf[js.Any], fString2.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strcasecmp(fString1: Unit, fString2: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strcasecmp")(fString1.asInstanceOf[js.Any], fString2.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def strchr(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("strchr")().asInstanceOf[Any]
  inline def strchr(haystack: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("strchr")(haystack.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def strchr(haystack: Any, needle: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strchr")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strchr(haystack: Any, needle: Any, bool: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strchr")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any], bool.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strchr(haystack: Any, needle: Unit, bool: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strchr")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any], bool.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strchr(haystack: Unit, needle: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strchr")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strchr(haystack: Unit, needle: Any, bool: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strchr")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any], bool.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strchr(haystack: Unit, needle: Unit, bool: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strchr")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any], bool.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def strcmp(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("strcmp")().asInstanceOf[Any]
  inline def strcmp(str1: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("strcmp")(str1.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def strcmp(str1: Any, str2: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strcmp")(str1.asInstanceOf[js.Any], str2.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strcmp(str1: Unit, str2: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strcmp")(str1.asInstanceOf[js.Any], str2.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def strcoll(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("strcoll")().asInstanceOf[Any]
  inline def strcoll(str1: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("strcoll")(str1.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def strcoll(str1: Any, str2: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strcoll")(str1.asInstanceOf[js.Any], str2.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strcoll(str1: Unit, str2: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strcoll")(str1.asInstanceOf[js.Any], str2.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def strcspn(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("strcspn")().asInstanceOf[Any]
  inline def strcspn(str: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("strcspn")(str.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def strcspn(str: Any, mask: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strcspn")(str.asInstanceOf[js.Any], mask.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strcspn(str: Any, mask: Any, start: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strcspn")(str.asInstanceOf[js.Any], mask.asInstanceOf[js.Any], start.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strcspn(str: Any, mask: Any, start: Any, length: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strcspn")(str.asInstanceOf[js.Any], mask.asInstanceOf[js.Any], start.asInstanceOf[js.Any], length.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strcspn(str: Any, mask: Any, start: Unit, length: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strcspn")(str.asInstanceOf[js.Any], mask.asInstanceOf[js.Any], start.asInstanceOf[js.Any], length.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strcspn(str: Any, mask: Unit, start: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strcspn")(str.asInstanceOf[js.Any], mask.asInstanceOf[js.Any], start.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strcspn(str: Any, mask: Unit, start: Any, length: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strcspn")(str.asInstanceOf[js.Any], mask.asInstanceOf[js.Any], start.asInstanceOf[js.Any], length.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strcspn(str: Any, mask: Unit, start: Unit, length: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strcspn")(str.asInstanceOf[js.Any], mask.asInstanceOf[js.Any], start.asInstanceOf[js.Any], length.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strcspn(str: Unit, mask: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strcspn")(str.asInstanceOf[js.Any], mask.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strcspn(str: Unit, mask: Any, start: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strcspn")(str.asInstanceOf[js.Any], mask.asInstanceOf[js.Any], start.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strcspn(str: Unit, mask: Any, start: Any, length: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strcspn")(str.asInstanceOf[js.Any], mask.asInstanceOf[js.Any], start.asInstanceOf[js.Any], length.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strcspn(str: Unit, mask: Any, start: Unit, length: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strcspn")(str.asInstanceOf[js.Any], mask.asInstanceOf[js.Any], start.asInstanceOf[js.Any], length.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strcspn(str: Unit, mask: Unit, start: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strcspn")(str.asInstanceOf[js.Any], mask.asInstanceOf[js.Any], start.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strcspn(str: Unit, mask: Unit, start: Any, length: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strcspn")(str.asInstanceOf[js.Any], mask.asInstanceOf[js.Any], start.asInstanceOf[js.Any], length.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strcspn(str: Unit, mask: Unit, start: Unit, length: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strcspn")(str.asInstanceOf[js.Any], mask.asInstanceOf[js.Any], start.asInstanceOf[js.Any], length.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def stripTags(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("strip_tags")().asInstanceOf[Any]
  inline def stripTags(input: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("strip_tags")(input.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def stripTags(input: Any, allowed: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strip_tags")(input.asInstanceOf[js.Any], allowed.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def stripTags(input: Unit, allowed: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strip_tags")(input.asInstanceOf[js.Any], allowed.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def stripos(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("stripos")().asInstanceOf[Any]
  inline def stripos(fHaystack: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("stripos")(fHaystack.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def stripos(fHaystack: Any, fNeedle: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("stripos")(fHaystack.asInstanceOf[js.Any], fNeedle.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def stripos(fHaystack: Any, fNeedle: Any, fOffset: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("stripos")(fHaystack.asInstanceOf[js.Any], fNeedle.asInstanceOf[js.Any], fOffset.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def stripos(fHaystack: Any, fNeedle: Unit, fOffset: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("stripos")(fHaystack.asInstanceOf[js.Any], fNeedle.asInstanceOf[js.Any], fOffset.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def stripos(fHaystack: Unit, fNeedle: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("stripos")(fHaystack.asInstanceOf[js.Any], fNeedle.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def stripos(fHaystack: Unit, fNeedle: Any, fOffset: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("stripos")(fHaystack.asInstanceOf[js.Any], fNeedle.asInstanceOf[js.Any], fOffset.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def stripos(fHaystack: Unit, fNeedle: Unit, fOffset: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("stripos")(fHaystack.asInstanceOf[js.Any], fNeedle.asInstanceOf[js.Any], fOffset.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def stripslashes(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("stripslashes")().asInstanceOf[Any]
  inline def stripslashes(str: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("stripslashes")(str.asInstanceOf[js.Any]).asInstanceOf[Any]
  
  inline def stristr(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("stristr")().asInstanceOf[Any]
  inline def stristr(haystack: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("stristr")(haystack.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def stristr(haystack: Any, needle: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("stristr")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def stristr(haystack: Any, needle: Any, bool: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("stristr")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any], bool.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def stristr(haystack: Any, needle: Unit, bool: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("stristr")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any], bool.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def stristr(haystack: Unit, needle: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("stristr")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def stristr(haystack: Unit, needle: Any, bool: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("stristr")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any], bool.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def stristr(haystack: Unit, needle: Unit, bool: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("stristr")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any], bool.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def strlen(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("strlen")().asInstanceOf[Any]
  inline def strlen(string: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("strlen")(string.asInstanceOf[js.Any]).asInstanceOf[Any]
  
  inline def strnatcasecmp(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("strnatcasecmp")().asInstanceOf[Any]
  inline def strnatcasecmp(str1: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("strnatcasecmp")(str1.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def strnatcasecmp(str1: Any, str2: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strnatcasecmp")(str1.asInstanceOf[js.Any], str2.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strnatcasecmp(str1: Unit, str2: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strnatcasecmp")(str1.asInstanceOf[js.Any], str2.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def strnatcmp(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("strnatcmp")().asInstanceOf[Any]
  inline def strnatcmp(fString1: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("strnatcmp")(fString1.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def strnatcmp(fString1: Any, fString2: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strnatcmp")(fString1.asInstanceOf[js.Any], fString2.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strnatcmp(fString1: Any, fString2: Any, fVersion: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strnatcmp")(fString1.asInstanceOf[js.Any], fString2.asInstanceOf[js.Any], fVersion.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strnatcmp(fString1: Any, fString2: Unit, fVersion: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strnatcmp")(fString1.asInstanceOf[js.Any], fString2.asInstanceOf[js.Any], fVersion.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strnatcmp(fString1: Unit, fString2: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strnatcmp")(fString1.asInstanceOf[js.Any], fString2.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strnatcmp(fString1: Unit, fString2: Any, fVersion: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strnatcmp")(fString1.asInstanceOf[js.Any], fString2.asInstanceOf[js.Any], fVersion.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strnatcmp(fString1: Unit, fString2: Unit, fVersion: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strnatcmp")(fString1.asInstanceOf[js.Any], fString2.asInstanceOf[js.Any], fVersion.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def strncasecmp(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("strncasecmp")().asInstanceOf[Any]
  inline def strncasecmp(argStr1: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("strncasecmp")(argStr1.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def strncasecmp(argStr1: Any, argStr2: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strncasecmp")(argStr1.asInstanceOf[js.Any], argStr2.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strncasecmp(argStr1: Any, argStr2: Any, len: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strncasecmp")(argStr1.asInstanceOf[js.Any], argStr2.asInstanceOf[js.Any], len.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strncasecmp(argStr1: Any, argStr2: Unit, len: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strncasecmp")(argStr1.asInstanceOf[js.Any], argStr2.asInstanceOf[js.Any], len.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strncasecmp(argStr1: Unit, argStr2: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strncasecmp")(argStr1.asInstanceOf[js.Any], argStr2.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strncasecmp(argStr1: Unit, argStr2: Any, len: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strncasecmp")(argStr1.asInstanceOf[js.Any], argStr2.asInstanceOf[js.Any], len.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strncasecmp(argStr1: Unit, argStr2: Unit, len: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strncasecmp")(argStr1.asInstanceOf[js.Any], argStr2.asInstanceOf[js.Any], len.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def strncmp(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("strncmp")().asInstanceOf[Any]
  inline def strncmp(str1: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("strncmp")(str1.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def strncmp(str1: Any, str2: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strncmp")(str1.asInstanceOf[js.Any], str2.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strncmp(str1: Any, str2: Any, lgth: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strncmp")(str1.asInstanceOf[js.Any], str2.asInstanceOf[js.Any], lgth.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strncmp(str1: Any, str2: Unit, lgth: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strncmp")(str1.asInstanceOf[js.Any], str2.asInstanceOf[js.Any], lgth.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strncmp(str1: Unit, str2: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strncmp")(str1.asInstanceOf[js.Any], str2.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strncmp(str1: Unit, str2: Any, lgth: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strncmp")(str1.asInstanceOf[js.Any], str2.asInstanceOf[js.Any], lgth.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strncmp(str1: Unit, str2: Unit, lgth: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strncmp")(str1.asInstanceOf[js.Any], str2.asInstanceOf[js.Any], lgth.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def strpbrk(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("strpbrk")().asInstanceOf[Any]
  inline def strpbrk(haystack: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("strpbrk")(haystack.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def strpbrk(haystack: Any, charList: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strpbrk")(haystack.asInstanceOf[js.Any], charList.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strpbrk(haystack: Unit, charList: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strpbrk")(haystack.asInstanceOf[js.Any], charList.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def strpos(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("strpos")().asInstanceOf[Any]
  inline def strpos(haystack: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("strpos")(haystack.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def strpos(haystack: Any, needle: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strpos")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strpos(haystack: Any, needle: Any, offset: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strpos")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any], offset.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strpos(haystack: Any, needle: Unit, offset: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strpos")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any], offset.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strpos(haystack: Unit, needle: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strpos")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strpos(haystack: Unit, needle: Any, offset: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strpos")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any], offset.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strpos(haystack: Unit, needle: Unit, offset: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strpos")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any], offset.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def strrchr(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("strrchr")().asInstanceOf[Any]
  inline def strrchr(haystack: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("strrchr")(haystack.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def strrchr(haystack: Any, needle: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strrchr")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strrchr(haystack: Unit, needle: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strrchr")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def strrev(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("strrev")().asInstanceOf[Any]
  inline def strrev(string: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("strrev")(string.asInstanceOf[js.Any]).asInstanceOf[Any]
  
  inline def strripos(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("strripos")().asInstanceOf[Any]
  inline def strripos(haystack: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("strripos")(haystack.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def strripos(haystack: Any, needle: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strripos")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strripos(haystack: Any, needle: Any, offset: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strripos")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any], offset.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strripos(haystack: Any, needle: Unit, offset: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strripos")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any], offset.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strripos(haystack: Unit, needle: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strripos")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strripos(haystack: Unit, needle: Any, offset: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strripos")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any], offset.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strripos(haystack: Unit, needle: Unit, offset: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strripos")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any], offset.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def strrpos(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("strrpos")().asInstanceOf[Any]
  inline def strrpos(haystack: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("strrpos")(haystack.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def strrpos(haystack: Any, needle: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strrpos")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strrpos(haystack: Any, needle: Any, offset: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strrpos")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any], offset.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strrpos(haystack: Any, needle: Unit, offset: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strrpos")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any], offset.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strrpos(haystack: Unit, needle: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strrpos")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strrpos(haystack: Unit, needle: Any, offset: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strrpos")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any], offset.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strrpos(haystack: Unit, needle: Unit, offset: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strrpos")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any], offset.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def strspn(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("strspn")().asInstanceOf[Any]
  inline def strspn(str1: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("strspn")(str1.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def strspn(str1: Any, str2: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strspn")(str1.asInstanceOf[js.Any], str2.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strspn(str1: Any, str2: Any, start: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strspn")(str1.asInstanceOf[js.Any], str2.asInstanceOf[js.Any], start.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strspn(str1: Any, str2: Any, start: Any, lgth: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strspn")(str1.asInstanceOf[js.Any], str2.asInstanceOf[js.Any], start.asInstanceOf[js.Any], lgth.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strspn(str1: Any, str2: Any, start: Unit, lgth: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strspn")(str1.asInstanceOf[js.Any], str2.asInstanceOf[js.Any], start.asInstanceOf[js.Any], lgth.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strspn(str1: Any, str2: Unit, start: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strspn")(str1.asInstanceOf[js.Any], str2.asInstanceOf[js.Any], start.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strspn(str1: Any, str2: Unit, start: Any, lgth: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strspn")(str1.asInstanceOf[js.Any], str2.asInstanceOf[js.Any], start.asInstanceOf[js.Any], lgth.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strspn(str1: Any, str2: Unit, start: Unit, lgth: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strspn")(str1.asInstanceOf[js.Any], str2.asInstanceOf[js.Any], start.asInstanceOf[js.Any], lgth.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strspn(str1: Unit, str2: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strspn")(str1.asInstanceOf[js.Any], str2.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strspn(str1: Unit, str2: Any, start: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strspn")(str1.asInstanceOf[js.Any], str2.asInstanceOf[js.Any], start.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strspn(str1: Unit, str2: Any, start: Any, lgth: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strspn")(str1.asInstanceOf[js.Any], str2.asInstanceOf[js.Any], start.asInstanceOf[js.Any], lgth.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strspn(str1: Unit, str2: Any, start: Unit, lgth: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strspn")(str1.asInstanceOf[js.Any], str2.asInstanceOf[js.Any], start.asInstanceOf[js.Any], lgth.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strspn(str1: Unit, str2: Unit, start: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strspn")(str1.asInstanceOf[js.Any], str2.asInstanceOf[js.Any], start.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strspn(str1: Unit, str2: Unit, start: Any, lgth: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strspn")(str1.asInstanceOf[js.Any], str2.asInstanceOf[js.Any], start.asInstanceOf[js.Any], lgth.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strspn(str1: Unit, str2: Unit, start: Unit, lgth: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strspn")(str1.asInstanceOf[js.Any], str2.asInstanceOf[js.Any], start.asInstanceOf[js.Any], lgth.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def strstr(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("strstr")().asInstanceOf[Any]
  inline def strstr(haystack: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("strstr")(haystack.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def strstr(haystack: Any, needle: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strstr")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strstr(haystack: Any, needle: Any, bool: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strstr")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any], bool.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strstr(haystack: Any, needle: Unit, bool: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strstr")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any], bool.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strstr(haystack: Unit, needle: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strstr")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strstr(haystack: Unit, needle: Any, bool: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strstr")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any], bool.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strstr(haystack: Unit, needle: Unit, bool: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strstr")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any], bool.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def strtok(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("strtok")().asInstanceOf[Any]
  inline def strtok(str: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("strtok")(str.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def strtok(str: Any, tokens: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strtok")(str.asInstanceOf[js.Any], tokens.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strtok(str: Unit, tokens: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strtok")(str.asInstanceOf[js.Any], tokens.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def strtolower(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("strtolower")().asInstanceOf[Any]
  inline def strtolower(str: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("strtolower")(str.asInstanceOf[js.Any]).asInstanceOf[Any]
  
  inline def strtoupper(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("strtoupper")().asInstanceOf[Any]
  inline def strtoupper(str: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("strtoupper")(str.asInstanceOf[js.Any]).asInstanceOf[Any]
  
  inline def strtr(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("strtr")().asInstanceOf[Any]
  inline def strtr(str: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("strtr")(str.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def strtr(str: Any, trFrom: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strtr")(str.asInstanceOf[js.Any], trFrom.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strtr(str: Any, trFrom: Any, trTo: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strtr")(str.asInstanceOf[js.Any], trFrom.asInstanceOf[js.Any], trTo.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strtr(str: Any, trFrom: Unit, trTo: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strtr")(str.asInstanceOf[js.Any], trFrom.asInstanceOf[js.Any], trTo.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strtr(str: Unit, trFrom: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strtr")(str.asInstanceOf[js.Any], trFrom.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strtr(str: Unit, trFrom: Any, trTo: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strtr")(str.asInstanceOf[js.Any], trFrom.asInstanceOf[js.Any], trTo.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def strtr(str: Unit, trFrom: Unit, trTo: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("strtr")(str.asInstanceOf[js.Any], trFrom.asInstanceOf[js.Any], trTo.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def substr(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("substr")().asInstanceOf[Any]
  inline def substr(str: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("substr")(str.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def substr(str: Any, start: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr")(str.asInstanceOf[js.Any], start.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substr(str: Any, start: Any, len: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr")(str.asInstanceOf[js.Any], start.asInstanceOf[js.Any], len.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substr(str: Any, start: Unit, len: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr")(str.asInstanceOf[js.Any], start.asInstanceOf[js.Any], len.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substr(str: Unit, start: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr")(str.asInstanceOf[js.Any], start.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substr(str: Unit, start: Any, len: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr")(str.asInstanceOf[js.Any], start.asInstanceOf[js.Any], len.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substr(str: Unit, start: Unit, len: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr")(str.asInstanceOf[js.Any], start.asInstanceOf[js.Any], len.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def substrCompare(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("substr_compare")().asInstanceOf[Any]
  inline def substrCompare(mainStr: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("substr_compare")(mainStr.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def substrCompare(mainStr: Any, str: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_compare")(mainStr.asInstanceOf[js.Any], str.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrCompare(mainStr: Any, str: Any, offset: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_compare")(mainStr.asInstanceOf[js.Any], str.asInstanceOf[js.Any], offset.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrCompare(mainStr: Any, str: Any, offset: Any, length: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_compare")(mainStr.asInstanceOf[js.Any], str.asInstanceOf[js.Any], offset.asInstanceOf[js.Any], length.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrCompare(mainStr: Any, str: Any, offset: Any, length: Any, caseInsensitivity: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_compare")(mainStr.asInstanceOf[js.Any], str.asInstanceOf[js.Any], offset.asInstanceOf[js.Any], length.asInstanceOf[js.Any], caseInsensitivity.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrCompare(mainStr: Any, str: Any, offset: Any, length: Unit, caseInsensitivity: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_compare")(mainStr.asInstanceOf[js.Any], str.asInstanceOf[js.Any], offset.asInstanceOf[js.Any], length.asInstanceOf[js.Any], caseInsensitivity.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrCompare(mainStr: Any, str: Any, offset: Unit, length: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_compare")(mainStr.asInstanceOf[js.Any], str.asInstanceOf[js.Any], offset.asInstanceOf[js.Any], length.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrCompare(mainStr: Any, str: Any, offset: Unit, length: Any, caseInsensitivity: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_compare")(mainStr.asInstanceOf[js.Any], str.asInstanceOf[js.Any], offset.asInstanceOf[js.Any], length.asInstanceOf[js.Any], caseInsensitivity.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrCompare(mainStr: Any, str: Any, offset: Unit, length: Unit, caseInsensitivity: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_compare")(mainStr.asInstanceOf[js.Any], str.asInstanceOf[js.Any], offset.asInstanceOf[js.Any], length.asInstanceOf[js.Any], caseInsensitivity.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrCompare(mainStr: Any, str: Unit, offset: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_compare")(mainStr.asInstanceOf[js.Any], str.asInstanceOf[js.Any], offset.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrCompare(mainStr: Any, str: Unit, offset: Any, length: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_compare")(mainStr.asInstanceOf[js.Any], str.asInstanceOf[js.Any], offset.asInstanceOf[js.Any], length.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrCompare(mainStr: Any, str: Unit, offset: Any, length: Any, caseInsensitivity: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_compare")(mainStr.asInstanceOf[js.Any], str.asInstanceOf[js.Any], offset.asInstanceOf[js.Any], length.asInstanceOf[js.Any], caseInsensitivity.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrCompare(mainStr: Any, str: Unit, offset: Any, length: Unit, caseInsensitivity: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_compare")(mainStr.asInstanceOf[js.Any], str.asInstanceOf[js.Any], offset.asInstanceOf[js.Any], length.asInstanceOf[js.Any], caseInsensitivity.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrCompare(mainStr: Any, str: Unit, offset: Unit, length: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_compare")(mainStr.asInstanceOf[js.Any], str.asInstanceOf[js.Any], offset.asInstanceOf[js.Any], length.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrCompare(mainStr: Any, str: Unit, offset: Unit, length: Any, caseInsensitivity: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_compare")(mainStr.asInstanceOf[js.Any], str.asInstanceOf[js.Any], offset.asInstanceOf[js.Any], length.asInstanceOf[js.Any], caseInsensitivity.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrCompare(mainStr: Any, str: Unit, offset: Unit, length: Unit, caseInsensitivity: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_compare")(mainStr.asInstanceOf[js.Any], str.asInstanceOf[js.Any], offset.asInstanceOf[js.Any], length.asInstanceOf[js.Any], caseInsensitivity.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrCompare(mainStr: Unit, str: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_compare")(mainStr.asInstanceOf[js.Any], str.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrCompare(mainStr: Unit, str: Any, offset: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_compare")(mainStr.asInstanceOf[js.Any], str.asInstanceOf[js.Any], offset.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrCompare(mainStr: Unit, str: Any, offset: Any, length: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_compare")(mainStr.asInstanceOf[js.Any], str.asInstanceOf[js.Any], offset.asInstanceOf[js.Any], length.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrCompare(mainStr: Unit, str: Any, offset: Any, length: Any, caseInsensitivity: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_compare")(mainStr.asInstanceOf[js.Any], str.asInstanceOf[js.Any], offset.asInstanceOf[js.Any], length.asInstanceOf[js.Any], caseInsensitivity.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrCompare(mainStr: Unit, str: Any, offset: Any, length: Unit, caseInsensitivity: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_compare")(mainStr.asInstanceOf[js.Any], str.asInstanceOf[js.Any], offset.asInstanceOf[js.Any], length.asInstanceOf[js.Any], caseInsensitivity.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrCompare(mainStr: Unit, str: Any, offset: Unit, length: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_compare")(mainStr.asInstanceOf[js.Any], str.asInstanceOf[js.Any], offset.asInstanceOf[js.Any], length.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrCompare(mainStr: Unit, str: Any, offset: Unit, length: Any, caseInsensitivity: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_compare")(mainStr.asInstanceOf[js.Any], str.asInstanceOf[js.Any], offset.asInstanceOf[js.Any], length.asInstanceOf[js.Any], caseInsensitivity.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrCompare(mainStr: Unit, str: Any, offset: Unit, length: Unit, caseInsensitivity: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_compare")(mainStr.asInstanceOf[js.Any], str.asInstanceOf[js.Any], offset.asInstanceOf[js.Any], length.asInstanceOf[js.Any], caseInsensitivity.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrCompare(mainStr: Unit, str: Unit, offset: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_compare")(mainStr.asInstanceOf[js.Any], str.asInstanceOf[js.Any], offset.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrCompare(mainStr: Unit, str: Unit, offset: Any, length: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_compare")(mainStr.asInstanceOf[js.Any], str.asInstanceOf[js.Any], offset.asInstanceOf[js.Any], length.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrCompare(mainStr: Unit, str: Unit, offset: Any, length: Any, caseInsensitivity: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_compare")(mainStr.asInstanceOf[js.Any], str.asInstanceOf[js.Any], offset.asInstanceOf[js.Any], length.asInstanceOf[js.Any], caseInsensitivity.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrCompare(mainStr: Unit, str: Unit, offset: Any, length: Unit, caseInsensitivity: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_compare")(mainStr.asInstanceOf[js.Any], str.asInstanceOf[js.Any], offset.asInstanceOf[js.Any], length.asInstanceOf[js.Any], caseInsensitivity.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrCompare(mainStr: Unit, str: Unit, offset: Unit, length: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_compare")(mainStr.asInstanceOf[js.Any], str.asInstanceOf[js.Any], offset.asInstanceOf[js.Any], length.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrCompare(mainStr: Unit, str: Unit, offset: Unit, length: Any, caseInsensitivity: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_compare")(mainStr.asInstanceOf[js.Any], str.asInstanceOf[js.Any], offset.asInstanceOf[js.Any], length.asInstanceOf[js.Any], caseInsensitivity.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrCompare(mainStr: Unit, str: Unit, offset: Unit, length: Unit, caseInsensitivity: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_compare")(mainStr.asInstanceOf[js.Any], str.asInstanceOf[js.Any], offset.asInstanceOf[js.Any], length.asInstanceOf[js.Any], caseInsensitivity.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def substrCount(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("substr_count")().asInstanceOf[Any]
  inline def substrCount(haystack: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("substr_count")(haystack.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def substrCount(haystack: Any, needle: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_count")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrCount(haystack: Any, needle: Any, offset: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_count")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any], offset.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrCount(haystack: Any, needle: Any, offset: Any, length: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_count")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any], offset.asInstanceOf[js.Any], length.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrCount(haystack: Any, needle: Any, offset: Unit, length: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_count")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any], offset.asInstanceOf[js.Any], length.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrCount(haystack: Any, needle: Unit, offset: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_count")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any], offset.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrCount(haystack: Any, needle: Unit, offset: Any, length: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_count")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any], offset.asInstanceOf[js.Any], length.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrCount(haystack: Any, needle: Unit, offset: Unit, length: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_count")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any], offset.asInstanceOf[js.Any], length.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrCount(haystack: Unit, needle: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_count")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrCount(haystack: Unit, needle: Any, offset: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_count")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any], offset.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrCount(haystack: Unit, needle: Any, offset: Any, length: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_count")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any], offset.asInstanceOf[js.Any], length.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrCount(haystack: Unit, needle: Any, offset: Unit, length: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_count")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any], offset.asInstanceOf[js.Any], length.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrCount(haystack: Unit, needle: Unit, offset: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_count")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any], offset.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrCount(haystack: Unit, needle: Unit, offset: Any, length: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_count")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any], offset.asInstanceOf[js.Any], length.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrCount(haystack: Unit, needle: Unit, offset: Unit, length: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_count")(haystack.asInstanceOf[js.Any], needle.asInstanceOf[js.Any], offset.asInstanceOf[js.Any], length.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def substrReplace(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("substr_replace")().asInstanceOf[Any]
  inline def substrReplace(str: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("substr_replace")(str.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def substrReplace(str: Any, replace: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_replace")(str.asInstanceOf[js.Any], replace.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrReplace(str: Any, replace: Any, start: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_replace")(str.asInstanceOf[js.Any], replace.asInstanceOf[js.Any], start.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrReplace(str: Any, replace: Any, start: Any, length: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_replace")(str.asInstanceOf[js.Any], replace.asInstanceOf[js.Any], start.asInstanceOf[js.Any], length.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrReplace(str: Any, replace: Any, start: Unit, length: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_replace")(str.asInstanceOf[js.Any], replace.asInstanceOf[js.Any], start.asInstanceOf[js.Any], length.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrReplace(str: Any, replace: Unit, start: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_replace")(str.asInstanceOf[js.Any], replace.asInstanceOf[js.Any], start.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrReplace(str: Any, replace: Unit, start: Any, length: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_replace")(str.asInstanceOf[js.Any], replace.asInstanceOf[js.Any], start.asInstanceOf[js.Any], length.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrReplace(str: Any, replace: Unit, start: Unit, length: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_replace")(str.asInstanceOf[js.Any], replace.asInstanceOf[js.Any], start.asInstanceOf[js.Any], length.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrReplace(str: Unit, replace: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_replace")(str.asInstanceOf[js.Any], replace.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrReplace(str: Unit, replace: Any, start: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_replace")(str.asInstanceOf[js.Any], replace.asInstanceOf[js.Any], start.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrReplace(str: Unit, replace: Any, start: Any, length: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_replace")(str.asInstanceOf[js.Any], replace.asInstanceOf[js.Any], start.asInstanceOf[js.Any], length.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrReplace(str: Unit, replace: Any, start: Unit, length: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_replace")(str.asInstanceOf[js.Any], replace.asInstanceOf[js.Any], start.asInstanceOf[js.Any], length.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrReplace(str: Unit, replace: Unit, start: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_replace")(str.asInstanceOf[js.Any], replace.asInstanceOf[js.Any], start.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrReplace(str: Unit, replace: Unit, start: Any, length: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_replace")(str.asInstanceOf[js.Any], replace.asInstanceOf[js.Any], start.asInstanceOf[js.Any], length.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def substrReplace(str: Unit, replace: Unit, start: Unit, length: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("substr_replace")(str.asInstanceOf[js.Any], replace.asInstanceOf[js.Any], start.asInstanceOf[js.Any], length.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def trim(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("trim")().asInstanceOf[Any]
  inline def trim(str: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("trim")(str.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def trim(str: Any, charlist: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("trim")(str.asInstanceOf[js.Any], charlist.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def trim(str: Unit, charlist: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("trim")(str.asInstanceOf[js.Any], charlist.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def ucfirst(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("ucfirst")().asInstanceOf[Any]
  inline def ucfirst(str: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("ucfirst")(str.asInstanceOf[js.Any]).asInstanceOf[Any]
  
  inline def ucwords(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("ucwords")().asInstanceOf[Any]
  inline def ucwords(str: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("ucwords")(str.asInstanceOf[js.Any]).asInstanceOf[Any]
  
  inline def vprintf(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("vprintf")().asInstanceOf[Any]
  inline def vprintf(format: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("vprintf")(format.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def vprintf(format: Any, args: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("vprintf")(format.asInstanceOf[js.Any], args.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def vprintf(format: Unit, args: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("vprintf")(format.asInstanceOf[js.Any], args.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def vsprintf(): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("vsprintf")().asInstanceOf[Any]
  inline def vsprintf(format: Any): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("vsprintf")(format.asInstanceOf[js.Any]).asInstanceOf[Any]
  inline def vsprintf(format: Any, args: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("vsprintf")(format.asInstanceOf[js.Any], args.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def vsprintf(format: Unit, args: Any): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("vsprintf")(format.asInstanceOf[js.Any], args.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def wordwrap(args: Any*): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("wordwrap")(args.asInstanceOf[Seq[js.Any]]*).asInstanceOf[Any]
}
